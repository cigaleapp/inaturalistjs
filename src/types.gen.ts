// This file is auto-generated by @hey-api/openapi-ts

export type AutocompleteTaxon = CoreTaxon & {
    defaultPhoto?: TaxonPhoto;
    matchedTerm?: string;
    observationsCount?: number;
};

export type BaseResponse = {
    totalResults?: number;
    page?: number;
    perPage?: number;
};

export type Color = {
    id?: number;
    value?: string;
};

export type Comment = {
    id?: number;
    createdAt?: string;
    createdAtDetails?: DateDetails;
    user?: User;
};

export type PostAnnotation = {
    annotation?: {
        resourceType?: 'Observation';
        resourceId?: number;
        controlledAttributeId?: number;
        controlledValueId?: number;
    };
};

export type PostComment = {
    comment?: {
        parentType?: 'Observation' | 'ListedTaxon' | 'AssessmentSection' | 'ObservationField' | 'Post' | 'TaxonChange';
        parentId?: number;
        body?: string;
    };
};

export type PostFlag = {
    flag?: {
        flaggableType?: 'Comment' | 'Identification' | 'Message' | 'Observation' | 'Post' | 'Taxon';
        flaggableId?: number;
        flag?: 'spam' | 'inappropriate' | 'other';
    };
    flagExplanation?: string;
};

export type PostIdentification = {
    identification?: {
        observationId?: number;
        taxonId?: number;
        current?: boolean;
        body?: string;
    };
};

export type PostMessage = {
    message?: {
        /**
         * User ID of the recipient
         */
        toUserId?: number;
        /**
         * Identifier for the thread. Should be blank for new threads,
         * but when replying to an existing message, it should be set to
         * the thread_id of the message being replied to.
         *
         */
        threadId?: number;
        /**
         * Subject of the message
         */
        subject?: string;
        /**
         * Body of the message
         */
        body?: string;
    };
};

export type PostPost = {
    commit?: string;
    post?: {
        title?: string;
        body?: string;
        preferredFormatting?: string;
        userId?: number;
        parentId?: number;
        parentType?: string;
    };
};

export type PostObservation = {
    observation?: {
        speciesGuess?: string;
        taxonId?: number;
        description?: string;
    };
};

export type PostObservationFieldValue = {
    observationFieldValue?: {
        observationId?: number;
        observationFieldId?: number;
        value?: string;
    };
};

export type PostObservationPhoto = {
    observationPhoto?: {
        observationId?: number;
    };
};

export type PostObservationVote = {
    vote?: 'up' | 'down';
    scope?: 'needs_id';
};

export type PostProjectAdd = {
    observationId?: number;
};

export type PostProjectObservation = {
    projectId?: number;
    observationId?: number;
};

export type UpdateProjectObservation = {
    projectObservation?: {
        projectId?: number;
        observationId?: number;
        prefersCuratorCoordinateAccess?: boolean;
    };
};

export type PostQuality = {
    agree?: boolean;
};

export type PostVote = {
    vote?: 'up' | 'down';
};

export type PostUser = {
    user?: {
        login?: string;
        email?: string;
        /**
         * Display name for this user
         */
        name?: string;
        /**
         * Locale code for language/region localization. See
         * https://github.com/inaturalist/inaturalist/tree/master/config/locales
         * for available locales. Valid strings can be derived from file
         * names, e.g. `es-MX` from `es-MX.yml`.
         *
         */
        locale?: string;
        /**
         * Default time zone for the user's observations. See
         * http://api.rubyonrails.org/classes/ActiveSupport/TimeZone.html
         * for a list of values.
         *
         */
        timeZone?: string;
        /**
         * ID of the place for this user, customizes some common names and
         * default search parameters
         *
         */
        placeId?: number;
        /**
         * User profile description
         */
        description?: string;
        /**
         * User's profile pic. Requires POST/PUT as a multipart request.
         *
         */
        icon?: {
            [key: string]: unknown;
        };
    };
    /**
     * Set to true to remove the current user icon.
     */
    iconDelete?: boolean;
};

export type PostUserUpdateSession = {
    preferredTaxonPageAncestorsShown?: boolean;
    preferredTaxonPagePlaceId?: number;
    preferredTaxonPageTab?: string;
    prefersSkipCoarerIdModal?: boolean;
    prefersHideObsShowAnnotations?: boolean;
    prefersHideObsShowProjects?: boolean;
    prefersHideObsShowTags?: boolean;
    prefersHideObsShowObservationFields?: boolean;
    prefersHideObsShowIdentifiers?: boolean;
    prefersHideObsShowCopyright?: boolean;
    prefersHideObsShowQualityMetrics?: boolean;
};

export type PutFlag = {
    flag?: {
        resolved?: boolean;
    };
};

export type ConservationStatus = {
    placeId?: number;
    place?: CorePlace;
    status?: string;
};

export type CorePlace = {
    id?: number;
    name?: string;
    displayName?: string;
};

export type CoreTaxon = {
    id?: number;
    iconicTaxonId?: number;
    iconicTaxonName?: string;
    isActive?: boolean;
    name?: string;
    preferredCommonName?: string;
    rank?: string;
    rankLevel?: number;
};

export type DateDetails = {
    date?: string;
    day?: number;
    hour?: number;
    month?: number;
    week?: number;
    year?: number;
};

export type EstablishmentMeans = {
    establishmentMeans?: string;
    place?: CorePlace;
};

export type Fave = {
    id?: number;
    votableId?: number;
    createdAt?: string;
    user?: User;
};

export type FieldValue = {
    name?: string;
    value?: string;
};

export type Identification = {
    id?: number;
    observationId?: number;
    body?: string;
    createdAt?: string;
    updatedAt?: string;
    current?: boolean;
    taxon?: ObservationTaxon;
};

export type Message = {
    id?: number;
    subject?: string;
    body?: string;
    /**
     * ID of the user to whom this message belongs. Messages work like email,
     * so the sender gets a copy and the recipient gets a copy of each
     * message. This is always the authenticated user, so there's no real
     * need for a full user object.
     *
     */
    userId?: number;
    toUser?: User;
    fromUser?: User;
    /**
     * Identifier for the message thread, generally the ID of the sender's
     * copy of the first message
     *
     */
    threadId?: number;
    /**
     * Number of messages in this thread. Only included when threads=true
     *
     */
    threadMessagesCount?: number;
    /**
     * Array of flags on messages in this thread. Only included when
     * threads=true
     *
     */
    threadFlags?: Array<{
        [key: string]: unknown;
    }>;
};

export type NonOwnerIdentification = {
    id?: number;
    body?: string;
    createdAt?: string;
    createdAtDetails?: DateDetails;
    user?: User;
};

export type Observation = {
    id?: number;
    cachedVotesTotal?: number;
    captive?: boolean;
    comments?: Array<Comment>;
    commentsCount?: number;
    createdAt?: string;
    createdAtDetails?: DateDetails;
    createdTimeZone?: string;
    description?: string;
    favesCount?: number;
    geojson?: PointGeoJson;
    geoprivacy?: string;
    taxonGeoprivacy?: string;
    idPlease?: boolean;
    identificationsCount?: number;
    identificationsMostAgree?: boolean;
    identificationsMostDisagree?: boolean;
    identificationsSomeAgree?: boolean;
    licenseCode?: string;
    /**
     * in the format "lat,lng"
     */
    location?: string;
    mappable?: boolean;
    nonOwnerIds?: Array<NonOwnerIdentification>;
    numIdentificationAgreements?: number;
    numIdentificationDisagreements?: number;
    obscured?: boolean;
    observedOn?: string;
    observedOnDetails?: DateDetails;
    observedOnString?: string;
    observedTimeZone?: string;
    ofvs?: Array<FieldValue>;
    outOfRange?: boolean;
    photos?: Array<Photo>;
    placeGuess?: string;
    placeIds?: Array<number>;
    projectIds?: Array<number>;
    projectIdsWithCuratorId?: Array<number>;
    projectIdsWithoutCuratorId?: Array<number>;
    qualityGrade?: string;
    reviewedBy?: Array<number>;
    siteId?: number;
    sounds?: Array<Sound>;
    speciesGuess?: string;
    tags?: Array<string>;
    taxon?: ObservationTaxon;
    timeObservedAt?: string;
    timeZoneOffset?: string;
    updatedAt?: string;
    uri?: string;
    user?: User;
    verifiable?: boolean;
};

export type ObservationTaxon = CoreTaxon & {
    ancestorIds?: Array<number>;
    ancestry?: string;
    conservationStatus?: RawConservationStatus;
    endemic?: boolean;
    establishmentMeans?: EstablishmentMeans;
    introduced?: boolean;
    native?: boolean;
    threatened?: boolean;
};

export type Photo = {
    id?: number;
    attribution?: string;
    licenseCode?: string;
    url?: string;
};

export type PointGeoJson = {
    type?: string;
    /**
     * an array of [long, lat]
     */
    coordinates?: Array<number>;
};

export type PolygonGeoJson = {
    type?: string;
    coordinates?: Array<Array<Array<number>>>;
};

export type Project = {
    id?: number;
    title?: string;
    description?: string;
    slug?: string;
};

export type ProjectMember = {
    id?: number;
    projectId?: number;
    createdAt?: string;
    updatedAt?: string;
    role?: 'curator' | 'manager';
    observationsCount?: number;
    taxaCount?: number;
    user?: User;
};

export type RawConservationStatus = {
    /**
     * Identifier for the iNat source record associated with this status,
     * retrievable via https://www.inaturalist.org/sources/:id.json
     * (this endpoint is not a part of our public API and is thus subject to
     * change or removal)
     *
     */
    sourceId?: number;
    /**
     * Organization that declared this status
     *
     */
    authority?: string;
    /**
     * Body of the status, often coded, particularly when the status comes
     * from the IUCN or NatureServe. Consult the authority and/or the
     * status URL for details about the meanings of codes.
     *
     */
    status?: string;
    /**
     * Human-readable name of the status if it was coded.
     *
     */
    statusName?: string;
    /**
     * Coded value representing the equivalent IUCN status. Mappings:
     * NOT_EVALUATED = 0, DATA_DEFICIENT = 5, LEAST_CONCERN = 10,
     * NEAR_THREATENED = 20, VULNERABLE = 30, ENDANGERED = 40,
     * CRITICALLY_ENDANGERED = 50, EXTINCT_IN_THE_WILD = 60, EXTINCT = 70
     *
     */
    iucn?: number;
    /**
     * Default geoprivacy for observations of this taxon in the status's place.
     *
     */
    geoprivacy?: string;
};

export type TaxonConservationStatus = RawConservationStatus & {
    place?: CorePlace;
};

export type ShowObservation = Observation & {
    identifications?: Array<Identification>;
    faves?: Array<Fave>;
};

export type ShowPlace = CorePlace & {
    adminLevel?: number;
    ancestorPlaceIds?: Array<number>;
    bboxArea?: number;
    geometryGeojson?: PolygonGeoJson;
    /**
     * in the format "lat,lng"
     */
    location?: string;
    name?: string;
    placeType?: number;
};

export type ShowTaxon = CoreTaxon & {
    ancestorIds?: Array<number>;
    colors?: Array<Color>;
    conservationStatus?: ConservationStatus;
    conservationStatuses?: Array<TaxonConservationStatus>;
    defaultPhoto?: TaxonPhoto;
    establishmentMeans?: EstablishmentMeans;
    observationsCount?: number;
    preferredEstablishmentMeans?: string;
};

export type Sound = {
    id?: number;
    attribution?: string;
    licenseCode?: string;
};

export type TaxonPhoto = Photo & {
    mediumUrl?: string;
    squareUrl?: string;
};

export type User = {
    id?: number;
    iconContentType?: string;
    iconFileName?: string;
    icon?: string;
    iconUrl?: string;
    login?: string;
    name?: string;
};

export type MessagesResponse = BaseResponse & {
    results: Array<Message>;
};

export type NearbyPlacesResponse = BaseResponse & {
    results: {
        standard?: Array<ShowPlace>;
        community?: Array<ShowPlace>;
    };
};

export type ObservationsResponse = BaseResponse & {
    results: Array<Observation>;
};

export type ObservationsShowResponse = BaseResponse & {
    results: Array<ShowObservation>;
};

export type UserCountsResponse = BaseResponse & {
    results: Array<{
        count?: number;
        user?: User;
    }>;
};

export type ObservationsObserversResponse = BaseResponse & {
    results: Array<{
        observationCount?: number;
        speciesCount?: number;
        user?: User;
    }>;
};

export type SpeciesCountsResponse = BaseResponse & {
    results: Array<{
        count?: number;
        taxon?: ShowTaxon;
    }>;
};

export type PlacesResponse = BaseResponse & {
    results: Array<ShowPlace>;
};

export type ProjectMembersResponse = BaseResponse & {
    results: Array<ProjectMember>;
};

export type ProjectsResponse = BaseResponse & {
    results: Array<Project>;
};

export type TaxaAutocompleteResponse = BaseResponse & {
    results: Array<AutocompleteTaxon>;
};

export type TaxaShowResponse = BaseResponse & {
    results: Array<ShowTaxon>;
};

export type UtfGridResponse = {
    grid?: Array<string>;
    keys?: Array<string>;
    data?: {
        [key: string]: unknown;
    };
};

export type IdentificationsResponse = BaseResponse & {
    results: Array<Identification>;
};

export type _Error = {
    code?: number;
    message?: string;
};

export type PostAnnotationsData = {
    /**
     * Annotation object
     */
    body?: PostAnnotation;
    path?: never;
    query?: never;
    url: '/annotations';
};

export type PostAnnotationsResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type DeleteAnnotationsByIdData = {
    body?: never;
    path: {
        /**
         * ID or UUID of the annotation
         */
        id: string;
    };
    query?: never;
    url: '/annotations/{id}';
};

export type DeleteAnnotationsByIdResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type PostVotesVoteAnnotationByIdData = {
    body?: never;
    path: {
        /**
         * ID or UUID of the annotation
         */
        id: string;
    };
    query?: never;
    url: '/votes/vote/annotation/{id}';
};

export type PostVotesVoteAnnotationByIdResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type DeleteVotesUnvoteAnnotationByIdData = {
    body?: never;
    path: {
        /**
         * ID or UUID of the annotation
         */
        id: string;
    };
    query?: never;
    url: '/votes/unvote/annotation/{id}';
};

export type DeleteVotesUnvoteAnnotationByIdResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type PostCommentsData = {
    /**
     * Comment object
     */
    body?: PostComment;
    path?: never;
    query?: never;
    url: '/comments';
};

export type PostCommentsResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type DeleteCommentsByIdData = {
    body?: never;
    path: {
        /**
         * ID of the record
         */
        id: number;
    };
    query?: never;
    url: '/comments/{id}';
};

export type DeleteCommentsByIdResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type PutCommentsByIdData = {
    /**
     * Comment object
     */
    body?: PostComment;
    path: {
        /**
         * ID of the record
         */
        id: number;
    };
    query?: never;
    url: '/comments/{id}';
};

export type PutCommentsByIdResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type GetControlledTermsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/controlled_terms';
};

export type GetControlledTermsResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type GetControlledTermsForTaxonData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Filter by this taxon
         */
        taxonId: number;
    };
    url: '/controlled_terms/for_taxon';
};

export type GetControlledTermsForTaxonResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type PostFlagsData = {
    /**
     * Flag object
     */
    body?: PostFlag;
    path?: never;
    query?: never;
    url: '/flags';
};

export type PostFlagsResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type DeleteFlagsByIdData = {
    body?: never;
    path: {
        /**
         * ID of the record
         */
        id: number;
    };
    query?: never;
    url: '/flags/{id}';
};

export type DeleteFlagsByIdResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type PutFlagsByIdData = {
    body?: never;
    path: {
        /**
         * ID of the record
         */
        id: number;
    };
    query?: never;
    url: '/flags/{id}';
};

export type PutFlagsByIdResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type DeleteIdentificationsByIdData = {
    body?: never;
    path: {
        /**
         * ID of the record
         */
        id: number;
    };
    query?: never;
    url: '/identifications/{id}';
};

export type DeleteIdentificationsByIdResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type GetIdentificationsByIdData = {
    body?: never;
    path: {
        /**
         * Must have this ID
         */
        id: Array<number>;
    };
    query?: never;
    url: '/identifications/{id}';
};

export type GetIdentificationsByIdResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type PutIdentificationsByIdData = {
    /**
     * Identification object
     */
    body?: PostIdentification;
    path: {
        /**
         * ID of the record
         */
        id: number;
    };
    query?: never;
    url: '/identifications/{id}';
};

export type PutIdentificationsByIdResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type GetIdentificationsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * ID's taxon is the same it's observation's taxon
         */
        currentTaxon?: boolean;
        /**
         * ID was added by the observer
         */
        ownObservation?: boolean;
        /**
         * ID was created as a results of a taxon change
         */
        isChange?: boolean;
        /**
         * ID's taxon is currently an active taxon
         */
        taxonActive?: boolean;
        /**
         * Observation's taxon is currently an active taxon
         */
        observationTaxonActive?: boolean;
        /**
         * Identification ID
         */
        id?: Array<number>;
        /**
         * ID's taxon must have this rank
         */
        rank?: 'kingdom' | 'phylum' | 'subphylum' | 'superclass' | 'class' | 'subclass' | 'superorder' | 'order' | 'suborder' | 'infraorder' | 'superfamily' | 'epifamily' | 'family' | 'subfamily' | 'supertribe' | 'tribe' | 'subtribe' | 'genus' | 'genushybrid' | 'species' | 'hybrid' | 'subspecies' | 'variety' | 'form';
        /**
         * Observation's taxon must have this rank
         */
        observationRank?: 'kingdom' | 'phylum' | 'subphylum' | 'superclass' | 'class' | 'subclass' | 'superorder' | 'order' | 'suborder' | 'infraorder' | 'superfamily' | 'epifamily' | 'family' | 'subfamily' | 'supertribe' | 'tribe' | 'subtribe' | 'genus' | 'genushybrid' | 'species' | 'hybrid' | 'subspecies' | 'variety' | 'form';
        /**
         * Identifier must have this user ID
         */
        userId?: Array<number>;
        /**
         * Identifier must have this login
         */
        userLogin?: Array<string>;
        /**
         * Most recent ID on a observation by a user
         */
        current?: true | false | 'any';
        /**
         * Type of identification
         */
        category?: 'improving' | 'supporting' | 'leading' | 'maverick';
        /**
         * Observation must occur in this place
         */
        placeId?: Array<string>;
        /**
         * Observation must have this quality grade
         */
        qualityGrade?: 'casual' | 'needs_id' | 'research';
        /**
         * Only return identifications that were created as part of the specified taxon change
         */
        taxonChangeId?: Array<unknown>;
        /**
         * ID taxa must match the given taxa or their descendants
         */
        taxonId?: Array<string>;
        /**
         * Observation taxa must match the given taxa or their descendants
         */
        observationTaxonId?: Array<string>;
        /**
         * ID iconic taxon ID
         */
        iconicTaxonId?: Array<string>;
        /**
         * Observation iconic taxon ID
         */
        observationIconicTaxonId?: Array<string>;
        /**
         * ID taxon must have this rank or higher
         */
        lrank?: 'kingdom' | 'phylum' | 'subphylum' | 'superclass' | 'class' | 'subclass' | 'superorder' | 'order' | 'suborder' | 'infraorder' | 'superfamily' | 'epifamily' | 'family' | 'subfamily' | 'supertribe' | 'tribe' | 'subtribe' | 'genus' | 'genushybrid' | 'species' | 'hybrid' | 'subspecies' | 'variety' | 'form';
        /**
         * ID taxon must have this rank or lower
         */
        hrank?: 'kingdom' | 'phylum' | 'subphylum' | 'superclass' | 'class' | 'subclass' | 'superorder' | 'order' | 'suborder' | 'infraorder' | 'superfamily' | 'epifamily' | 'family' | 'subfamily' | 'supertribe' | 'tribe' | 'subtribe' | 'genus' | 'genushybrid' | 'species' | 'hybrid' | 'subspecies' | 'variety' | 'form';
        /**
         * Observation taxon must have this rank or higher
         */
        observationLrank?: 'kingdom' | 'phylum' | 'subphylum' | 'superclass' | 'class' | 'subclass' | 'superorder' | 'order' | 'suborder' | 'infraorder' | 'superfamily' | 'epifamily' | 'family' | 'subfamily' | 'supertribe' | 'tribe' | 'subtribe' | 'genus' | 'genushybrid' | 'species' | 'hybrid' | 'subspecies' | 'variety' | 'form';
        /**
         * Observation taxon must have this rank or lower
         */
        observationHrank?: 'kingdom' | 'phylum' | 'subphylum' | 'superclass' | 'class' | 'subclass' | 'superorder' | 'order' | 'suborder' | 'infraorder' | 'superfamily' | 'epifamily' | 'family' | 'subfamily' | 'supertribe' | 'tribe' | 'subtribe' | 'genus' | 'genushybrid' | 'species' | 'hybrid' | 'subspecies' | 'variety' | 'form';
        /**
         * Exclude IDs of these taxa and their descendants
         */
        withoutTaxonId?: Array<string>;
        /**
         * Exclude IDs of observations of these taxa and their descendants
         */
        withoutObservationTaxonId?: Array<string>;
        /**
         * ID created on or after this time
         */
        d1?: string;
        /**
         * ID created on or before this time
         */
        d2?: string;
        /**
         * Observation created on or after this date
         */
        observationCreatedD1?: string;
        /**
         * Observation created on or before this date
         */
        observationCreatedD2?: string;
        /**
         * Observation observed on or after this date
         */
        observedD1?: string;
        /**
         * Observation observed on or before this date
         */
        observedD2?: string;
        /**
         * Must have an ID above this value
         */
        idAbove?: string;
        /**
         * Must have an ID below this value
         */
        idBelow?: string;
        /**
         * Pagination `page` number
         */
        page?: string;
        /**
         * Number of results to return in a `page`. The maximum value is generally
         * 200 unless otherwise noted
         *
         */
        perPage?: string;
        /**
         * Sort order
         */
        order?: 'desc' | 'asc';
        /**
         * Sort field
         */
        orderBy?: 'created_at' | 'id';
        /**
         * Return only the record IDs
         */
        onlyId?: boolean;
    };
    url: '/identifications';
};

export type GetIdentificationsResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type PostIdentificationsData = {
    /**
     * Identification object
     */
    body?: PostIdentification;
    path?: never;
    query?: never;
    url: '/identifications';
};

export type PostIdentificationsResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type GetIdentificationsCategoriesData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * ID's taxon is the same it's observation's taxon
         */
        currentTaxon?: boolean;
        /**
         * ID was added by the observer
         */
        ownObservation?: boolean;
        /**
         * ID was created as a results of a taxon change
         */
        isChange?: boolean;
        /**
         * ID's taxon is currently an active taxon
         */
        taxonActive?: boolean;
        /**
         * Observation's taxon is currently an active taxon
         */
        observationTaxonActive?: boolean;
        /**
         * Identification ID
         */
        id?: Array<number>;
        /**
         * ID's taxon must have this rank
         */
        rank?: 'kingdom' | 'phylum' | 'subphylum' | 'superclass' | 'class' | 'subclass' | 'superorder' | 'order' | 'suborder' | 'infraorder' | 'superfamily' | 'epifamily' | 'family' | 'subfamily' | 'supertribe' | 'tribe' | 'subtribe' | 'genus' | 'genushybrid' | 'species' | 'hybrid' | 'subspecies' | 'variety' | 'form';
        /**
         * Observation's taxon must have this rank
         */
        observationRank?: 'kingdom' | 'phylum' | 'subphylum' | 'superclass' | 'class' | 'subclass' | 'superorder' | 'order' | 'suborder' | 'infraorder' | 'superfamily' | 'epifamily' | 'family' | 'subfamily' | 'supertribe' | 'tribe' | 'subtribe' | 'genus' | 'genushybrid' | 'species' | 'hybrid' | 'subspecies' | 'variety' | 'form';
        /**
         * Identifier must have this user ID
         */
        userId?: Array<number>;
        /**
         * Identifier must have this login
         */
        userLogin?: Array<string>;
        /**
         * Most recent ID on a observation by a user
         */
        current?: true | false | 'any';
        /**
         * Type of identification
         */
        category?: 'improving' | 'supporting' | 'leading' | 'maverick';
        /**
         * Observation must occur in this place
         */
        placeId?: Array<string>;
        /**
         * Observation must have this quality grade
         */
        qualityGrade?: 'casual' | 'needs_id' | 'research';
        /**
         * Only return identifications that were created as part of the specified taxon change
         */
        taxonChangeId?: Array<unknown>;
        /**
         * ID taxa must match the given taxa or their descendants
         */
        taxonId?: Array<string>;
        /**
         * Observation taxa must match the given taxa or their descendants
         */
        observationTaxonId?: Array<string>;
        /**
         * ID iconic taxon ID
         */
        iconicTaxonId?: Array<string>;
        /**
         * Observation iconic taxon ID
         */
        observationIconicTaxonId?: Array<string>;
        /**
         * ID taxon must have this rank or higher
         */
        lrank?: 'kingdom' | 'phylum' | 'subphylum' | 'superclass' | 'class' | 'subclass' | 'superorder' | 'order' | 'suborder' | 'infraorder' | 'superfamily' | 'epifamily' | 'family' | 'subfamily' | 'supertribe' | 'tribe' | 'subtribe' | 'genus' | 'genushybrid' | 'species' | 'hybrid' | 'subspecies' | 'variety' | 'form';
        /**
         * ID taxon must have this rank or lower
         */
        hrank?: 'kingdom' | 'phylum' | 'subphylum' | 'superclass' | 'class' | 'subclass' | 'superorder' | 'order' | 'suborder' | 'infraorder' | 'superfamily' | 'epifamily' | 'family' | 'subfamily' | 'supertribe' | 'tribe' | 'subtribe' | 'genus' | 'genushybrid' | 'species' | 'hybrid' | 'subspecies' | 'variety' | 'form';
        /**
         * Observation taxon must have this rank or higher
         */
        observationLrank?: 'kingdom' | 'phylum' | 'subphylum' | 'superclass' | 'class' | 'subclass' | 'superorder' | 'order' | 'suborder' | 'infraorder' | 'superfamily' | 'epifamily' | 'family' | 'subfamily' | 'supertribe' | 'tribe' | 'subtribe' | 'genus' | 'genushybrid' | 'species' | 'hybrid' | 'subspecies' | 'variety' | 'form';
        /**
         * Observation taxon must have this rank or lower
         */
        observationHrank?: 'kingdom' | 'phylum' | 'subphylum' | 'superclass' | 'class' | 'subclass' | 'superorder' | 'order' | 'suborder' | 'infraorder' | 'superfamily' | 'epifamily' | 'family' | 'subfamily' | 'supertribe' | 'tribe' | 'subtribe' | 'genus' | 'genushybrid' | 'species' | 'hybrid' | 'subspecies' | 'variety' | 'form';
        /**
         * Exclude IDs of these taxa and their descendants
         */
        withoutTaxonId?: Array<string>;
        /**
         * Exclude IDs of observations of these taxa and their descendants
         */
        withoutObservationTaxonId?: Array<string>;
        /**
         * ID created on or after this time
         */
        d1?: string;
        /**
         * ID created on or before this time
         */
        d2?: string;
        /**
         * Observation created on or after this date
         */
        observationCreatedD1?: string;
        /**
         * Observation created on or before this date
         */
        observationCreatedD2?: string;
        /**
         * Observation observed on or after this date
         */
        observedD1?: string;
        /**
         * Observation observed on or before this date
         */
        observedD2?: string;
        /**
         * Must have an ID above this value
         */
        idAbove?: string;
        /**
         * Must have an ID below this value
         */
        idBelow?: string;
        /**
         * Pagination `page` number
         */
        page?: string;
        /**
         * Number of results to return in a `page`. The maximum value is generally
         * 200 unless otherwise noted
         *
         */
        perPage?: string;
        /**
         * Sort order
         */
        order?: 'desc' | 'asc';
        /**
         * Sort field
         */
        orderBy?: 'created_at' | 'id';
        /**
         * Return only the record IDs
         */
        onlyId?: boolean;
    };
    url: '/identifications/categories';
};

export type GetIdentificationsCategoriesResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type GetIdentificationsSpeciesCountsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * ID's taxon is the same it's observation's taxon
         */
        currentTaxon?: boolean;
        /**
         * ID was added by the observer
         */
        ownObservation?: boolean;
        /**
         * ID was created as a results of a taxon change
         */
        isChange?: boolean;
        /**
         * ID's taxon is currently an active taxon
         */
        taxonActive?: boolean;
        /**
         * Observation's taxon is currently an active taxon
         */
        observationTaxonActive?: boolean;
        /**
         * Identification ID
         */
        id?: Array<number>;
        /**
         * ID's taxon must have this rank
         */
        rank?: 'kingdom' | 'phylum' | 'subphylum' | 'superclass' | 'class' | 'subclass' | 'superorder' | 'order' | 'suborder' | 'infraorder' | 'superfamily' | 'epifamily' | 'family' | 'subfamily' | 'supertribe' | 'tribe' | 'subtribe' | 'genus' | 'genushybrid' | 'species' | 'hybrid' | 'subspecies' | 'variety' | 'form';
        /**
         * Observation's taxon must have this rank
         */
        observationRank?: 'kingdom' | 'phylum' | 'subphylum' | 'superclass' | 'class' | 'subclass' | 'superorder' | 'order' | 'suborder' | 'infraorder' | 'superfamily' | 'epifamily' | 'family' | 'subfamily' | 'supertribe' | 'tribe' | 'subtribe' | 'genus' | 'genushybrid' | 'species' | 'hybrid' | 'subspecies' | 'variety' | 'form';
        /**
         * Identifier must have this user ID
         */
        userId?: Array<number>;
        /**
         * Identifier must have this login
         */
        userLogin?: Array<string>;
        /**
         * Most recent ID on a observation by a user
         */
        current?: true | false | 'any';
        /**
         * Type of identification
         */
        category?: 'improving' | 'supporting' | 'leading' | 'maverick';
        /**
         * Observation must occur in this place
         */
        placeId?: Array<string>;
        /**
         * Observation must have this quality grade
         */
        qualityGrade?: 'casual' | 'needs_id' | 'research';
        /**
         * Only return identifications that were created as part of the specified taxon change
         */
        taxonChangeId?: Array<unknown>;
        /**
         * ID taxa must match the given taxa or their descendants
         */
        taxonId?: Array<string>;
        /**
         * Observation taxa must match the given taxa or their descendants
         */
        observationTaxonId?: Array<string>;
        /**
         * ID iconic taxon ID
         */
        iconicTaxonId?: Array<string>;
        /**
         * Observation iconic taxon ID
         */
        observationIconicTaxonId?: Array<string>;
        /**
         * ID taxon must have this rank or higher
         */
        lrank?: 'kingdom' | 'phylum' | 'subphylum' | 'superclass' | 'class' | 'subclass' | 'superorder' | 'order' | 'suborder' | 'infraorder' | 'superfamily' | 'epifamily' | 'family' | 'subfamily' | 'supertribe' | 'tribe' | 'subtribe' | 'genus' | 'genushybrid' | 'species' | 'hybrid' | 'subspecies' | 'variety' | 'form';
        /**
         * ID taxon must have this rank or lower
         */
        hrank?: 'kingdom' | 'phylum' | 'subphylum' | 'superclass' | 'class' | 'subclass' | 'superorder' | 'order' | 'suborder' | 'infraorder' | 'superfamily' | 'epifamily' | 'family' | 'subfamily' | 'supertribe' | 'tribe' | 'subtribe' | 'genus' | 'genushybrid' | 'species' | 'hybrid' | 'subspecies' | 'variety' | 'form';
        /**
         * Observation taxon must have this rank or higher
         */
        observationLrank?: 'kingdom' | 'phylum' | 'subphylum' | 'superclass' | 'class' | 'subclass' | 'superorder' | 'order' | 'suborder' | 'infraorder' | 'superfamily' | 'epifamily' | 'family' | 'subfamily' | 'supertribe' | 'tribe' | 'subtribe' | 'genus' | 'genushybrid' | 'species' | 'hybrid' | 'subspecies' | 'variety' | 'form';
        /**
         * Observation taxon must have this rank or lower
         */
        observationHrank?: 'kingdom' | 'phylum' | 'subphylum' | 'superclass' | 'class' | 'subclass' | 'superorder' | 'order' | 'suborder' | 'infraorder' | 'superfamily' | 'epifamily' | 'family' | 'subfamily' | 'supertribe' | 'tribe' | 'subtribe' | 'genus' | 'genushybrid' | 'species' | 'hybrid' | 'subspecies' | 'variety' | 'form';
        /**
         * Exclude IDs of these taxa and their descendants
         */
        withoutTaxonId?: Array<string>;
        /**
         * Exclude IDs of observations of these taxa and their descendants
         */
        withoutObservationTaxonId?: Array<string>;
        /**
         * ID created on or after this time
         */
        d1?: string;
        /**
         * ID created on or before this time
         */
        d2?: string;
        /**
         * Observation created on or after this date
         */
        observationCreatedD1?: string;
        /**
         * Observation created on or before this date
         */
        observationCreatedD2?: string;
        /**
         * Observation observed on or after this date
         */
        observedD1?: string;
        /**
         * Observation observed on or before this date
         */
        observedD2?: string;
        /**
         * Must have an ID above this value
         */
        idAbove?: string;
        /**
         * Must have an ID below this value
         */
        idBelow?: string;
        /**
         * Pagination `page` number
         */
        page?: string;
        /**
         * Number of results to return in a `page`. The maximum value is generally
         * 200 unless otherwise noted
         *
         */
        perPage?: string;
        /**
         * Sort order
         */
        order?: 'desc' | 'asc';
        /**
         * Sort field
         */
        orderBy?: 'created_at' | 'id';
        /**
         * Return only the record IDs
         */
        onlyId?: boolean;
        /**
         * Source of the taxon for counting
         */
        taxonOf?: 'identification' | 'observation';
    };
    url: '/identifications/species_counts';
};

export type GetIdentificationsSpeciesCountsErrors = {
    /**
     * Unexpected error
     */
    default: _Error;
};

export type GetIdentificationsSpeciesCountsError = GetIdentificationsSpeciesCountsErrors[keyof GetIdentificationsSpeciesCountsErrors];

export type GetIdentificationsSpeciesCountsResponses = {
    /**
     * Returns an object with metadata and an array of taxa
     *
     */
    200: SpeciesCountsResponse;
};

export type GetIdentificationsSpeciesCountsResponse = GetIdentificationsSpeciesCountsResponses[keyof GetIdentificationsSpeciesCountsResponses];

export type GetIdentificationsIdentifiersData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * ID's taxon is the same it's observation's taxon
         */
        currentTaxon?: boolean;
        /**
         * ID was added by the observer
         */
        ownObservation?: boolean;
        /**
         * ID was created as a results of a taxon change
         */
        isChange?: boolean;
        /**
         * ID's taxon is currently an active taxon
         */
        taxonActive?: boolean;
        /**
         * Observation's taxon is currently an active taxon
         */
        observationTaxonActive?: boolean;
        /**
         * Identification ID
         */
        id?: Array<number>;
        /**
         * ID's taxon must have this rank
         */
        rank?: 'kingdom' | 'phylum' | 'subphylum' | 'superclass' | 'class' | 'subclass' | 'superorder' | 'order' | 'suborder' | 'infraorder' | 'superfamily' | 'epifamily' | 'family' | 'subfamily' | 'supertribe' | 'tribe' | 'subtribe' | 'genus' | 'genushybrid' | 'species' | 'hybrid' | 'subspecies' | 'variety' | 'form';
        /**
         * Observation's taxon must have this rank
         */
        observationRank?: 'kingdom' | 'phylum' | 'subphylum' | 'superclass' | 'class' | 'subclass' | 'superorder' | 'order' | 'suborder' | 'infraorder' | 'superfamily' | 'epifamily' | 'family' | 'subfamily' | 'supertribe' | 'tribe' | 'subtribe' | 'genus' | 'genushybrid' | 'species' | 'hybrid' | 'subspecies' | 'variety' | 'form';
        /**
         * Identifier must have this user ID
         */
        userId?: Array<number>;
        /**
         * Identifier must have this login
         */
        userLogin?: Array<string>;
        /**
         * Most recent ID on a observation by a user
         */
        current?: true | false | 'any';
        /**
         * Type of identification
         */
        category?: 'improving' | 'supporting' | 'leading' | 'maverick';
        /**
         * Observation must occur in this place
         */
        placeId?: Array<string>;
        /**
         * Observation must have this quality grade
         */
        qualityGrade?: 'casual' | 'needs_id' | 'research';
        /**
         * Only return identifications that were created as part of the specified taxon change
         */
        taxonChangeId?: Array<unknown>;
        /**
         * ID taxa must match the given taxa or their descendants
         */
        taxonId?: Array<string>;
        /**
         * Observation taxa must match the given taxa or their descendants
         */
        observationTaxonId?: Array<string>;
        /**
         * ID iconic taxon ID
         */
        iconicTaxonId?: Array<string>;
        /**
         * Observation iconic taxon ID
         */
        observationIconicTaxonId?: Array<string>;
        /**
         * ID taxon must have this rank or higher
         */
        lrank?: 'kingdom' | 'phylum' | 'subphylum' | 'superclass' | 'class' | 'subclass' | 'superorder' | 'order' | 'suborder' | 'infraorder' | 'superfamily' | 'epifamily' | 'family' | 'subfamily' | 'supertribe' | 'tribe' | 'subtribe' | 'genus' | 'genushybrid' | 'species' | 'hybrid' | 'subspecies' | 'variety' | 'form';
        /**
         * ID taxon must have this rank or lower
         */
        hrank?: 'kingdom' | 'phylum' | 'subphylum' | 'superclass' | 'class' | 'subclass' | 'superorder' | 'order' | 'suborder' | 'infraorder' | 'superfamily' | 'epifamily' | 'family' | 'subfamily' | 'supertribe' | 'tribe' | 'subtribe' | 'genus' | 'genushybrid' | 'species' | 'hybrid' | 'subspecies' | 'variety' | 'form';
        /**
         * Observation taxon must have this rank or higher
         */
        observationLrank?: 'kingdom' | 'phylum' | 'subphylum' | 'superclass' | 'class' | 'subclass' | 'superorder' | 'order' | 'suborder' | 'infraorder' | 'superfamily' | 'epifamily' | 'family' | 'subfamily' | 'supertribe' | 'tribe' | 'subtribe' | 'genus' | 'genushybrid' | 'species' | 'hybrid' | 'subspecies' | 'variety' | 'form';
        /**
         * Observation taxon must have this rank or lower
         */
        observationHrank?: 'kingdom' | 'phylum' | 'subphylum' | 'superclass' | 'class' | 'subclass' | 'superorder' | 'order' | 'suborder' | 'infraorder' | 'superfamily' | 'epifamily' | 'family' | 'subfamily' | 'supertribe' | 'tribe' | 'subtribe' | 'genus' | 'genushybrid' | 'species' | 'hybrid' | 'subspecies' | 'variety' | 'form';
        /**
         * Exclude IDs of these taxa and their descendants
         */
        withoutTaxonId?: Array<string>;
        /**
         * Exclude IDs of observations of these taxa and their descendants
         */
        withoutObservationTaxonId?: Array<string>;
        /**
         * ID created on or after this time
         */
        d1?: string;
        /**
         * ID created on or before this time
         */
        d2?: string;
        /**
         * Observation created on or after this date
         */
        observationCreatedD1?: string;
        /**
         * Observation created on or before this date
         */
        observationCreatedD2?: string;
        /**
         * Observation observed on or after this date
         */
        observedD1?: string;
        /**
         * Observation observed on or before this date
         */
        observedD2?: string;
        /**
         * Must have an ID above this value
         */
        idAbove?: string;
        /**
         * Must have an ID below this value
         */
        idBelow?: string;
        /**
         * Pagination `page` number
         */
        page?: string;
        /**
         * Number of results to return in a `page`. The maximum value is generally
         * 200 unless otherwise noted
         *
         */
        perPage?: string;
        /**
         * Sort order
         */
        order?: 'desc' | 'asc';
        /**
         * Sort field
         */
        orderBy?: 'created_at' | 'id';
        /**
         * Return only the record IDs
         */
        onlyId?: boolean;
    };
    url: '/identifications/identifiers';
};

export type GetIdentificationsIdentifiersErrors = {
    /**
     * Unexpected error
     */
    default: _Error;
};

export type GetIdentificationsIdentifiersError = GetIdentificationsIdentifiersErrors[keyof GetIdentificationsIdentifiersErrors];

export type GetIdentificationsIdentifiersResponses = {
    /**
     * Returns an object with metadata and an array of identifiers
     *
     */
    200: UserCountsResponse;
};

export type GetIdentificationsIdentifiersResponse = GetIdentificationsIdentifiersResponses[keyof GetIdentificationsIdentifiersResponses];

export type GetIdentificationsObserversData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * ID's taxon is the same it's observation's taxon
         */
        currentTaxon?: boolean;
        /**
         * ID was added by the observer
         */
        ownObservation?: boolean;
        /**
         * ID was created as a results of a taxon change
         */
        isChange?: boolean;
        /**
         * ID's taxon is currently an active taxon
         */
        taxonActive?: boolean;
        /**
         * Observation's taxon is currently an active taxon
         */
        observationTaxonActive?: boolean;
        /**
         * Identification ID
         */
        id?: Array<number>;
        /**
         * ID's taxon must have this rank
         */
        rank?: 'kingdom' | 'phylum' | 'subphylum' | 'superclass' | 'class' | 'subclass' | 'superorder' | 'order' | 'suborder' | 'infraorder' | 'superfamily' | 'epifamily' | 'family' | 'subfamily' | 'supertribe' | 'tribe' | 'subtribe' | 'genus' | 'genushybrid' | 'species' | 'hybrid' | 'subspecies' | 'variety' | 'form';
        /**
         * Observation's taxon must have this rank
         */
        observationRank?: 'kingdom' | 'phylum' | 'subphylum' | 'superclass' | 'class' | 'subclass' | 'superorder' | 'order' | 'suborder' | 'infraorder' | 'superfamily' | 'epifamily' | 'family' | 'subfamily' | 'supertribe' | 'tribe' | 'subtribe' | 'genus' | 'genushybrid' | 'species' | 'hybrid' | 'subspecies' | 'variety' | 'form';
        /**
         * Identifier must have this user ID
         */
        userId?: Array<number>;
        /**
         * Identifier must have this login
         */
        userLogin?: Array<string>;
        /**
         * Most recent ID on a observation by a user
         */
        current?: true | false | 'any';
        /**
         * Type of identification
         */
        category?: 'improving' | 'supporting' | 'leading' | 'maverick';
        /**
         * Observation must occur in this place
         */
        placeId?: Array<string>;
        /**
         * Observation must have this quality grade
         */
        qualityGrade?: 'casual' | 'needs_id' | 'research';
        /**
         * Only return identifications that were created as part of the specified taxon change
         */
        taxonChangeId?: Array<unknown>;
        /**
         * ID taxa must match the given taxa or their descendants
         */
        taxonId?: Array<string>;
        /**
         * Observation taxa must match the given taxa or their descendants
         */
        observationTaxonId?: Array<string>;
        /**
         * ID iconic taxon ID
         */
        iconicTaxonId?: Array<string>;
        /**
         * Observation iconic taxon ID
         */
        observationIconicTaxonId?: Array<string>;
        /**
         * ID taxon must have this rank or higher
         */
        lrank?: 'kingdom' | 'phylum' | 'subphylum' | 'superclass' | 'class' | 'subclass' | 'superorder' | 'order' | 'suborder' | 'infraorder' | 'superfamily' | 'epifamily' | 'family' | 'subfamily' | 'supertribe' | 'tribe' | 'subtribe' | 'genus' | 'genushybrid' | 'species' | 'hybrid' | 'subspecies' | 'variety' | 'form';
        /**
         * ID taxon must have this rank or lower
         */
        hrank?: 'kingdom' | 'phylum' | 'subphylum' | 'superclass' | 'class' | 'subclass' | 'superorder' | 'order' | 'suborder' | 'infraorder' | 'superfamily' | 'epifamily' | 'family' | 'subfamily' | 'supertribe' | 'tribe' | 'subtribe' | 'genus' | 'genushybrid' | 'species' | 'hybrid' | 'subspecies' | 'variety' | 'form';
        /**
         * Observation taxon must have this rank or higher
         */
        observationLrank?: 'kingdom' | 'phylum' | 'subphylum' | 'superclass' | 'class' | 'subclass' | 'superorder' | 'order' | 'suborder' | 'infraorder' | 'superfamily' | 'epifamily' | 'family' | 'subfamily' | 'supertribe' | 'tribe' | 'subtribe' | 'genus' | 'genushybrid' | 'species' | 'hybrid' | 'subspecies' | 'variety' | 'form';
        /**
         * Observation taxon must have this rank or lower
         */
        observationHrank?: 'kingdom' | 'phylum' | 'subphylum' | 'superclass' | 'class' | 'subclass' | 'superorder' | 'order' | 'suborder' | 'infraorder' | 'superfamily' | 'epifamily' | 'family' | 'subfamily' | 'supertribe' | 'tribe' | 'subtribe' | 'genus' | 'genushybrid' | 'species' | 'hybrid' | 'subspecies' | 'variety' | 'form';
        /**
         * Exclude IDs of these taxa and their descendants
         */
        withoutTaxonId?: Array<string>;
        /**
         * Exclude IDs of observations of these taxa and their descendants
         */
        withoutObservationTaxonId?: Array<string>;
        /**
         * ID created on or after this time
         */
        d1?: string;
        /**
         * ID created on or before this time
         */
        d2?: string;
        /**
         * Observation created on or after this date
         */
        observationCreatedD1?: string;
        /**
         * Observation created on or before this date
         */
        observationCreatedD2?: string;
        /**
         * Observation observed on or after this date
         */
        observedD1?: string;
        /**
         * Observation observed on or before this date
         */
        observedD2?: string;
        /**
         * Must have an ID above this value
         */
        idAbove?: string;
        /**
         * Must have an ID below this value
         */
        idBelow?: string;
        /**
         * Pagination `page` number
         */
        page?: string;
        /**
         * Number of results to return in a `page`. The maximum value is generally
         * 200 unless otherwise noted
         *
         */
        perPage?: string;
        /**
         * Sort order
         */
        order?: 'desc' | 'asc';
        /**
         * Sort field
         */
        orderBy?: 'created_at' | 'id';
        /**
         * Return only the record IDs
         */
        onlyId?: boolean;
    };
    url: '/identifications/observers';
};

export type GetIdentificationsObserversErrors = {
    /**
     * Unexpected error
     */
    default: _Error;
};

export type GetIdentificationsObserversError = GetIdentificationsObserversErrors[keyof GetIdentificationsObserversErrors];

export type GetIdentificationsObserversResponses = {
    /**
     * Returns an object with metadata and an array of observers
     *
     */
    200: UserCountsResponse;
};

export type GetIdentificationsObserversResponse = GetIdentificationsObserversResponses[keyof GetIdentificationsObserversResponses];

export type GetIdentificationsRecentTaxaData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * ID's taxon is the same it's observation's taxon
         */
        currentTaxon?: boolean;
        /**
         * ID was added by the observer
         */
        ownObservation?: boolean;
        /**
         * ID was created as a results of a taxon change
         */
        isChange?: boolean;
        /**
         * ID's taxon is currently an active taxon
         */
        taxonActive?: boolean;
        /**
         * Observation's taxon is currently an active taxon
         */
        observationTaxonActive?: boolean;
        /**
         * Identification ID
         */
        id?: Array<number>;
        /**
         * ID's taxon must have this rank
         */
        rank?: 'kingdom' | 'phylum' | 'subphylum' | 'superclass' | 'class' | 'subclass' | 'superorder' | 'order' | 'suborder' | 'infraorder' | 'superfamily' | 'epifamily' | 'family' | 'subfamily' | 'supertribe' | 'tribe' | 'subtribe' | 'genus' | 'genushybrid' | 'species' | 'hybrid' | 'subspecies' | 'variety' | 'form';
        /**
         * Observation's taxon must have this rank
         */
        observationRank?: 'kingdom' | 'phylum' | 'subphylum' | 'superclass' | 'class' | 'subclass' | 'superorder' | 'order' | 'suborder' | 'infraorder' | 'superfamily' | 'epifamily' | 'family' | 'subfamily' | 'supertribe' | 'tribe' | 'subtribe' | 'genus' | 'genushybrid' | 'species' | 'hybrid' | 'subspecies' | 'variety' | 'form';
        /**
         * Identifier must have this user ID
         */
        userId?: Array<number>;
        /**
         * Identifier must have this login
         */
        userLogin?: Array<string>;
        /**
         * Most recent ID on a observation by a user
         */
        current?: true | false | 'any';
        /**
         * Type of identification
         */
        category?: 'improving' | 'supporting' | 'leading' | 'maverick';
        /**
         * Observation must occur in this place
         */
        placeId?: Array<string>;
        /**
         * Observation must have this quality grade
         */
        qualityGrade?: 'casual' | 'needs_id' | 'research';
        /**
         * Only return identifications that were created as part of the specified taxon change
         */
        taxonChangeId?: Array<unknown>;
        /**
         * ID taxa must match the given taxa or their descendants
         */
        taxonId?: Array<string>;
        /**
         * Observation taxa must match the given taxa or their descendants
         */
        observationTaxonId?: Array<string>;
        /**
         * ID iconic taxon ID
         */
        iconicTaxonId?: Array<string>;
        /**
         * Observation iconic taxon ID
         */
        observationIconicTaxonId?: Array<string>;
        /**
         * ID taxon must have this rank or higher
         */
        lrank?: 'kingdom' | 'phylum' | 'subphylum' | 'superclass' | 'class' | 'subclass' | 'superorder' | 'order' | 'suborder' | 'infraorder' | 'superfamily' | 'epifamily' | 'family' | 'subfamily' | 'supertribe' | 'tribe' | 'subtribe' | 'genus' | 'genushybrid' | 'species' | 'hybrid' | 'subspecies' | 'variety' | 'form';
        /**
         * ID taxon must have this rank or lower
         */
        hrank?: 'kingdom' | 'phylum' | 'subphylum' | 'superclass' | 'class' | 'subclass' | 'superorder' | 'order' | 'suborder' | 'infraorder' | 'superfamily' | 'epifamily' | 'family' | 'subfamily' | 'supertribe' | 'tribe' | 'subtribe' | 'genus' | 'genushybrid' | 'species' | 'hybrid' | 'subspecies' | 'variety' | 'form';
        /**
         * Observation taxon must have this rank or higher
         */
        observationLrank?: 'kingdom' | 'phylum' | 'subphylum' | 'superclass' | 'class' | 'subclass' | 'superorder' | 'order' | 'suborder' | 'infraorder' | 'superfamily' | 'epifamily' | 'family' | 'subfamily' | 'supertribe' | 'tribe' | 'subtribe' | 'genus' | 'genushybrid' | 'species' | 'hybrid' | 'subspecies' | 'variety' | 'form';
        /**
         * Observation taxon must have this rank or lower
         */
        observationHrank?: 'kingdom' | 'phylum' | 'subphylum' | 'superclass' | 'class' | 'subclass' | 'superorder' | 'order' | 'suborder' | 'infraorder' | 'superfamily' | 'epifamily' | 'family' | 'subfamily' | 'supertribe' | 'tribe' | 'subtribe' | 'genus' | 'genushybrid' | 'species' | 'hybrid' | 'subspecies' | 'variety' | 'form';
        /**
         * Exclude IDs of these taxa and their descendants
         */
        withoutTaxonId?: Array<string>;
        /**
         * Exclude IDs of observations of these taxa and their descendants
         */
        withoutObservationTaxonId?: Array<string>;
        /**
         * ID created on or after this time
         */
        d1?: string;
        /**
         * ID created on or before this time
         */
        d2?: string;
        /**
         * Observation created on or after this date
         */
        observationCreatedD1?: string;
        /**
         * Observation created on or before this date
         */
        observationCreatedD2?: string;
        /**
         * Observation observed on or after this date
         */
        observedD1?: string;
        /**
         * Observation observed on or before this date
         */
        observedD2?: string;
        /**
         * Must have an ID above this value
         */
        idAbove?: string;
        /**
         * Must have an ID below this value
         */
        idBelow?: string;
        /**
         * Pagination `page` number
         */
        page?: string;
        /**
         * Number of results to return in a `page`. The maximum value is generally
         * 200 unless otherwise noted
         *
         */
        perPage?: string;
        /**
         * Sort order
         */
        order?: 'desc' | 'asc';
        /**
         * Sort field
         */
        orderBy?: 'created_at' | 'id';
        /**
         * Return only the record IDs
         */
        onlyId?: boolean;
    };
    url: '/identifications/recent_taxa';
};

export type GetIdentificationsRecentTaxaResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type GetIdentificationsSimilarSpeciesData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Whether or not positional accuracy / coordinate uncertainty has been specified
         */
        acc?: boolean;
        /**
         * Captive or cultivated observations
         */
        captive?: boolean;
        /**
         * Observations whose taxa are endemic to their location
         */
        endemic?: boolean;
        /**
         * Observations that are georeferenced
         */
        geo?: boolean;
        /**
         * Observations with the deprecated `ID, Please!` flag. Note that this will return observations, but that this attribute is no longer used.
         */
        idPlease?: boolean;
        /**
         * Observations that have community identifications
         */
        identified?: boolean;
        /**
         * Observations whose taxa are introduced in their location
         *
         */
        introduced?: boolean;
        /**
         * Observations that show on map tiles
         */
        mappable?: boolean;
        /**
         * Observations whose taxa are native to their location
         */
        native?: boolean;
        /**
         * Observations whose taxa are outside their known ranges
         */
        outOfRange?: boolean;
        /**
         * Observations identified by the curator of a project. If
         * the `project_id` parameter is also specified, this will only consider
         * observations identified by curators of the specified project(s)
         *
         */
        pcid?: boolean;
        /**
         * Observations with photos
         */
        photos?: boolean;
        /**
         * Observations that have been favorited by at least one user
         *
         */
        popular?: boolean;
        /**
         * Observations with sounds
         */
        sounds?: boolean;
        /**
         * Observations of active taxon concepts
         *
         */
        taxonIsActive?: boolean;
        /**
         * Observations whose taxa are threatened in their location
         *
         */
        threatened?: boolean;
        /**
         * Observations with a `quality_grade` of either `needs_id` or
         * `research`. Equivalent to `quality_grade=needs_id,research`
         *
         */
        verifiable?: boolean;
        /**
         * License attribute of an observation must not be null
         */
        licensed?: boolean;
        /**
         * License attribute of at least one photo of an observation must not be null
         */
        photoLicensed?: boolean;
        /**
         * Observation taxon is expected nearby
         */
        expectedNearby?: boolean;
        /**
         * Must have this ID
         */
        id?: Array<string>;
        /**
         * Must not have this ID
         */
        notId?: Array<string>;
        /**
         * Observation must have this license
         */
        license?: 'cc-by' | 'cc-by-nc' | 'cc-by-nd' | 'cc-by-sa' | 'cc-by-nc-nd' | 'cc-by-nc-sa' | 'cc0';
        /**
         * Must have an observation field value with this datatype
         */
        ofvDatatype?: Array<string>;
        /**
         * Must have at least one photo with this license
         */
        photoLicense?: 'cc-by' | 'cc-by-nc' | 'cc-by-nd' | 'cc-by-sa' | 'cc-by-nc-nd' | 'cc-by-nc-sa' | 'cc0';
        /**
         * Must be observed within the place with this ID
         */
        placeId?: Array<number>;
        /**
         * Must be added to the project this ID or slug
         */
        projectId?: Array<string>;
        /**
         * Taxon must have this rank
         */
        rank?: 'kingdom' | 'phylum' | 'subphylum' | 'superclass' | 'class' | 'subclass' | 'superorder' | 'order' | 'suborder' | 'infraorder' | 'superfamily' | 'epifamily' | 'family' | 'subfamily' | 'supertribe' | 'tribe' | 'subtribe' | 'genus' | 'genushybrid' | 'species' | 'hybrid' | 'subspecies' | 'variety' | 'form';
        /**
         * Must be affiliated with the iNaturalist network website with this ID
         *
         */
        siteId?: Array<string>;
        /**
         * Must have at least one sound with this license
         */
        soundLicense?: 'cc-by' | 'cc-by-nc' | 'cc-by-nd' | 'cc-by-sa' | 'cc-by-nc-nd' | 'cc-by-nc-sa' | 'cc0';
        /**
         * Exclude observations of these taxa and their descendants
         */
        withoutTaxonId?: Array<string>;
        /**
         * Taxon must have a scientific or common name matching this string
         *
         */
        taxonName?: Array<string>;
        /**
         * User must have this ID or login
         */
        userId?: Array<string>;
        /**
         * User must have this login
         */
        userLogin?: Array<string>;
        /**
         * Observations identified by a particular user
         */
        identUserId?: number;
        /**
         * Must be observed within this hour of the day
         */
        hour?: Array<string>;
        /**
         * Must be observed within this day of the month
         */
        day?: Array<string>;
        /**
         * Must be observed within this month
         */
        month?: Array<string>;
        /**
         * Must be observed within this year
         */
        year?: Array<string>;
        /**
         * Must be created within this day of the month
         */
        createdDay?: Array<string>;
        /**
         * Must be created within this month
         */
        createdMonth?: Array<string>;
        /**
         * Must be created within this year
         */
        createdYear?: Array<string>;
        /**
         * Must have an annotation using this controlled term ID
         */
        termId?: Array<number>;
        /**
         * Must have an annotation using this controlled value ID. Must be combined
         * with the `term_id` parameter
         *
         */
        termValueId?: Array<number>;
        /**
         * Exclude observations with annotations using this controlled value ID.
         *
         */
        withoutTermId?: number;
        /**
         * Exclude observations with annotations using this controlled value ID.
         * Must be combined with the `term_id` parameter
         *
         */
        withoutTermValueId?: Array<number>;
        /**
         * Must be combined with the `term_value_id` or the `without_term_value_id` parameter.
         * Must have an annotation using this controlled term ID and associated term value IDs
         * or be missing this annotation.
         *
         */
        termIdOrUnknown?: Array<number>;
        /**
         * Must have an annotation created by this user
         *
         */
        annotationUserId?: Array<string>;
        /**
         * Must have a positional accuracy above this value (meters)
         */
        accAbove?: string;
        /**
         * Must have a positional accuracy below this value (meters)
         */
        accBelow?: string;
        /**
         * Positional accuracy must be below this value (in meters) or be unknown
         */
        accBelowOrUnknown?: string;
        /**
         * Must be observed on or after this date
         */
        d1?: string;
        /**
         * Must be observed on or before this date
         */
        d2?: string;
        /**
         * Must be created at or after this time
         */
        createdD1?: string;
        /**
         * Must be created at or before this time
         */
        createdD2?: string;
        /**
         * Must be created on this date
         */
        createdOn?: string;
        /**
         * Must be observed on this date
         */
        observedOn?: string;
        /**
         * Must not be of a taxon previously observed by this user
         */
        unobservedByUserId?: number;
        /**
         * Must match the rules of the project with this ID or slug
         */
        applyProjectRulesFor?: string;
        /**
         * Taxon must have this conservation status code. If
         * the `place_id` parameter is also specified, this will only consider
         * statuses specific to that place
         *
         */
        cs?: string;
        /**
         * Taxon must have a conservation status from this authority. If
         * the `place_id` parameter is also specified, this will only consider
         * statuses specific to that place
         *
         */
        csa?: string;
        /**
         * Taxon must have this IUCN conservation status. If
         * the `place_id` parameter is also specified, this will only consider
         * statuses specific to that place
         *
         */
        csi?: 'LC' | 'NT' | 'VU' | 'EN' | 'CR' | 'EW' | 'EX';
        /**
         * Must have this geoprivacy setting
         */
        geoprivacy?: 'obscured' | 'obscured_private' | 'open' | 'private';
        /**
         * Filter observations by the most conservative geoprivacy applied by a
         * conservation status associated with one of the taxa proposed in the
         * current identifications.
         *
         */
        taxonGeoprivacy?: 'obscured' | 'obscured_private' | 'open' | 'private';
        /**
         * Must have `geoprivacy` or `taxon_geoprivacy` fields matching these values
         *
         */
        obscuration?: 'obscured' | 'private' | 'none';
        /**
         * Taxon must have this rank or lower
         */
        hrank?: 'kingdom' | 'phylum' | 'subphylum' | 'superclass' | 'class' | 'subclass' | 'superorder' | 'order' | 'suborder' | 'infraorder' | 'superfamily' | 'epifamily' | 'family' | 'subfamily' | 'supertribe' | 'tribe' | 'subtribe' | 'genus' | 'genushybrid' | 'species' | 'hybrid' | 'subspecies' | 'variety' | 'form';
        /**
         * Taxon must have this rank or higher
         */
        lrank?: 'kingdom' | 'phylum' | 'subphylum' | 'superclass' | 'class' | 'subclass' | 'superorder' | 'order' | 'suborder' | 'infraorder' | 'superfamily' | 'epifamily' | 'family' | 'subfamily' | 'supertribe' | 'tribe' | 'subtribe' | 'genus' | 'genushybrid' | 'species' | 'hybrid' | 'subspecies' | 'variety' | 'form';
        /**
         * Taxon must by within this iconic taxon
         */
        iconicTaxa?: 'Actinopterygii' | 'Animalia' | 'Amphibia' | 'Arachnida' | 'Aves' | 'Chromista' | 'Fungi' | 'Insecta' | 'Mammalia' | 'Mollusca' | 'Reptilia' | 'Plantae' | 'Protozoa' | 'unknown';
        /**
         * Must have an ID above this value
         */
        idAbove?: string;
        /**
         * Must have an ID below this value
         */
        idBelow?: string;
        /**
         * Identifications must meet these criteria
         */
        identifications?: 'most_agree' | 'most_disagree' | 'some_agree';
        /**
         * Must be within a {`radius`} kilometer circle around this lat/lng
         * (*lat, *lng, radius)
         *
         */
        lat?: number;
        /**
         * Must be within a {`radius`} kilometer circle around this lat/lng
         * (*lat, *lng, radius)
         *
         */
        lng?: number;
        /**
         * Must be within a {`radius`} kilometer circle around this lat/lng
         * (*lat, *lng, radius)
         *
         */
        radius?: string;
        /**
         * Must be within this bounding box (*nelat, *nelng, *swlat, *swlng)
         *
         */
        nelat?: number;
        /**
         * Must be within this bounding box (*nelat, *nelng, *swlat, *swlng)
         *
         */
        nelng?: number;
        /**
         * Must be within this bounding box (*nelat, *nelng, *swlat, *swlng)
         *
         */
        swlat?: number;
        /**
         * Must be within this bounding box (*nelat, *nelng, *swlat, *swlng)
         *
         */
        swlng?: number;
        /**
         * Taxon must be in the list with this ID
         */
        listId?: number;
        /**
         * Must not be in the project with this ID or slug
         */
        notInProject?: string;
        /**
         * Must not match the rules of the project with this ID or slug
         */
        notMatchingProjectRulesFor?: string;
        /**
         * Must included in this observation accuracy experiment
         */
        observationAccuracyExperimentId?: Array<number>;
        /**
         * Search observation properties. Can be combined with `search_on`
         */
        q?: string;
        /**
         * Properties to search on, when combined with `q`.
         * Searches across all properties by default
         *
         */
        searchOn?: 'names' | 'tags' | 'description' | 'place';
        /**
         * Must have this quality grade
         */
        qualityGrade?: 'casual' | 'needs_id' | 'research';
        /**
         * Must be updated since this time
         */
        updatedSince?: string;
        /**
         * See `reviewed`
         */
        viewerId?: string;
        /**
         * Observations have been reviewed by the user with ID equal to
         * the value of the `viewer_id` parameter
         *
         */
        reviewed?: boolean;
        /**
         * Only show observations of these taxa and their descendants
         */
        taxonId: number;
    };
    url: '/identifications/similar_species';
};

export type GetIdentificationsSimilarSpeciesResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type GetMessagesData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Pagination `page` number
         */
        page?: string;
        /**
         * Whether to view messages the user has received (default) or messages the user has sent
         */
        box?: 'inbox' | 'sent' | 'any';
        /**
         * Search query for subject and body
         */
        q?: string;
        /**
         * User ID or username of correspondent to filter by
         */
        userId?: string;
        /**
         * Groups results by `thread_id`, only shows the latest message per
         * thread, and includes a `thread_messages_count` attribute showing the
         * total number of messages in that thread. Note that this will not
         * work with the `q` param, and it probably should only be used with
         * `box=any` because the `thread_messages_count` will be inaccurate when
         * you restrict it to `inbox` or `sent`.
         *
         */
        threads?: boolean;
    };
    url: '/messages';
};

export type GetMessagesErrors = {
    /**
     * Returns an object with metadata and an array of messages
     *
     */
    default: MessagesResponse;
};

export type GetMessagesError = GetMessagesErrors[keyof GetMessagesErrors];

export type GetMessagesResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type PostMessagesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/messages';
};

export type PostMessagesErrors = {
    /**
     * Unexpected error
     */
    default: _Error;
};

export type PostMessagesError = PostMessagesErrors[keyof PostMessagesErrors];

export type PostMessagesResponses = {
    /**
     * Returns the message just created
     *
     */
    200: Message;
};

export type PostMessagesResponse = PostMessagesResponses[keyof PostMessagesResponses];

export type DeleteMessagesByIdData = {
    body?: never;
    path: {
        /**
         * ID of the record
         */
        id: number;
    };
    query?: never;
    url: '/messages/{id}';
};

export type DeleteMessagesByIdErrors = {
    /**
     * Specified message doesn't exist
     *
     */
    404: unknown;
    /**
     * Unexpected error
     */
    default: _Error;
};

export type DeleteMessagesByIdError = DeleteMessagesByIdErrors[keyof DeleteMessagesByIdErrors];

export type DeleteMessagesByIdResponses = {
    /**
     * No return data, 200 just means deletion was successful
     *
     */
    200: unknown;
};

export type GetMessagesByIdData = {
    body?: never;
    path: {
        /**
         * ID of the record
         */
        id: number;
    };
    query?: never;
    url: '/messages/{id}';
};

export type GetMessagesByIdErrors = {
    /**
     * Unexpected error
     */
    default: _Error;
};

export type GetMessagesByIdError = GetMessagesByIdErrors[keyof GetMessagesByIdErrors];

export type GetMessagesByIdResponses = {
    /**
     * Returns an object with metadata and an array of messages
     *
     */
    200: {
        replyToUser?: User;
        /**
         * Identifier for this thread
         */
        threadId?: number;
        /**
         * Identifier for the message that should be flagged if the user
         * chooses to flag this thread
         *
         */
        flaggableMessageId?: number;
        results?: Array<Message>;
    };
};

export type GetMessagesByIdResponse = GetMessagesByIdResponses[keyof GetMessagesByIdResponses];

export type GetMessagesUnreadData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/messages/unread';
};

export type GetMessagesUnreadErrors = {
    /**
     * Unexpected error
     */
    default: _Error;
};

export type GetMessagesUnreadError = GetMessagesUnreadErrors[keyof GetMessagesUnreadErrors];

export type GetMessagesUnreadResponses = {
    /**
     * Number of unread messages
     */
    200: {
        /**
         * Number of unread messages
         */
        count?: number;
    };
};

export type GetMessagesUnreadResponse = GetMessagesUnreadResponses[keyof GetMessagesUnreadResponses];

export type DeleteObservationsByIdData = {
    body?: never;
    path: {
        /**
         * ID of the record
         */
        id: number;
    };
    query?: never;
    url: '/observations/{id}';
};

export type DeleteObservationsByIdResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type GetObservationsByIdData = {
    body?: never;
    path: {
        /**
         * Must have this ID
         */
        id: Array<number>;
    };
    query?: never;
    url: '/observations/{id}';
};

export type GetObservationsByIdErrors = {
    /**
     * Unexpected error
     */
    default: _Error;
};

export type GetObservationsByIdError = GetObservationsByIdErrors[keyof GetObservationsByIdErrors];

export type GetObservationsByIdResponses = {
    /**
     * Returns an object with metadata and an array of observations
     *
     */
    200: ObservationsShowResponse;
};

export type GetObservationsByIdResponse = GetObservationsByIdResponses[keyof GetObservationsByIdResponses];

export type PutObservationsByIdData = {
    /**
     * Comment object
     */
    body?: PostObservation;
    path: {
        /**
         * ID of the record
         */
        id: number;
    };
    query?: never;
    url: '/observations/{id}';
};

export type PutObservationsByIdResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type PostObservationsByIdFaveData = {
    body?: never;
    path: {
        /**
         * ID of the record
         */
        id: number;
    };
    query?: never;
    url: '/observations/{id}/fave';
};

export type PostObservationsByIdFaveResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type DeleteObservationsByIdUnfaveData = {
    body?: never;
    path: {
        /**
         * ID of the record
         */
        id: number;
    };
    query?: never;
    url: '/observations/{id}/unfave';
};

export type DeleteObservationsByIdUnfaveResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type DeleteObservationsByIdReviewData = {
    body?: never;
    path: {
        /**
         * ID of the record
         */
        id: number;
    };
    query?: never;
    url: '/observations/{id}/review';
};

export type DeleteObservationsByIdReviewResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type PostObservationsByIdReviewData = {
    body?: never;
    path: {
        /**
         * ID of the record
         */
        id: number;
    };
    query?: never;
    url: '/observations/{id}/review';
};

export type PostObservationsByIdReviewResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type GetObservationsByIdSubscriptionsData = {
    body?: never;
    path: {
        /**
         * ID of the record
         */
        id: number;
    };
    query?: never;
    url: '/observations/{id}/subscriptions';
};

export type GetObservationsByIdSubscriptionsResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type DeleteObservationsByIdQualityByMetricData = {
    body?: never;
    path: {
        /**
         * ID of the record
         */
        id: number;
        /**
         * Data quality category
         */
        metric: 'date' | 'location' | 'wild';
    };
    query?: never;
    url: '/observations/{id}/quality/{metric}';
};

export type DeleteObservationsByIdQualityByMetricResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type PostObservationsByIdQualityByMetricData = {
    body?: never;
    path: {
        /**
         * ID of the record
         */
        id: number;
        /**
         * Data quality category
         */
        metric: 'date' | 'location' | 'wild';
    };
    query?: never;
    url: '/observations/{id}/quality/{metric}';
};

export type PostObservationsByIdQualityByMetricResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type GetObservationsByIdTaxonSummaryData = {
    body?: never;
    path: {
        /**
         * ID of the record
         */
        id: number;
    };
    query?: never;
    url: '/observations/{id}/taxon_summary';
};

export type GetObservationsByIdTaxonSummaryResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type PostSubscriptionsObservationByIdSubscribeData = {
    body?: never;
    path: {
        /**
         * ID of the record
         */
        id: number;
    };
    query?: never;
    url: '/subscriptions/observation/{id}/subscribe';
};

export type PostSubscriptionsObservationByIdSubscribeResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type PostVotesVoteObservationByIdData = {
    body?: never;
    path: {
        /**
         * ID of the record
         */
        id: number;
    };
    query?: never;
    url: '/votes/vote/observation/{id}';
};

export type PostVotesVoteObservationByIdResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type DeleteVotesUnvoteObservationByIdData = {
    body?: never;
    path: {
        /**
         * ID of the record
         */
        id: number;
    };
    query?: never;
    url: '/votes/unvote/observation/{id}';
};

export type DeleteVotesUnvoteObservationByIdResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type GetObservationsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Whether or not positional accuracy / coordinate uncertainty has been specified
         */
        acc?: boolean;
        /**
         * Captive or cultivated observations
         */
        captive?: boolean;
        /**
         * Observations whose taxa are endemic to their location
         */
        endemic?: boolean;
        /**
         * Observations that are georeferenced
         */
        geo?: boolean;
        /**
         * Observations with the deprecated `ID, Please!` flag. Note that this will return observations, but that this attribute is no longer used.
         */
        idPlease?: boolean;
        /**
         * Observations that have community identifications
         */
        identified?: boolean;
        /**
         * Observations whose taxa are introduced in their location
         *
         */
        introduced?: boolean;
        /**
         * Observations that show on map tiles
         */
        mappable?: boolean;
        /**
         * Observations whose taxa are native to their location
         */
        native?: boolean;
        /**
         * Observations whose taxa are outside their known ranges
         */
        outOfRange?: boolean;
        /**
         * Observations identified by the curator of a project. If
         * the `project_id` parameter is also specified, this will only consider
         * observations identified by curators of the specified project(s)
         *
         */
        pcid?: boolean;
        /**
         * Observations with photos
         */
        photos?: boolean;
        /**
         * Observations that have been favorited by at least one user
         *
         */
        popular?: boolean;
        /**
         * Observations with sounds
         */
        sounds?: boolean;
        /**
         * Observations of active taxon concepts
         *
         */
        taxonIsActive?: boolean;
        /**
         * Observations whose taxa are threatened in their location
         *
         */
        threatened?: boolean;
        /**
         * Observations with a `quality_grade` of either `needs_id` or
         * `research`. Equivalent to `quality_grade=needs_id,research`
         *
         */
        verifiable?: boolean;
        /**
         * License attribute of an observation must not be null
         */
        licensed?: boolean;
        /**
         * License attribute of at least one photo of an observation must not be null
         */
        photoLicensed?: boolean;
        /**
         * Observation taxon is expected nearby
         */
        expectedNearby?: boolean;
        /**
         * Must have this ID
         */
        id?: Array<string>;
        /**
         * Must not have this ID
         */
        notId?: Array<string>;
        /**
         * Observation must have this license
         */
        license?: 'cc-by' | 'cc-by-nc' | 'cc-by-nd' | 'cc-by-sa' | 'cc-by-nc-nd' | 'cc-by-nc-sa' | 'cc0';
        /**
         * Must have an observation field value with this datatype
         */
        ofvDatatype?: Array<string>;
        /**
         * Must have at least one photo with this license
         */
        photoLicense?: 'cc-by' | 'cc-by-nc' | 'cc-by-nd' | 'cc-by-sa' | 'cc-by-nc-nd' | 'cc-by-nc-sa' | 'cc0';
        /**
         * Must be observed within the place with this ID
         */
        placeId?: Array<number>;
        /**
         * Must be added to the project this ID or slug
         */
        projectId?: Array<string>;
        /**
         * Taxon must have this rank
         */
        rank?: 'kingdom' | 'phylum' | 'subphylum' | 'superclass' | 'class' | 'subclass' | 'superorder' | 'order' | 'suborder' | 'infraorder' | 'superfamily' | 'epifamily' | 'family' | 'subfamily' | 'supertribe' | 'tribe' | 'subtribe' | 'genus' | 'genushybrid' | 'species' | 'hybrid' | 'subspecies' | 'variety' | 'form';
        /**
         * Must be affiliated with the iNaturalist network website with this ID
         *
         */
        siteId?: Array<string>;
        /**
         * Must have at least one sound with this license
         */
        soundLicense?: 'cc-by' | 'cc-by-nc' | 'cc-by-nd' | 'cc-by-sa' | 'cc-by-nc-nd' | 'cc-by-nc-sa' | 'cc0';
        /**
         * Only show observations of these taxa and their descendants
         */
        taxonId?: Array<string>;
        /**
         * Exclude observations of these taxa and their descendants
         */
        withoutTaxonId?: Array<string>;
        /**
         * Taxon must have a scientific or common name matching this string
         *
         */
        taxonName?: Array<string>;
        /**
         * User must have this ID or login
         */
        userId?: Array<string>;
        /**
         * User must have this login
         */
        userLogin?: Array<string>;
        /**
         * Observations identified by a particular user
         */
        identUserId?: number;
        /**
         * Must be observed within this hour of the day
         */
        hour?: Array<string>;
        /**
         * Must be observed within this day of the month
         */
        day?: Array<string>;
        /**
         * Must be observed within this month
         */
        month?: Array<string>;
        /**
         * Must be observed within this year
         */
        year?: Array<string>;
        /**
         * Must be created within this day of the month
         */
        createdDay?: Array<string>;
        /**
         * Must be created within this month
         */
        createdMonth?: Array<string>;
        /**
         * Must be created within this year
         */
        createdYear?: Array<string>;
        /**
         * Must have an annotation using this controlled term ID
         */
        termId?: Array<number>;
        /**
         * Must have an annotation using this controlled value ID. Must be combined
         * with the `term_id` parameter
         *
         */
        termValueId?: Array<number>;
        /**
         * Exclude observations with annotations using this controlled value ID.
         *
         */
        withoutTermId?: number;
        /**
         * Exclude observations with annotations using this controlled value ID.
         * Must be combined with the `term_id` parameter
         *
         */
        withoutTermValueId?: Array<number>;
        /**
         * Must be combined with the `term_value_id` or the `without_term_value_id` parameter.
         * Must have an annotation using this controlled term ID and associated term value IDs
         * or be missing this annotation.
         *
         */
        termIdOrUnknown?: Array<number>;
        /**
         * Must have an annotation created by this user
         *
         */
        annotationUserId?: Array<string>;
        /**
         * Must have a positional accuracy above this value (meters)
         */
        accAbove?: string;
        /**
         * Must have a positional accuracy below this value (meters)
         */
        accBelow?: string;
        /**
         * Positional accuracy must be below this value (in meters) or be unknown
         */
        accBelowOrUnknown?: string;
        /**
         * Must be observed on or after this date
         */
        d1?: string;
        /**
         * Must be observed on or before this date
         */
        d2?: string;
        /**
         * Must be created at or after this time
         */
        createdD1?: string;
        /**
         * Must be created at or before this time
         */
        createdD2?: string;
        /**
         * Must be created on this date
         */
        createdOn?: string;
        /**
         * Must be observed on this date
         */
        observedOn?: string;
        /**
         * Must not be of a taxon previously observed by this user
         */
        unobservedByUserId?: number;
        /**
         * Must match the rules of the project with this ID or slug
         */
        applyProjectRulesFor?: string;
        /**
         * Taxon must have this conservation status code. If
         * the `place_id` parameter is also specified, this will only consider
         * statuses specific to that place
         *
         */
        cs?: string;
        /**
         * Taxon must have a conservation status from this authority. If
         * the `place_id` parameter is also specified, this will only consider
         * statuses specific to that place
         *
         */
        csa?: string;
        /**
         * Taxon must have this IUCN conservation status. If
         * the `place_id` parameter is also specified, this will only consider
         * statuses specific to that place
         *
         */
        csi?: 'LC' | 'NT' | 'VU' | 'EN' | 'CR' | 'EW' | 'EX';
        /**
         * Must have this geoprivacy setting
         */
        geoprivacy?: 'obscured' | 'obscured_private' | 'open' | 'private';
        /**
         * Filter observations by the most conservative geoprivacy applied by a
         * conservation status associated with one of the taxa proposed in the
         * current identifications.
         *
         */
        taxonGeoprivacy?: 'obscured' | 'obscured_private' | 'open' | 'private';
        /**
         * Must have `geoprivacy` or `taxon_geoprivacy` fields matching these values
         *
         */
        obscuration?: 'obscured' | 'private' | 'none';
        /**
         * Taxon must have this rank or lower
         */
        hrank?: 'kingdom' | 'phylum' | 'subphylum' | 'superclass' | 'class' | 'subclass' | 'superorder' | 'order' | 'suborder' | 'infraorder' | 'superfamily' | 'epifamily' | 'family' | 'subfamily' | 'supertribe' | 'tribe' | 'subtribe' | 'genus' | 'genushybrid' | 'species' | 'hybrid' | 'subspecies' | 'variety' | 'form';
        /**
         * Taxon must have this rank or higher
         */
        lrank?: 'kingdom' | 'phylum' | 'subphylum' | 'superclass' | 'class' | 'subclass' | 'superorder' | 'order' | 'suborder' | 'infraorder' | 'superfamily' | 'epifamily' | 'family' | 'subfamily' | 'supertribe' | 'tribe' | 'subtribe' | 'genus' | 'genushybrid' | 'species' | 'hybrid' | 'subspecies' | 'variety' | 'form';
        /**
         * Taxon must by within this iconic taxon
         */
        iconicTaxa?: 'Actinopterygii' | 'Animalia' | 'Amphibia' | 'Arachnida' | 'Aves' | 'Chromista' | 'Fungi' | 'Insecta' | 'Mammalia' | 'Mollusca' | 'Reptilia' | 'Plantae' | 'Protozoa' | 'unknown';
        /**
         * Must have an ID above this value
         */
        idAbove?: string;
        /**
         * Must have an ID below this value
         */
        idBelow?: string;
        /**
         * Identifications must meet these criteria
         */
        identifications?: 'most_agree' | 'most_disagree' | 'some_agree';
        /**
         * Must be within a {`radius`} kilometer circle around this lat/lng
         * (*lat, *lng, radius)
         *
         */
        lat?: number;
        /**
         * Must be within a {`radius`} kilometer circle around this lat/lng
         * (*lat, *lng, radius)
         *
         */
        lng?: number;
        /**
         * Must be within a {`radius`} kilometer circle around this lat/lng
         * (*lat, *lng, radius)
         *
         */
        radius?: string;
        /**
         * Must be within this bounding box (*nelat, *nelng, *swlat, *swlng)
         *
         */
        nelat?: number;
        /**
         * Must be within this bounding box (*nelat, *nelng, *swlat, *swlng)
         *
         */
        nelng?: number;
        /**
         * Must be within this bounding box (*nelat, *nelng, *swlat, *swlng)
         *
         */
        swlat?: number;
        /**
         * Must be within this bounding box (*nelat, *nelng, *swlat, *swlng)
         *
         */
        swlng?: number;
        /**
         * Taxon must be in the list with this ID
         */
        listId?: number;
        /**
         * Must not be in the project with this ID or slug
         */
        notInProject?: string;
        /**
         * Must not match the rules of the project with this ID or slug
         */
        notMatchingProjectRulesFor?: string;
        /**
         * Must included in this observation accuracy experiment
         */
        observationAccuracyExperimentId?: Array<number>;
        /**
         * Search observation properties. Can be combined with `search_on`
         */
        q?: string;
        /**
         * Properties to search on, when combined with `q`.
         * Searches across all properties by default
         *
         */
        searchOn?: 'names' | 'tags' | 'description' | 'place';
        /**
         * Must have this quality grade
         */
        qualityGrade?: 'casual' | 'needs_id' | 'research';
        /**
         * Must be updated since this time
         */
        updatedSince?: string;
        /**
         * See `reviewed`
         */
        viewerId?: string;
        /**
         * Observations have been reviewed by the user with ID equal to
         * the value of the `viewer_id` parameter
         *
         */
        reviewed?: boolean;
        /**
         * Locale preference for taxon common names
         *
         */
        locale?: string;
        /**
         * Place preference for regional taxon common names
         *
         */
        preferredPlaceId?: number;
        /**
         * Set the `Cache-Control` HTTP header with this value as `max-age`, in
         * seconds. This means subsequent identical requests will be cached on
         * iNaturalist servers, and commonly within web browsers
         *
         */
        ttl?: string;
        /**
         * Pagination `page` number
         */
        page?: string;
        /**
         * Number of results to return in a `page`. The maximum value is generally
         * 200 unless otherwise noted
         *
         */
        perPage?: string;
        /**
         * Sort order
         */
        order?: 'desc' | 'asc';
        /**
         * Sort field
         */
        orderBy?: 'created_at' | 'geo_score' | 'id' | 'observed_on' | 'random' | 'species_guess' | 'updated_at' | 'votes';
        /**
         * Return only the record IDs
         */
        onlyId?: boolean;
    };
    url: '/observations';
};

export type GetObservationsErrors = {
    /**
     * Unexpected error
     */
    default: _Error;
};

export type GetObservationsError = GetObservationsErrors[keyof GetObservationsErrors];

export type GetObservationsResponses = {
    /**
     * Returns an object with metadata and an array of observations
     *
     */
    200: ObservationsResponse;
};

export type GetObservationsResponse = GetObservationsResponses[keyof GetObservationsResponses];

export type PostObservationsData = {
    /**
     * Comment object
     */
    body?: PostObservation;
    path?: never;
    query?: never;
    url: '/observations';
};

export type PostObservationsResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type GetObservationsDeletedData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Deleted at or after this time
         */
        since: string;
    };
    url: '/observations/deleted';
};

export type GetObservationsDeletedResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type GetObservationsHistogramData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Whether or not positional accuracy / coordinate uncertainty has been specified
         */
        acc?: boolean;
        /**
         * Captive or cultivated observations
         */
        captive?: boolean;
        /**
         * Observations whose taxa are endemic to their location
         */
        endemic?: boolean;
        /**
         * Observations that are georeferenced
         */
        geo?: boolean;
        /**
         * Observations with the deprecated `ID, Please!` flag. Note that this will return observations, but that this attribute is no longer used.
         */
        idPlease?: boolean;
        /**
         * Observations that have community identifications
         */
        identified?: boolean;
        /**
         * Observations whose taxa are introduced in their location
         *
         */
        introduced?: boolean;
        /**
         * Observations that show on map tiles
         */
        mappable?: boolean;
        /**
         * Observations whose taxa are native to their location
         */
        native?: boolean;
        /**
         * Observations whose taxa are outside their known ranges
         */
        outOfRange?: boolean;
        /**
         * Observations identified by the curator of a project. If
         * the `project_id` parameter is also specified, this will only consider
         * observations identified by curators of the specified project(s)
         *
         */
        pcid?: boolean;
        /**
         * Observations with photos
         */
        photos?: boolean;
        /**
         * Observations that have been favorited by at least one user
         *
         */
        popular?: boolean;
        /**
         * Observations with sounds
         */
        sounds?: boolean;
        /**
         * Observations of active taxon concepts
         *
         */
        taxonIsActive?: boolean;
        /**
         * Observations whose taxa are threatened in their location
         *
         */
        threatened?: boolean;
        /**
         * Observations with a `quality_grade` of either `needs_id` or
         * `research`. Equivalent to `quality_grade=needs_id,research`
         *
         */
        verifiable?: boolean;
        /**
         * License attribute of an observation must not be null
         */
        licensed?: boolean;
        /**
         * License attribute of at least one photo of an observation must not be null
         */
        photoLicensed?: boolean;
        /**
         * Observation taxon is expected nearby
         */
        expectedNearby?: boolean;
        /**
         * Must have this ID
         */
        id?: Array<string>;
        /**
         * Must not have this ID
         */
        notId?: Array<string>;
        /**
         * Observation must have this license
         */
        license?: 'cc-by' | 'cc-by-nc' | 'cc-by-nd' | 'cc-by-sa' | 'cc-by-nc-nd' | 'cc-by-nc-sa' | 'cc0';
        /**
         * Must have an observation field value with this datatype
         */
        ofvDatatype?: Array<string>;
        /**
         * Must have at least one photo with this license
         */
        photoLicense?: 'cc-by' | 'cc-by-nc' | 'cc-by-nd' | 'cc-by-sa' | 'cc-by-nc-nd' | 'cc-by-nc-sa' | 'cc0';
        /**
         * Must be observed within the place with this ID
         */
        placeId?: Array<number>;
        /**
         * Must be added to the project this ID or slug
         */
        projectId?: Array<string>;
        /**
         * Taxon must have this rank
         */
        rank?: 'kingdom' | 'phylum' | 'subphylum' | 'superclass' | 'class' | 'subclass' | 'superorder' | 'order' | 'suborder' | 'infraorder' | 'superfamily' | 'epifamily' | 'family' | 'subfamily' | 'supertribe' | 'tribe' | 'subtribe' | 'genus' | 'genushybrid' | 'species' | 'hybrid' | 'subspecies' | 'variety' | 'form';
        /**
         * Must be affiliated with the iNaturalist network website with this ID
         *
         */
        siteId?: Array<string>;
        /**
         * Must have at least one sound with this license
         */
        soundLicense?: 'cc-by' | 'cc-by-nc' | 'cc-by-nd' | 'cc-by-sa' | 'cc-by-nc-nd' | 'cc-by-nc-sa' | 'cc0';
        /**
         * Only show observations of these taxa and their descendants
         */
        taxonId?: Array<string>;
        /**
         * Exclude observations of these taxa and their descendants
         */
        withoutTaxonId?: Array<string>;
        /**
         * Taxon must have a scientific or common name matching this string
         *
         */
        taxonName?: Array<string>;
        /**
         * User must have this ID or login
         */
        userId?: Array<string>;
        /**
         * User must have this login
         */
        userLogin?: Array<string>;
        /**
         * Observations identified by a particular user
         */
        identUserId?: number;
        /**
         * Must be observed within this hour of the day
         */
        hour?: Array<string>;
        /**
         * Must be observed within this day of the month
         */
        day?: Array<string>;
        /**
         * Must be observed within this month
         */
        month?: Array<string>;
        /**
         * Must be observed within this year
         */
        year?: Array<string>;
        /**
         * Must be created within this day of the month
         */
        createdDay?: Array<string>;
        /**
         * Must be created within this month
         */
        createdMonth?: Array<string>;
        /**
         * Must be created within this year
         */
        createdYear?: Array<string>;
        /**
         * Must have an annotation using this controlled term ID
         */
        termId?: Array<number>;
        /**
         * Must have an annotation using this controlled value ID. Must be combined
         * with the `term_id` parameter
         *
         */
        termValueId?: Array<number>;
        /**
         * Exclude observations with annotations using this controlled value ID.
         *
         */
        withoutTermId?: number;
        /**
         * Exclude observations with annotations using this controlled value ID.
         * Must be combined with the `term_id` parameter
         *
         */
        withoutTermValueId?: Array<number>;
        /**
         * Must be combined with the `term_value_id` or the `without_term_value_id` parameter.
         * Must have an annotation using this controlled term ID and associated term value IDs
         * or be missing this annotation.
         *
         */
        termIdOrUnknown?: Array<number>;
        /**
         * Must have an annotation created by this user
         *
         */
        annotationUserId?: Array<string>;
        /**
         * Must have a positional accuracy above this value (meters)
         */
        accAbove?: string;
        /**
         * Must have a positional accuracy below this value (meters)
         */
        accBelow?: string;
        /**
         * Positional accuracy must be below this value (in meters) or be unknown
         */
        accBelowOrUnknown?: string;
        /**
         * Must be observed on or after this date
         */
        d1?: string;
        /**
         * Must be observed on or before this date
         */
        d2?: string;
        /**
         * Must be created at or after this time
         */
        createdD1?: string;
        /**
         * Must be created at or before this time
         */
        createdD2?: string;
        /**
         * Must be created on this date
         */
        createdOn?: string;
        /**
         * Must be observed on this date
         */
        observedOn?: string;
        /**
         * Must not be of a taxon previously observed by this user
         */
        unobservedByUserId?: number;
        /**
         * Must match the rules of the project with this ID or slug
         */
        applyProjectRulesFor?: string;
        /**
         * Taxon must have this conservation status code. If
         * the `place_id` parameter is also specified, this will only consider
         * statuses specific to that place
         *
         */
        cs?: string;
        /**
         * Taxon must have a conservation status from this authority. If
         * the `place_id` parameter is also specified, this will only consider
         * statuses specific to that place
         *
         */
        csa?: string;
        /**
         * Taxon must have this IUCN conservation status. If
         * the `place_id` parameter is also specified, this will only consider
         * statuses specific to that place
         *
         */
        csi?: 'LC' | 'NT' | 'VU' | 'EN' | 'CR' | 'EW' | 'EX';
        /**
         * Must have this geoprivacy setting
         */
        geoprivacy?: 'obscured' | 'obscured_private' | 'open' | 'private';
        /**
         * Filter observations by the most conservative geoprivacy applied by a
         * conservation status associated with one of the taxa proposed in the
         * current identifications.
         *
         */
        taxonGeoprivacy?: 'obscured' | 'obscured_private' | 'open' | 'private';
        /**
         * Must have `geoprivacy` or `taxon_geoprivacy` fields matching these values
         *
         */
        obscuration?: 'obscured' | 'private' | 'none';
        /**
         * Taxon must have this rank or lower
         */
        hrank?: 'kingdom' | 'phylum' | 'subphylum' | 'superclass' | 'class' | 'subclass' | 'superorder' | 'order' | 'suborder' | 'infraorder' | 'superfamily' | 'epifamily' | 'family' | 'subfamily' | 'supertribe' | 'tribe' | 'subtribe' | 'genus' | 'genushybrid' | 'species' | 'hybrid' | 'subspecies' | 'variety' | 'form';
        /**
         * Taxon must have this rank or higher
         */
        lrank?: 'kingdom' | 'phylum' | 'subphylum' | 'superclass' | 'class' | 'subclass' | 'superorder' | 'order' | 'suborder' | 'infraorder' | 'superfamily' | 'epifamily' | 'family' | 'subfamily' | 'supertribe' | 'tribe' | 'subtribe' | 'genus' | 'genushybrid' | 'species' | 'hybrid' | 'subspecies' | 'variety' | 'form';
        /**
         * Taxon must by within this iconic taxon
         */
        iconicTaxa?: 'Actinopterygii' | 'Animalia' | 'Amphibia' | 'Arachnida' | 'Aves' | 'Chromista' | 'Fungi' | 'Insecta' | 'Mammalia' | 'Mollusca' | 'Reptilia' | 'Plantae' | 'Protozoa' | 'unknown';
        /**
         * Must have an ID above this value
         */
        idAbove?: string;
        /**
         * Must have an ID below this value
         */
        idBelow?: string;
        /**
         * Identifications must meet these criteria
         */
        identifications?: 'most_agree' | 'most_disagree' | 'some_agree';
        /**
         * Must be within a {`radius`} kilometer circle around this lat/lng
         * (*lat, *lng, radius)
         *
         */
        lat?: number;
        /**
         * Must be within a {`radius`} kilometer circle around this lat/lng
         * (*lat, *lng, radius)
         *
         */
        lng?: number;
        /**
         * Must be within a {`radius`} kilometer circle around this lat/lng
         * (*lat, *lng, radius)
         *
         */
        radius?: string;
        /**
         * Must be within this bounding box (*nelat, *nelng, *swlat, *swlng)
         *
         */
        nelat?: number;
        /**
         * Must be within this bounding box (*nelat, *nelng, *swlat, *swlng)
         *
         */
        nelng?: number;
        /**
         * Must be within this bounding box (*nelat, *nelng, *swlat, *swlng)
         *
         */
        swlat?: number;
        /**
         * Must be within this bounding box (*nelat, *nelng, *swlat, *swlng)
         *
         */
        swlng?: number;
        /**
         * Taxon must be in the list with this ID
         */
        listId?: number;
        /**
         * Must not be in the project with this ID or slug
         */
        notInProject?: string;
        /**
         * Must not match the rules of the project with this ID or slug
         */
        notMatchingProjectRulesFor?: string;
        /**
         * Must included in this observation accuracy experiment
         */
        observationAccuracyExperimentId?: Array<number>;
        /**
         * Search observation properties. Can be combined with `search_on`
         */
        q?: string;
        /**
         * Properties to search on, when combined with `q`.
         * Searches across all properties by default
         *
         */
        searchOn?: 'names' | 'tags' | 'description' | 'place';
        /**
         * Must have this quality grade
         */
        qualityGrade?: 'casual' | 'needs_id' | 'research';
        /**
         * Must be updated since this time
         */
        updatedSince?: string;
        /**
         * See `reviewed`
         */
        viewerId?: string;
        /**
         * Observations have been reviewed by the user with ID equal to
         * the value of the `viewer_id` parameter
         *
         */
        reviewed?: boolean;
        /**
         * Locale preference for taxon common names
         *
         */
        locale?: string;
        /**
         * Place preference for regional taxon common names
         *
         */
        preferredPlaceId?: number;
        /**
         * Set the `Cache-Control` HTTP header with this value as `max-age`, in
         * seconds. This means subsequent identical requests will be cached on
         * iNaturalist servers, and commonly within web browsers
         *
         */
        ttl?: string;
        /**
         * Histogram basis: when the observation was created or observed
         *
         */
        dateField?: 'created' | 'observed';
        /**
         * Time interval for histogram, with groups starting on or contained within
         * the group value. The year, month, week, day, and hour options will set
         * default values for `d1` or `created_d1` depending on the value of
         * `date_field`, to limit the number of groups returned. You can override
         * those values if you want data from a longer or shorter time span. The
         * `hour` interval only works with `date_field=created`, and this you
         * should filter dates with `created_d[1,2]`
         *
         */
        interval?: 'year' | 'month' | 'week' | 'day' | 'hour' | 'month_of_year' | 'week_of_year';
    };
    url: '/observations/histogram';
};

export type GetObservationsHistogramErrors = {
    /**
     * Unexpected error
     */
    default: _Error;
};

export type GetObservationsHistogramError = GetObservationsHistogramErrors[keyof GetObservationsHistogramErrors];

export type GetObservationsHistogramResponses = {
    /**
     * Returns an object with metadata and an array of histogram data
     *
     */
    200: unknown;
};

export type GetObservationsIdentifiersData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Whether or not positional accuracy / coordinate uncertainty has been specified
         */
        acc?: boolean;
        /**
         * Captive or cultivated observations
         */
        captive?: boolean;
        /**
         * Observations whose taxa are endemic to their location
         */
        endemic?: boolean;
        /**
         * Observations that are georeferenced
         */
        geo?: boolean;
        /**
         * Observations with the deprecated `ID, Please!` flag. Note that this will return observations, but that this attribute is no longer used.
         */
        idPlease?: boolean;
        /**
         * Observations that have community identifications
         */
        identified?: boolean;
        /**
         * Observations whose taxa are introduced in their location
         *
         */
        introduced?: boolean;
        /**
         * Observations that show on map tiles
         */
        mappable?: boolean;
        /**
         * Observations whose taxa are native to their location
         */
        native?: boolean;
        /**
         * Observations whose taxa are outside their known ranges
         */
        outOfRange?: boolean;
        /**
         * Observations identified by the curator of a project. If
         * the `project_id` parameter is also specified, this will only consider
         * observations identified by curators of the specified project(s)
         *
         */
        pcid?: boolean;
        /**
         * Observations with photos
         */
        photos?: boolean;
        /**
         * Observations that have been favorited by at least one user
         *
         */
        popular?: boolean;
        /**
         * Observations with sounds
         */
        sounds?: boolean;
        /**
         * Observations of active taxon concepts
         *
         */
        taxonIsActive?: boolean;
        /**
         * Observations whose taxa are threatened in their location
         *
         */
        threatened?: boolean;
        /**
         * Observations with a `quality_grade` of either `needs_id` or
         * `research`. Equivalent to `quality_grade=needs_id,research`
         *
         */
        verifiable?: boolean;
        /**
         * License attribute of an observation must not be null
         */
        licensed?: boolean;
        /**
         * License attribute of at least one photo of an observation must not be null
         */
        photoLicensed?: boolean;
        /**
         * Observation taxon is expected nearby
         */
        expectedNearby?: boolean;
        /**
         * Must have this ID
         */
        id?: Array<string>;
        /**
         * Must not have this ID
         */
        notId?: Array<string>;
        /**
         * Observation must have this license
         */
        license?: 'cc-by' | 'cc-by-nc' | 'cc-by-nd' | 'cc-by-sa' | 'cc-by-nc-nd' | 'cc-by-nc-sa' | 'cc0';
        /**
         * Must have an observation field value with this datatype
         */
        ofvDatatype?: Array<string>;
        /**
         * Must have at least one photo with this license
         */
        photoLicense?: 'cc-by' | 'cc-by-nc' | 'cc-by-nd' | 'cc-by-sa' | 'cc-by-nc-nd' | 'cc-by-nc-sa' | 'cc0';
        /**
         * Must be observed within the place with this ID
         */
        placeId?: Array<number>;
        /**
         * Must be added to the project this ID or slug
         */
        projectId?: Array<string>;
        /**
         * Taxon must have this rank
         */
        rank?: 'kingdom' | 'phylum' | 'subphylum' | 'superclass' | 'class' | 'subclass' | 'superorder' | 'order' | 'suborder' | 'infraorder' | 'superfamily' | 'epifamily' | 'family' | 'subfamily' | 'supertribe' | 'tribe' | 'subtribe' | 'genus' | 'genushybrid' | 'species' | 'hybrid' | 'subspecies' | 'variety' | 'form';
        /**
         * Must be affiliated with the iNaturalist network website with this ID
         *
         */
        siteId?: Array<string>;
        /**
         * Must have at least one sound with this license
         */
        soundLicense?: 'cc-by' | 'cc-by-nc' | 'cc-by-nd' | 'cc-by-sa' | 'cc-by-nc-nd' | 'cc-by-nc-sa' | 'cc0';
        /**
         * Only show observations of these taxa and their descendants
         */
        taxonId?: Array<string>;
        /**
         * Exclude observations of these taxa and their descendants
         */
        withoutTaxonId?: Array<string>;
        /**
         * Taxon must have a scientific or common name matching this string
         *
         */
        taxonName?: Array<string>;
        /**
         * User must have this ID or login
         */
        userId?: Array<string>;
        /**
         * User must have this login
         */
        userLogin?: Array<string>;
        /**
         * Observations identified by a particular user
         */
        identUserId?: number;
        /**
         * Must be observed within this hour of the day
         */
        hour?: Array<string>;
        /**
         * Must be observed within this day of the month
         */
        day?: Array<string>;
        /**
         * Must be observed within this month
         */
        month?: Array<string>;
        /**
         * Must be observed within this year
         */
        year?: Array<string>;
        /**
         * Must be created within this day of the month
         */
        createdDay?: Array<string>;
        /**
         * Must be created within this month
         */
        createdMonth?: Array<string>;
        /**
         * Must be created within this year
         */
        createdYear?: Array<string>;
        /**
         * Must have an annotation using this controlled term ID
         */
        termId?: Array<number>;
        /**
         * Must have an annotation using this controlled value ID. Must be combined
         * with the `term_id` parameter
         *
         */
        termValueId?: Array<number>;
        /**
         * Exclude observations with annotations using this controlled value ID.
         *
         */
        withoutTermId?: number;
        /**
         * Exclude observations with annotations using this controlled value ID.
         * Must be combined with the `term_id` parameter
         *
         */
        withoutTermValueId?: Array<number>;
        /**
         * Must be combined with the `term_value_id` or the `without_term_value_id` parameter.
         * Must have an annotation using this controlled term ID and associated term value IDs
         * or be missing this annotation.
         *
         */
        termIdOrUnknown?: Array<number>;
        /**
         * Must have an annotation created by this user
         *
         */
        annotationUserId?: Array<string>;
        /**
         * Must have a positional accuracy above this value (meters)
         */
        accAbove?: string;
        /**
         * Must have a positional accuracy below this value (meters)
         */
        accBelow?: string;
        /**
         * Positional accuracy must be below this value (in meters) or be unknown
         */
        accBelowOrUnknown?: string;
        /**
         * Must be observed on or after this date
         */
        d1?: string;
        /**
         * Must be observed on or before this date
         */
        d2?: string;
        /**
         * Must be created at or after this time
         */
        createdD1?: string;
        /**
         * Must be created at or before this time
         */
        createdD2?: string;
        /**
         * Must be created on this date
         */
        createdOn?: string;
        /**
         * Must be observed on this date
         */
        observedOn?: string;
        /**
         * Must not be of a taxon previously observed by this user
         */
        unobservedByUserId?: number;
        /**
         * Must match the rules of the project with this ID or slug
         */
        applyProjectRulesFor?: string;
        /**
         * Taxon must have this conservation status code. If
         * the `place_id` parameter is also specified, this will only consider
         * statuses specific to that place
         *
         */
        cs?: string;
        /**
         * Taxon must have a conservation status from this authority. If
         * the `place_id` parameter is also specified, this will only consider
         * statuses specific to that place
         *
         */
        csa?: string;
        /**
         * Taxon must have this IUCN conservation status. If
         * the `place_id` parameter is also specified, this will only consider
         * statuses specific to that place
         *
         */
        csi?: 'LC' | 'NT' | 'VU' | 'EN' | 'CR' | 'EW' | 'EX';
        /**
         * Must have this geoprivacy setting
         */
        geoprivacy?: 'obscured' | 'obscured_private' | 'open' | 'private';
        /**
         * Filter observations by the most conservative geoprivacy applied by a
         * conservation status associated with one of the taxa proposed in the
         * current identifications.
         *
         */
        taxonGeoprivacy?: 'obscured' | 'obscured_private' | 'open' | 'private';
        /**
         * Must have `geoprivacy` or `taxon_geoprivacy` fields matching these values
         *
         */
        obscuration?: 'obscured' | 'private' | 'none';
        /**
         * Taxon must have this rank or lower
         */
        hrank?: 'kingdom' | 'phylum' | 'subphylum' | 'superclass' | 'class' | 'subclass' | 'superorder' | 'order' | 'suborder' | 'infraorder' | 'superfamily' | 'epifamily' | 'family' | 'subfamily' | 'supertribe' | 'tribe' | 'subtribe' | 'genus' | 'genushybrid' | 'species' | 'hybrid' | 'subspecies' | 'variety' | 'form';
        /**
         * Taxon must have this rank or higher
         */
        lrank?: 'kingdom' | 'phylum' | 'subphylum' | 'superclass' | 'class' | 'subclass' | 'superorder' | 'order' | 'suborder' | 'infraorder' | 'superfamily' | 'epifamily' | 'family' | 'subfamily' | 'supertribe' | 'tribe' | 'subtribe' | 'genus' | 'genushybrid' | 'species' | 'hybrid' | 'subspecies' | 'variety' | 'form';
        /**
         * Taxon must by within this iconic taxon
         */
        iconicTaxa?: 'Actinopterygii' | 'Animalia' | 'Amphibia' | 'Arachnida' | 'Aves' | 'Chromista' | 'Fungi' | 'Insecta' | 'Mammalia' | 'Mollusca' | 'Reptilia' | 'Plantae' | 'Protozoa' | 'unknown';
        /**
         * Must have an ID above this value
         */
        idAbove?: string;
        /**
         * Must have an ID below this value
         */
        idBelow?: string;
        /**
         * Identifications must meet these criteria
         */
        identifications?: 'most_agree' | 'most_disagree' | 'some_agree';
        /**
         * Must be within a {`radius`} kilometer circle around this lat/lng
         * (*lat, *lng, radius)
         *
         */
        lat?: number;
        /**
         * Must be within a {`radius`} kilometer circle around this lat/lng
         * (*lat, *lng, radius)
         *
         */
        lng?: number;
        /**
         * Must be within a {`radius`} kilometer circle around this lat/lng
         * (*lat, *lng, radius)
         *
         */
        radius?: string;
        /**
         * Must be within this bounding box (*nelat, *nelng, *swlat, *swlng)
         *
         */
        nelat?: number;
        /**
         * Must be within this bounding box (*nelat, *nelng, *swlat, *swlng)
         *
         */
        nelng?: number;
        /**
         * Must be within this bounding box (*nelat, *nelng, *swlat, *swlng)
         *
         */
        swlat?: number;
        /**
         * Must be within this bounding box (*nelat, *nelng, *swlat, *swlng)
         *
         */
        swlng?: number;
        /**
         * Taxon must be in the list with this ID
         */
        listId?: number;
        /**
         * Must not be in the project with this ID or slug
         */
        notInProject?: string;
        /**
         * Must not match the rules of the project with this ID or slug
         */
        notMatchingProjectRulesFor?: string;
        /**
         * Must included in this observation accuracy experiment
         */
        observationAccuracyExperimentId?: Array<number>;
        /**
         * Search observation properties. Can be combined with `search_on`
         */
        q?: string;
        /**
         * Properties to search on, when combined with `q`.
         * Searches across all properties by default
         *
         */
        searchOn?: 'names' | 'tags' | 'description' | 'place';
        /**
         * Must have this quality grade
         */
        qualityGrade?: 'casual' | 'needs_id' | 'research';
        /**
         * Must be updated since this time
         */
        updatedSince?: string;
        /**
         * See `reviewed`
         */
        viewerId?: string;
        /**
         * Observations have been reviewed by the user with ID equal to
         * the value of the `viewer_id` parameter
         *
         */
        reviewed?: boolean;
        /**
         * Locale preference for taxon common names
         *
         */
        locale?: string;
        /**
         * Place preference for regional taxon common names
         *
         */
        preferredPlaceId?: number;
        /**
         * Set the `Cache-Control` HTTP header with this value as `max-age`, in
         * seconds. This means subsequent identical requests will be cached on
         * iNaturalist servers, and commonly within web browsers
         *
         */
        ttl?: string;
    };
    url: '/observations/identifiers';
};

export type GetObservationsIdentifiersErrors = {
    /**
     * Unexpected error
     */
    default: _Error;
};

export type GetObservationsIdentifiersError = GetObservationsIdentifiersErrors[keyof GetObservationsIdentifiersErrors];

export type GetObservationsIdentifiersResponses = {
    /**
     * Returns an object with metadata and an array of identifiers
     *
     */
    200: UserCountsResponse;
};

export type GetObservationsIdentifiersResponse = GetObservationsIdentifiersResponses[keyof GetObservationsIdentifiersResponses];

export type GetObservationsObserversData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Whether or not positional accuracy / coordinate uncertainty has been specified
         */
        acc?: boolean;
        /**
         * Captive or cultivated observations
         */
        captive?: boolean;
        /**
         * Observations whose taxa are endemic to their location
         */
        endemic?: boolean;
        /**
         * Observations that are georeferenced
         */
        geo?: boolean;
        /**
         * Observations with the deprecated `ID, Please!` flag. Note that this will return observations, but that this attribute is no longer used.
         */
        idPlease?: boolean;
        /**
         * Observations that have community identifications
         */
        identified?: boolean;
        /**
         * Observations whose taxa are introduced in their location
         *
         */
        introduced?: boolean;
        /**
         * Observations that show on map tiles
         */
        mappable?: boolean;
        /**
         * Observations whose taxa are native to their location
         */
        native?: boolean;
        /**
         * Observations whose taxa are outside their known ranges
         */
        outOfRange?: boolean;
        /**
         * Observations identified by the curator of a project. If
         * the `project_id` parameter is also specified, this will only consider
         * observations identified by curators of the specified project(s)
         *
         */
        pcid?: boolean;
        /**
         * Observations with photos
         */
        photos?: boolean;
        /**
         * Observations that have been favorited by at least one user
         *
         */
        popular?: boolean;
        /**
         * Observations with sounds
         */
        sounds?: boolean;
        /**
         * Observations of active taxon concepts
         *
         */
        taxonIsActive?: boolean;
        /**
         * Observations whose taxa are threatened in their location
         *
         */
        threatened?: boolean;
        /**
         * Observations with a `quality_grade` of either `needs_id` or
         * `research`. Equivalent to `quality_grade=needs_id,research`
         *
         */
        verifiable?: boolean;
        /**
         * License attribute of an observation must not be null
         */
        licensed?: boolean;
        /**
         * License attribute of at least one photo of an observation must not be null
         */
        photoLicensed?: boolean;
        /**
         * Observation taxon is expected nearby
         */
        expectedNearby?: boolean;
        /**
         * Must have this ID
         */
        id?: Array<string>;
        /**
         * Must not have this ID
         */
        notId?: Array<string>;
        /**
         * Observation must have this license
         */
        license?: 'cc-by' | 'cc-by-nc' | 'cc-by-nd' | 'cc-by-sa' | 'cc-by-nc-nd' | 'cc-by-nc-sa' | 'cc0';
        /**
         * Must have an observation field value with this datatype
         */
        ofvDatatype?: Array<string>;
        /**
         * Must have at least one photo with this license
         */
        photoLicense?: 'cc-by' | 'cc-by-nc' | 'cc-by-nd' | 'cc-by-sa' | 'cc-by-nc-nd' | 'cc-by-nc-sa' | 'cc0';
        /**
         * Must be observed within the place with this ID
         */
        placeId?: Array<number>;
        /**
         * Must be added to the project this ID or slug
         */
        projectId?: Array<string>;
        /**
         * Taxon must have this rank
         */
        rank?: 'kingdom' | 'phylum' | 'subphylum' | 'superclass' | 'class' | 'subclass' | 'superorder' | 'order' | 'suborder' | 'infraorder' | 'superfamily' | 'epifamily' | 'family' | 'subfamily' | 'supertribe' | 'tribe' | 'subtribe' | 'genus' | 'genushybrid' | 'species' | 'hybrid' | 'subspecies' | 'variety' | 'form';
        /**
         * Must be affiliated with the iNaturalist network website with this ID
         *
         */
        siteId?: Array<string>;
        /**
         * Must have at least one sound with this license
         */
        soundLicense?: 'cc-by' | 'cc-by-nc' | 'cc-by-nd' | 'cc-by-sa' | 'cc-by-nc-nd' | 'cc-by-nc-sa' | 'cc0';
        /**
         * Only show observations of these taxa and their descendants
         */
        taxonId?: Array<string>;
        /**
         * Exclude observations of these taxa and their descendants
         */
        withoutTaxonId?: Array<string>;
        /**
         * Taxon must have a scientific or common name matching this string
         *
         */
        taxonName?: Array<string>;
        /**
         * User must have this ID or login
         */
        userId?: Array<string>;
        /**
         * User must have this login
         */
        userLogin?: Array<string>;
        /**
         * Observations identified by a particular user
         */
        identUserId?: number;
        /**
         * Must be observed within this hour of the day
         */
        hour?: Array<string>;
        /**
         * Must be observed within this day of the month
         */
        day?: Array<string>;
        /**
         * Must be observed within this month
         */
        month?: Array<string>;
        /**
         * Must be observed within this year
         */
        year?: Array<string>;
        /**
         * Must be created within this day of the month
         */
        createdDay?: Array<string>;
        /**
         * Must be created within this month
         */
        createdMonth?: Array<string>;
        /**
         * Must be created within this year
         */
        createdYear?: Array<string>;
        /**
         * Must have an annotation using this controlled term ID
         */
        termId?: Array<number>;
        /**
         * Must have an annotation using this controlled value ID. Must be combined
         * with the `term_id` parameter
         *
         */
        termValueId?: Array<number>;
        /**
         * Exclude observations with annotations using this controlled value ID.
         *
         */
        withoutTermId?: number;
        /**
         * Exclude observations with annotations using this controlled value ID.
         * Must be combined with the `term_id` parameter
         *
         */
        withoutTermValueId?: Array<number>;
        /**
         * Must be combined with the `term_value_id` or the `without_term_value_id` parameter.
         * Must have an annotation using this controlled term ID and associated term value IDs
         * or be missing this annotation.
         *
         */
        termIdOrUnknown?: Array<number>;
        /**
         * Must have an annotation created by this user
         *
         */
        annotationUserId?: Array<string>;
        /**
         * Must have a positional accuracy above this value (meters)
         */
        accAbove?: string;
        /**
         * Must have a positional accuracy below this value (meters)
         */
        accBelow?: string;
        /**
         * Positional accuracy must be below this value (in meters) or be unknown
         */
        accBelowOrUnknown?: string;
        /**
         * Must be observed on or after this date
         */
        d1?: string;
        /**
         * Must be observed on or before this date
         */
        d2?: string;
        /**
         * Must be created at or after this time
         */
        createdD1?: string;
        /**
         * Must be created at or before this time
         */
        createdD2?: string;
        /**
         * Must be created on this date
         */
        createdOn?: string;
        /**
         * Must be observed on this date
         */
        observedOn?: string;
        /**
         * Must not be of a taxon previously observed by this user
         */
        unobservedByUserId?: number;
        /**
         * Must match the rules of the project with this ID or slug
         */
        applyProjectRulesFor?: string;
        /**
         * Taxon must have this conservation status code. If
         * the `place_id` parameter is also specified, this will only consider
         * statuses specific to that place
         *
         */
        cs?: string;
        /**
         * Taxon must have a conservation status from this authority. If
         * the `place_id` parameter is also specified, this will only consider
         * statuses specific to that place
         *
         */
        csa?: string;
        /**
         * Taxon must have this IUCN conservation status. If
         * the `place_id` parameter is also specified, this will only consider
         * statuses specific to that place
         *
         */
        csi?: 'LC' | 'NT' | 'VU' | 'EN' | 'CR' | 'EW' | 'EX';
        /**
         * Must have this geoprivacy setting
         */
        geoprivacy?: 'obscured' | 'obscured_private' | 'open' | 'private';
        /**
         * Filter observations by the most conservative geoprivacy applied by a
         * conservation status associated with one of the taxa proposed in the
         * current identifications.
         *
         */
        taxonGeoprivacy?: 'obscured' | 'obscured_private' | 'open' | 'private';
        /**
         * Must have `geoprivacy` or `taxon_geoprivacy` fields matching these values
         *
         */
        obscuration?: 'obscured' | 'private' | 'none';
        /**
         * Taxon must have this rank or lower
         */
        hrank?: 'kingdom' | 'phylum' | 'subphylum' | 'superclass' | 'class' | 'subclass' | 'superorder' | 'order' | 'suborder' | 'infraorder' | 'superfamily' | 'epifamily' | 'family' | 'subfamily' | 'supertribe' | 'tribe' | 'subtribe' | 'genus' | 'genushybrid' | 'species' | 'hybrid' | 'subspecies' | 'variety' | 'form';
        /**
         * Taxon must have this rank or higher
         */
        lrank?: 'kingdom' | 'phylum' | 'subphylum' | 'superclass' | 'class' | 'subclass' | 'superorder' | 'order' | 'suborder' | 'infraorder' | 'superfamily' | 'epifamily' | 'family' | 'subfamily' | 'supertribe' | 'tribe' | 'subtribe' | 'genus' | 'genushybrid' | 'species' | 'hybrid' | 'subspecies' | 'variety' | 'form';
        /**
         * Taxon must by within this iconic taxon
         */
        iconicTaxa?: 'Actinopterygii' | 'Animalia' | 'Amphibia' | 'Arachnida' | 'Aves' | 'Chromista' | 'Fungi' | 'Insecta' | 'Mammalia' | 'Mollusca' | 'Reptilia' | 'Plantae' | 'Protozoa' | 'unknown';
        /**
         * Must have an ID above this value
         */
        idAbove?: string;
        /**
         * Must have an ID below this value
         */
        idBelow?: string;
        /**
         * Identifications must meet these criteria
         */
        identifications?: 'most_agree' | 'most_disagree' | 'some_agree';
        /**
         * Must be within a {`radius`} kilometer circle around this lat/lng
         * (*lat, *lng, radius)
         *
         */
        lat?: number;
        /**
         * Must be within a {`radius`} kilometer circle around this lat/lng
         * (*lat, *lng, radius)
         *
         */
        lng?: number;
        /**
         * Must be within a {`radius`} kilometer circle around this lat/lng
         * (*lat, *lng, radius)
         *
         */
        radius?: string;
        /**
         * Must be within this bounding box (*nelat, *nelng, *swlat, *swlng)
         *
         */
        nelat?: number;
        /**
         * Must be within this bounding box (*nelat, *nelng, *swlat, *swlng)
         *
         */
        nelng?: number;
        /**
         * Must be within this bounding box (*nelat, *nelng, *swlat, *swlng)
         *
         */
        swlat?: number;
        /**
         * Must be within this bounding box (*nelat, *nelng, *swlat, *swlng)
         *
         */
        swlng?: number;
        /**
         * Taxon must be in the list with this ID
         */
        listId?: number;
        /**
         * Must not be in the project with this ID or slug
         */
        notInProject?: string;
        /**
         * Must not match the rules of the project with this ID or slug
         */
        notMatchingProjectRulesFor?: string;
        /**
         * Must included in this observation accuracy experiment
         */
        observationAccuracyExperimentId?: Array<number>;
        /**
         * Search observation properties. Can be combined with `search_on`
         */
        q?: string;
        /**
         * Properties to search on, when combined with `q`.
         * Searches across all properties by default
         *
         */
        searchOn?: 'names' | 'tags' | 'description' | 'place';
        /**
         * Must have this quality grade
         */
        qualityGrade?: 'casual' | 'needs_id' | 'research';
        /**
         * Must be updated since this time
         */
        updatedSince?: string;
        /**
         * See `reviewed`
         */
        viewerId?: string;
        /**
         * Observations have been reviewed by the user with ID equal to
         * the value of the `viewer_id` parameter
         *
         */
        reviewed?: boolean;
        /**
         * Locale preference for taxon common names
         *
         */
        locale?: string;
        /**
         * Place preference for regional taxon common names
         *
         */
        preferredPlaceId?: number;
        /**
         * Set the `Cache-Control` HTTP header with this value as `max-age`, in
         * seconds. This means subsequent identical requests will be cached on
         * iNaturalist servers, and commonly within web browsers
         *
         */
        ttl?: string;
    };
    url: '/observations/observers';
};

export type GetObservationsObserversErrors = {
    /**
     * Unexpected error
     */
    default: _Error;
};

export type GetObservationsObserversError = GetObservationsObserversErrors[keyof GetObservationsObserversErrors];

export type GetObservationsObserversResponses = {
    /**
     * Returns an object with metadata and an array of observers
     *
     */
    200: ObservationsObserversResponse;
};

export type GetObservationsObserversResponse = GetObservationsObserversResponses[keyof GetObservationsObserversResponses];

export type GetObservationsPopularFieldValuesData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Whether or not positional accuracy / coordinate uncertainty has been specified
         */
        acc?: boolean;
        /**
         * Captive or cultivated observations
         */
        captive?: boolean;
        /**
         * Observations whose taxa are endemic to their location
         */
        endemic?: boolean;
        /**
         * Observations that are georeferenced
         */
        geo?: boolean;
        /**
         * Observations with the deprecated `ID, Please!` flag. Note that this will return observations, but that this attribute is no longer used.
         */
        idPlease?: boolean;
        /**
         * Observations that have community identifications
         */
        identified?: boolean;
        /**
         * Observations whose taxa are introduced in their location
         *
         */
        introduced?: boolean;
        /**
         * Observations that show on map tiles
         */
        mappable?: boolean;
        /**
         * Observations whose taxa are native to their location
         */
        native?: boolean;
        /**
         * Observations whose taxa are outside their known ranges
         */
        outOfRange?: boolean;
        /**
         * Observations identified by the curator of a project. If
         * the `project_id` parameter is also specified, this will only consider
         * observations identified by curators of the specified project(s)
         *
         */
        pcid?: boolean;
        /**
         * Observations with photos
         */
        photos?: boolean;
        /**
         * Observations that have been favorited by at least one user
         *
         */
        popular?: boolean;
        /**
         * Observations with sounds
         */
        sounds?: boolean;
        /**
         * Observations of active taxon concepts
         *
         */
        taxonIsActive?: boolean;
        /**
         * Observations whose taxa are threatened in their location
         *
         */
        threatened?: boolean;
        /**
         * Observations with a `quality_grade` of either `needs_id` or
         * `research`. Equivalent to `quality_grade=needs_id,research`
         *
         */
        verifiable?: boolean;
        /**
         * License attribute of an observation must not be null
         */
        licensed?: boolean;
        /**
         * License attribute of at least one photo of an observation must not be null
         */
        photoLicensed?: boolean;
        /**
         * Observation taxon is expected nearby
         */
        expectedNearby?: boolean;
        /**
         * Must have this ID
         */
        id?: Array<string>;
        /**
         * Must not have this ID
         */
        notId?: Array<string>;
        /**
         * Observation must have this license
         */
        license?: 'cc-by' | 'cc-by-nc' | 'cc-by-nd' | 'cc-by-sa' | 'cc-by-nc-nd' | 'cc-by-nc-sa' | 'cc0';
        /**
         * Must have an observation field value with this datatype
         */
        ofvDatatype?: Array<string>;
        /**
         * Must have at least one photo with this license
         */
        photoLicense?: 'cc-by' | 'cc-by-nc' | 'cc-by-nd' | 'cc-by-sa' | 'cc-by-nc-nd' | 'cc-by-nc-sa' | 'cc0';
        /**
         * Must be observed within the place with this ID
         */
        placeId?: Array<number>;
        /**
         * Must be added to the project this ID or slug
         */
        projectId?: Array<string>;
        /**
         * Taxon must have this rank
         */
        rank?: 'kingdom' | 'phylum' | 'subphylum' | 'superclass' | 'class' | 'subclass' | 'superorder' | 'order' | 'suborder' | 'infraorder' | 'superfamily' | 'epifamily' | 'family' | 'subfamily' | 'supertribe' | 'tribe' | 'subtribe' | 'genus' | 'genushybrid' | 'species' | 'hybrid' | 'subspecies' | 'variety' | 'form';
        /**
         * Must be affiliated with the iNaturalist network website with this ID
         *
         */
        siteId?: Array<string>;
        /**
         * Must have at least one sound with this license
         */
        soundLicense?: 'cc-by' | 'cc-by-nc' | 'cc-by-nd' | 'cc-by-sa' | 'cc-by-nc-nd' | 'cc-by-nc-sa' | 'cc0';
        /**
         * Only show observations of these taxa and their descendants
         */
        taxonId?: Array<string>;
        /**
         * Exclude observations of these taxa and their descendants
         */
        withoutTaxonId?: Array<string>;
        /**
         * Taxon must have a scientific or common name matching this string
         *
         */
        taxonName?: Array<string>;
        /**
         * User must have this ID or login
         */
        userId?: Array<string>;
        /**
         * User must have this login
         */
        userLogin?: Array<string>;
        /**
         * Observations identified by a particular user
         */
        identUserId?: number;
        /**
         * Must be observed within this hour of the day
         */
        hour?: Array<string>;
        /**
         * Must be observed within this day of the month
         */
        day?: Array<string>;
        /**
         * Must be observed within this month
         */
        month?: Array<string>;
        /**
         * Must be observed within this year
         */
        year?: Array<string>;
        /**
         * Must be created within this day of the month
         */
        createdDay?: Array<string>;
        /**
         * Must be created within this month
         */
        createdMonth?: Array<string>;
        /**
         * Must be created within this year
         */
        createdYear?: Array<string>;
        /**
         * Must have an annotation using this controlled term ID
         */
        termId?: Array<number>;
        /**
         * Must have an annotation using this controlled value ID. Must be combined
         * with the `term_id` parameter
         *
         */
        termValueId?: Array<number>;
        /**
         * Exclude observations with annotations using this controlled value ID.
         *
         */
        withoutTermId?: number;
        /**
         * Exclude observations with annotations using this controlled value ID.
         * Must be combined with the `term_id` parameter
         *
         */
        withoutTermValueId?: Array<number>;
        /**
         * Must be combined with the `term_value_id` or the `without_term_value_id` parameter.
         * Must have an annotation using this controlled term ID and associated term value IDs
         * or be missing this annotation.
         *
         */
        termIdOrUnknown?: Array<number>;
        /**
         * Must have an annotation created by this user
         *
         */
        annotationUserId?: Array<string>;
        /**
         * Must have a positional accuracy above this value (meters)
         */
        accAbove?: string;
        /**
         * Must have a positional accuracy below this value (meters)
         */
        accBelow?: string;
        /**
         * Positional accuracy must be below this value (in meters) or be unknown
         */
        accBelowOrUnknown?: string;
        /**
         * Must be observed on or after this date
         */
        d1?: string;
        /**
         * Must be observed on or before this date
         */
        d2?: string;
        /**
         * Must be created at or after this time
         */
        createdD1?: string;
        /**
         * Must be created at or before this time
         */
        createdD2?: string;
        /**
         * Must be created on this date
         */
        createdOn?: string;
        /**
         * Must be observed on this date
         */
        observedOn?: string;
        /**
         * Must not be of a taxon previously observed by this user
         */
        unobservedByUserId?: number;
        /**
         * Must match the rules of the project with this ID or slug
         */
        applyProjectRulesFor?: string;
        /**
         * Taxon must have this conservation status code. If
         * the `place_id` parameter is also specified, this will only consider
         * statuses specific to that place
         *
         */
        cs?: string;
        /**
         * Taxon must have a conservation status from this authority. If
         * the `place_id` parameter is also specified, this will only consider
         * statuses specific to that place
         *
         */
        csa?: string;
        /**
         * Taxon must have this IUCN conservation status. If
         * the `place_id` parameter is also specified, this will only consider
         * statuses specific to that place
         *
         */
        csi?: 'LC' | 'NT' | 'VU' | 'EN' | 'CR' | 'EW' | 'EX';
        /**
         * Must have this geoprivacy setting
         */
        geoprivacy?: 'obscured' | 'obscured_private' | 'open' | 'private';
        /**
         * Filter observations by the most conservative geoprivacy applied by a
         * conservation status associated with one of the taxa proposed in the
         * current identifications.
         *
         */
        taxonGeoprivacy?: 'obscured' | 'obscured_private' | 'open' | 'private';
        /**
         * Must have `geoprivacy` or `taxon_geoprivacy` fields matching these values
         *
         */
        obscuration?: 'obscured' | 'private' | 'none';
        /**
         * Taxon must have this rank or lower
         */
        hrank?: 'kingdom' | 'phylum' | 'subphylum' | 'superclass' | 'class' | 'subclass' | 'superorder' | 'order' | 'suborder' | 'infraorder' | 'superfamily' | 'epifamily' | 'family' | 'subfamily' | 'supertribe' | 'tribe' | 'subtribe' | 'genus' | 'genushybrid' | 'species' | 'hybrid' | 'subspecies' | 'variety' | 'form';
        /**
         * Taxon must have this rank or higher
         */
        lrank?: 'kingdom' | 'phylum' | 'subphylum' | 'superclass' | 'class' | 'subclass' | 'superorder' | 'order' | 'suborder' | 'infraorder' | 'superfamily' | 'epifamily' | 'family' | 'subfamily' | 'supertribe' | 'tribe' | 'subtribe' | 'genus' | 'genushybrid' | 'species' | 'hybrid' | 'subspecies' | 'variety' | 'form';
        /**
         * Taxon must by within this iconic taxon
         */
        iconicTaxa?: 'Actinopterygii' | 'Animalia' | 'Amphibia' | 'Arachnida' | 'Aves' | 'Chromista' | 'Fungi' | 'Insecta' | 'Mammalia' | 'Mollusca' | 'Reptilia' | 'Plantae' | 'Protozoa' | 'unknown';
        /**
         * Must have an ID above this value
         */
        idAbove?: string;
        /**
         * Must have an ID below this value
         */
        idBelow?: string;
        /**
         * Identifications must meet these criteria
         */
        identifications?: 'most_agree' | 'most_disagree' | 'some_agree';
        /**
         * Must be within a {`radius`} kilometer circle around this lat/lng
         * (*lat, *lng, radius)
         *
         */
        lat?: number;
        /**
         * Must be within a {`radius`} kilometer circle around this lat/lng
         * (*lat, *lng, radius)
         *
         */
        lng?: number;
        /**
         * Must be within a {`radius`} kilometer circle around this lat/lng
         * (*lat, *lng, radius)
         *
         */
        radius?: string;
        /**
         * Must be within this bounding box (*nelat, *nelng, *swlat, *swlng)
         *
         */
        nelat?: number;
        /**
         * Must be within this bounding box (*nelat, *nelng, *swlat, *swlng)
         *
         */
        nelng?: number;
        /**
         * Must be within this bounding box (*nelat, *nelng, *swlat, *swlng)
         *
         */
        swlat?: number;
        /**
         * Must be within this bounding box (*nelat, *nelng, *swlat, *swlng)
         *
         */
        swlng?: number;
        /**
         * Taxon must be in the list with this ID
         */
        listId?: number;
        /**
         * Must not be in the project with this ID or slug
         */
        notInProject?: string;
        /**
         * Must not match the rules of the project with this ID or slug
         */
        notMatchingProjectRulesFor?: string;
        /**
         * Must included in this observation accuracy experiment
         */
        observationAccuracyExperimentId?: Array<number>;
        /**
         * Search observation properties. Can be combined with `search_on`
         */
        q?: string;
        /**
         * Properties to search on, when combined with `q`.
         * Searches across all properties by default
         *
         */
        searchOn?: 'names' | 'tags' | 'description' | 'place';
        /**
         * Must have this quality grade
         */
        qualityGrade?: 'casual' | 'needs_id' | 'research';
        /**
         * Must be updated since this time
         */
        updatedSince?: string;
        /**
         * See `reviewed`
         */
        viewerId?: string;
        /**
         * Observations have been reviewed by the user with ID equal to
         * the value of the `viewer_id` parameter
         *
         */
        reviewed?: boolean;
        /**
         * Locale preference for taxon common names
         *
         */
        locale?: string;
        /**
         * Place preference for regional taxon common names
         *
         */
        preferredPlaceId?: number;
        /**
         * Set the `Cache-Control` HTTP header with this value as `max-age`, in
         * seconds. This means subsequent identical requests will be cached on
         * iNaturalist servers, and commonly within web browsers
         *
         */
        ttl?: string;
    };
    url: '/observations/popular_field_values';
};

export type GetObservationsPopularFieldValuesResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type GetObservationsSpeciesCountsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Whether or not positional accuracy / coordinate uncertainty has been specified
         */
        acc?: boolean;
        /**
         * Captive or cultivated observations
         */
        captive?: boolean;
        /**
         * Observations whose taxa are endemic to their location
         */
        endemic?: boolean;
        /**
         * Observations that are georeferenced
         */
        geo?: boolean;
        /**
         * Observations with the deprecated `ID, Please!` flag. Note that this will return observations, but that this attribute is no longer used.
         */
        idPlease?: boolean;
        /**
         * Observations that have community identifications
         */
        identified?: boolean;
        /**
         * Observations whose taxa are introduced in their location
         *
         */
        introduced?: boolean;
        /**
         * Observations that show on map tiles
         */
        mappable?: boolean;
        /**
         * Observations whose taxa are native to their location
         */
        native?: boolean;
        /**
         * Observations whose taxa are outside their known ranges
         */
        outOfRange?: boolean;
        /**
         * Observations identified by the curator of a project. If
         * the `project_id` parameter is also specified, this will only consider
         * observations identified by curators of the specified project(s)
         *
         */
        pcid?: boolean;
        /**
         * Observations with photos
         */
        photos?: boolean;
        /**
         * Observations that have been favorited by at least one user
         *
         */
        popular?: boolean;
        /**
         * Observations with sounds
         */
        sounds?: boolean;
        /**
         * Observations of active taxon concepts
         *
         */
        taxonIsActive?: boolean;
        /**
         * Observations whose taxa are threatened in their location
         *
         */
        threatened?: boolean;
        /**
         * Observations with a `quality_grade` of either `needs_id` or
         * `research`. Equivalent to `quality_grade=needs_id,research`
         *
         */
        verifiable?: boolean;
        /**
         * License attribute of an observation must not be null
         */
        licensed?: boolean;
        /**
         * License attribute of at least one photo of an observation must not be null
         */
        photoLicensed?: boolean;
        /**
         * Observation taxon is expected nearby
         */
        expectedNearby?: boolean;
        /**
         * Must have this ID
         */
        id?: Array<string>;
        /**
         * Must not have this ID
         */
        notId?: Array<string>;
        /**
         * Observation must have this license
         */
        license?: 'cc-by' | 'cc-by-nc' | 'cc-by-nd' | 'cc-by-sa' | 'cc-by-nc-nd' | 'cc-by-nc-sa' | 'cc0';
        /**
         * Must have an observation field value with this datatype
         */
        ofvDatatype?: Array<string>;
        /**
         * Must have at least one photo with this license
         */
        photoLicense?: 'cc-by' | 'cc-by-nc' | 'cc-by-nd' | 'cc-by-sa' | 'cc-by-nc-nd' | 'cc-by-nc-sa' | 'cc0';
        /**
         * Must be observed within the place with this ID
         */
        placeId?: Array<number>;
        /**
         * Must be added to the project this ID or slug
         */
        projectId?: Array<string>;
        /**
         * Taxon must have this rank
         */
        rank?: 'kingdom' | 'phylum' | 'subphylum' | 'superclass' | 'class' | 'subclass' | 'superorder' | 'order' | 'suborder' | 'infraorder' | 'superfamily' | 'epifamily' | 'family' | 'subfamily' | 'supertribe' | 'tribe' | 'subtribe' | 'genus' | 'genushybrid' | 'species' | 'hybrid' | 'subspecies' | 'variety' | 'form';
        /**
         * Must be affiliated with the iNaturalist network website with this ID
         *
         */
        siteId?: Array<string>;
        /**
         * Must have at least one sound with this license
         */
        soundLicense?: 'cc-by' | 'cc-by-nc' | 'cc-by-nd' | 'cc-by-sa' | 'cc-by-nc-nd' | 'cc-by-nc-sa' | 'cc0';
        /**
         * Only show observations of these taxa and their descendants
         */
        taxonId?: Array<string>;
        /**
         * Exclude observations of these taxa and their descendants
         */
        withoutTaxonId?: Array<string>;
        /**
         * Taxon must have a scientific or common name matching this string
         *
         */
        taxonName?: Array<string>;
        /**
         * User must have this ID or login
         */
        userId?: Array<string>;
        /**
         * User must have this login
         */
        userLogin?: Array<string>;
        /**
         * Observations identified by a particular user
         */
        identUserId?: number;
        /**
         * Must be observed within this hour of the day
         */
        hour?: Array<string>;
        /**
         * Must be observed within this day of the month
         */
        day?: Array<string>;
        /**
         * Must be observed within this month
         */
        month?: Array<string>;
        /**
         * Must be observed within this year
         */
        year?: Array<string>;
        /**
         * Must be created within this day of the month
         */
        createdDay?: Array<string>;
        /**
         * Must be created within this month
         */
        createdMonth?: Array<string>;
        /**
         * Must be created within this year
         */
        createdYear?: Array<string>;
        /**
         * Must have an annotation using this controlled term ID
         */
        termId?: Array<number>;
        /**
         * Must have an annotation using this controlled value ID. Must be combined
         * with the `term_id` parameter
         *
         */
        termValueId?: Array<number>;
        /**
         * Exclude observations with annotations using this controlled value ID.
         *
         */
        withoutTermId?: number;
        /**
         * Exclude observations with annotations using this controlled value ID.
         * Must be combined with the `term_id` parameter
         *
         */
        withoutTermValueId?: Array<number>;
        /**
         * Must be combined with the `term_value_id` or the `without_term_value_id` parameter.
         * Must have an annotation using this controlled term ID and associated term value IDs
         * or be missing this annotation.
         *
         */
        termIdOrUnknown?: Array<number>;
        /**
         * Must have an annotation created by this user
         *
         */
        annotationUserId?: Array<string>;
        /**
         * Must have a positional accuracy above this value (meters)
         */
        accAbove?: string;
        /**
         * Must have a positional accuracy below this value (meters)
         */
        accBelow?: string;
        /**
         * Positional accuracy must be below this value (in meters) or be unknown
         */
        accBelowOrUnknown?: string;
        /**
         * Must be observed on or after this date
         */
        d1?: string;
        /**
         * Must be observed on or before this date
         */
        d2?: string;
        /**
         * Must be created at or after this time
         */
        createdD1?: string;
        /**
         * Must be created at or before this time
         */
        createdD2?: string;
        /**
         * Must be created on this date
         */
        createdOn?: string;
        /**
         * Must be observed on this date
         */
        observedOn?: string;
        /**
         * Must not be of a taxon previously observed by this user
         */
        unobservedByUserId?: number;
        /**
         * Must match the rules of the project with this ID or slug
         */
        applyProjectRulesFor?: string;
        /**
         * Taxon must have this conservation status code. If
         * the `place_id` parameter is also specified, this will only consider
         * statuses specific to that place
         *
         */
        cs?: string;
        /**
         * Taxon must have a conservation status from this authority. If
         * the `place_id` parameter is also specified, this will only consider
         * statuses specific to that place
         *
         */
        csa?: string;
        /**
         * Taxon must have this IUCN conservation status. If
         * the `place_id` parameter is also specified, this will only consider
         * statuses specific to that place
         *
         */
        csi?: 'LC' | 'NT' | 'VU' | 'EN' | 'CR' | 'EW' | 'EX';
        /**
         * Must have this geoprivacy setting
         */
        geoprivacy?: 'obscured' | 'obscured_private' | 'open' | 'private';
        /**
         * Filter observations by the most conservative geoprivacy applied by a
         * conservation status associated with one of the taxa proposed in the
         * current identifications.
         *
         */
        taxonGeoprivacy?: 'obscured' | 'obscured_private' | 'open' | 'private';
        /**
         * Must have `geoprivacy` or `taxon_geoprivacy` fields matching these values
         *
         */
        obscuration?: 'obscured' | 'private' | 'none';
        /**
         * Taxon must have this rank or lower
         */
        hrank?: 'kingdom' | 'phylum' | 'subphylum' | 'superclass' | 'class' | 'subclass' | 'superorder' | 'order' | 'suborder' | 'infraorder' | 'superfamily' | 'epifamily' | 'family' | 'subfamily' | 'supertribe' | 'tribe' | 'subtribe' | 'genus' | 'genushybrid' | 'species' | 'hybrid' | 'subspecies' | 'variety' | 'form';
        /**
         * Taxon must have this rank or higher
         */
        lrank?: 'kingdom' | 'phylum' | 'subphylum' | 'superclass' | 'class' | 'subclass' | 'superorder' | 'order' | 'suborder' | 'infraorder' | 'superfamily' | 'epifamily' | 'family' | 'subfamily' | 'supertribe' | 'tribe' | 'subtribe' | 'genus' | 'genushybrid' | 'species' | 'hybrid' | 'subspecies' | 'variety' | 'form';
        /**
         * Taxon must by within this iconic taxon
         */
        iconicTaxa?: 'Actinopterygii' | 'Animalia' | 'Amphibia' | 'Arachnida' | 'Aves' | 'Chromista' | 'Fungi' | 'Insecta' | 'Mammalia' | 'Mollusca' | 'Reptilia' | 'Plantae' | 'Protozoa' | 'unknown';
        /**
         * Must have an ID above this value
         */
        idAbove?: string;
        /**
         * Must have an ID below this value
         */
        idBelow?: string;
        /**
         * Identifications must meet these criteria
         */
        identifications?: 'most_agree' | 'most_disagree' | 'some_agree';
        /**
         * Must be within a {`radius`} kilometer circle around this lat/lng
         * (*lat, *lng, radius)
         *
         */
        lat?: number;
        /**
         * Must be within a {`radius`} kilometer circle around this lat/lng
         * (*lat, *lng, radius)
         *
         */
        lng?: number;
        /**
         * Must be within a {`radius`} kilometer circle around this lat/lng
         * (*lat, *lng, radius)
         *
         */
        radius?: string;
        /**
         * Must be within this bounding box (*nelat, *nelng, *swlat, *swlng)
         *
         */
        nelat?: number;
        /**
         * Must be within this bounding box (*nelat, *nelng, *swlat, *swlng)
         *
         */
        nelng?: number;
        /**
         * Must be within this bounding box (*nelat, *nelng, *swlat, *swlng)
         *
         */
        swlat?: number;
        /**
         * Must be within this bounding box (*nelat, *nelng, *swlat, *swlng)
         *
         */
        swlng?: number;
        /**
         * Taxon must be in the list with this ID
         */
        listId?: number;
        /**
         * Must not be in the project with this ID or slug
         */
        notInProject?: string;
        /**
         * Must not match the rules of the project with this ID or slug
         */
        notMatchingProjectRulesFor?: string;
        /**
         * Must included in this observation accuracy experiment
         */
        observationAccuracyExperimentId?: Array<number>;
        /**
         * Search observation properties. Can be combined with `search_on`
         */
        q?: string;
        /**
         * Properties to search on, when combined with `q`.
         * Searches across all properties by default
         *
         */
        searchOn?: 'names' | 'tags' | 'description' | 'place';
        /**
         * Must have this quality grade
         */
        qualityGrade?: 'casual' | 'needs_id' | 'research';
        /**
         * Must be updated since this time
         */
        updatedSince?: string;
        /**
         * See `reviewed`
         */
        viewerId?: string;
        /**
         * Observations have been reviewed by the user with ID equal to
         * the value of the `viewer_id` parameter
         *
         */
        reviewed?: boolean;
        /**
         * Locale preference for taxon common names
         *
         */
        locale?: string;
        /**
         * Place preference for regional taxon common names
         *
         */
        preferredPlaceId?: number;
        /**
         * Set the `Cache-Control` HTTP header with this value as `max-age`, in
         * seconds. This means subsequent identical requests will be cached on
         * iNaturalist servers, and commonly within web browsers
         *
         */
        ttl?: string;
        /**
         * Include taxon ancestors in the response
         */
        includeAncestors?: boolean;
        /**
         * Pagination `page` number
         */
        page?: string;
        /**
         * Number of results to return in a `page`. The maximum value is 500
         *
         */
        perPage?: string;
    };
    url: '/observations/species_counts';
};

export type GetObservationsSpeciesCountsErrors = {
    /**
     * Unexpected error
     */
    default: _Error;
};

export type GetObservationsSpeciesCountsError = GetObservationsSpeciesCountsErrors[keyof GetObservationsSpeciesCountsErrors];

export type GetObservationsSpeciesCountsResponses = {
    /**
     * Returns an object with metadata and an array of taxa
     *
     */
    200: SpeciesCountsResponse;
};

export type GetObservationsSpeciesCountsResponse = GetObservationsSpeciesCountsResponses[keyof GetObservationsSpeciesCountsResponses];

export type GetObservationsUpdatesData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Must be created at or after this time
         */
        createdAfter?: string;
        /**
         * Notification has been viewed by the user before
         */
        viewed?: boolean;
        /**
         * Only show updates on observations owned by the currently authenticated
         * user or on observations the authenticated user is following but does not
         * own.
         *
         */
        observationsBy?: 'owner' | 'following';
        /**
         * Pagination `page` number
         */
        page?: string;
        /**
         * Number of results to return in a `page`. The maximum value is generally
         * 200 unless otherwise noted
         *
         */
        perPage?: string;
    };
    url: '/observations/updates';
};

export type GetObservationsUpdatesResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type PutObservationsByIdViewedUpdatesData = {
    body?: never;
    path: {
        /**
         * ID of the record
         */
        id: number;
    };
    query?: never;
    url: '/observations/{id}/viewed_updates';
};

export type PutObservationsByIdViewedUpdatesResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type DeleteObservationFieldValuesByIdData = {
    body?: never;
    path: {
        /**
         * ID of the record
         */
        id: number;
    };
    query?: never;
    url: '/observation_field_values/{id}';
};

export type DeleteObservationFieldValuesByIdResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type PutObservationFieldValuesByIdData = {
    /**
     * Observation field value object
     */
    body?: PostObservationFieldValue;
    path: {
        /**
         * ID of the record
         */
        id: number;
    };
    query?: never;
    url: '/observation_field_values/{id}';
};

export type PutObservationFieldValuesByIdResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type PostObservationFieldValuesData = {
    /**
     * Observation field value object
     */
    body?: PostObservationFieldValue;
    path?: never;
    query?: never;
    url: '/observation_field_values';
};

export type PostObservationFieldValuesResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type DeleteObservationPhotosByIdData = {
    body?: never;
    path: {
        /**
         * ID of the record
         */
        id: number;
    };
    query?: never;
    url: '/observation_photos/{id}';
};

export type DeleteObservationPhotosByIdResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type PutObservationPhotosByIdData = {
    body?: {
        /**
         * Position in which the photo is displayed for the observation
         */
        observationPhotoPosition?: number;
        /**
         * The photo
         */
        file?: Blob | File;
    };
    path: {
        /**
         * ID of the record
         */
        id: number;
    };
    query?: never;
    url: '/observation_photos/{id}';
};

export type PutObservationPhotosByIdResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type PostObservationPhotosData = {
    body?: {
        /**
         * Observation ID
         */
        observationPhotoObservationId?: number;
        /**
         * Observation UUID
         */
        observationPhotoUuid?: string;
        /**
         * The photo
         */
        file?: Blob | File;
    };
    path?: never;
    query?: never;
    url: '/observation_photos';
};

export type PostObservationPhotosResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type PostPhotosData = {
    body?: {
        /**
         * The photo
         */
        file?: Blob | File;
    };
    path?: never;
    query?: never;
    url: '/photos';
};

export type PostPhotosResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type GetPlacesByIdData = {
    body?: never;
    path: {
        /**
         * Must have this ID or slug
         */
        id: Array<string>;
    };
    query?: {
        /**
         * Admin level of a place, or an array of admin levels
         * in comma-delimited format. Supported admin levels are: -10
         * (continent), 0 (country), 10 (state), 20 (county), 30 (town),
         * 100 (park)
         */
        adminLevel?: -10 | 0 | 10 | 20 | 30 | 100;
    };
    url: '/places/{id}';
};

export type GetPlacesByIdErrors = {
    /**
     * Unexpected error
     */
    default: _Error;
};

export type GetPlacesByIdError = GetPlacesByIdErrors[keyof GetPlacesByIdErrors];

export type GetPlacesByIdResponses = {
    /**
     * Returns an object with metadata and an results array of places
     *
     */
    200: PlacesResponse;
};

export type GetPlacesByIdResponse = GetPlacesByIdResponses[keyof GetPlacesByIdResponses];

export type GetPlacesAutocompleteData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Search by name (must start with this value) or by ID (exact match).
         */
        q: string;
        /**
         * Sort field
         */
        orderBy?: 'area';
    };
    url: '/places/autocomplete';
};

export type GetPlacesAutocompleteErrors = {
    /**
     * Unexpected error
     */
    default: _Error;
};

export type GetPlacesAutocompleteError = GetPlacesAutocompleteErrors[keyof GetPlacesAutocompleteErrors];

export type GetPlacesAutocompleteResponses = {
    /**
     * Returns an object with metadata and an results array of places
     *
     */
    200: PlacesResponse;
};

export type GetPlacesAutocompleteResponse = GetPlacesAutocompleteResponses[keyof GetPlacesAutocompleteResponses];

export type GetPlacesNearbyData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Must be nearby this bounding box (*nelat, *nelng, *swlat, *swlng)
         *
         */
        nelat: number;
        /**
         * Must be nearby this bounding box (*nelat, *nelng, *swlat, *swlng)
         *
         */
        nelng: number;
        /**
         * Must be nearby this bounding box (*nelat, *nelng, *swlat, *swlng)
         *
         */
        swlat: number;
        /**
         * Must be nearby this bounding box (*nelat, *nelng, *swlat, *swlng)
         *
         */
        swlng: number;
        /**
         * Name must match this value
         */
        name?: string;
        /**
         * Number of results to return in a `page`. The maximum value is generally
         * 200 unless otherwise noted
         *
         */
        perPage?: string;
    };
    url: '/places/nearby';
};

export type GetPlacesNearbyErrors = {
    /**
     * Unexpected error
     */
    default: _Error;
};

export type GetPlacesNearbyError = GetPlacesNearbyErrors[keyof GetPlacesNearbyErrors];

export type GetPlacesNearbyResponses = {
    /**
     * Returns an object with metadata and an results object containing
     * `standard` and `community` places
     *
     */
    200: NearbyPlacesResponse;
};

export type GetPlacesNearbyResponse = GetPlacesNearbyResponses[keyof GetPlacesNearbyResponses];

export type GetPostsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Return posts by this user
         */
        login?: string;
        /**
         * Return posts from this project
         */
        projectId?: number;
        /**
         * Pagination `page` number
         */
        page?: string;
        /**
         * Number of results to return in a `page`. The maximum value is generally
         * 200 unless otherwise noted
         *
         */
        perPage?: string;
    };
    url: '/posts';
};

export type GetPostsResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type PostPostsData = {
    /**
     * Post object
     */
    body?: PostPost;
    path?: never;
    query?: never;
    url: '/posts';
};

export type PostPostsResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type DeletePostsByIdData = {
    body?: never;
    path: {
        /**
         * ID of the record
         */
        id: number;
    };
    query?: never;
    url: '/posts/{id}';
};

export type DeletePostsByIdResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type PutPostsByIdData = {
    /**
     * Post object
     */
    body?: PostPost;
    path: {
        /**
         * ID of the record
         */
        id: number;
    };
    query?: never;
    url: '/posts/{id}';
};

export type PutPostsByIdResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type GetPostsForUserData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * returns posts newer than the post with this ID
         */
        newerThan?: string;
        /**
         * returns posts older than the post with this ID
         */
        olderThan?: string;
        /**
         * Pagination `page` number
         */
        page?: string;
    };
    url: '/posts/for_user';
};

export type GetPostsForUserResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type DeleteProjectObservationsByIdData = {
    body?: never;
    path: {
        /**
         * ID of the record
         */
        id: number;
    };
    query?: never;
    url: '/project_observations/{id}';
};

export type DeleteProjectObservationsByIdResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type PutProjectObservationsByIdData = {
    /**
     * Comment object
     */
    body?: UpdateProjectObservation;
    path: {
        /**
         * ID of the record
         */
        id: number;
    };
    query?: never;
    url: '/project_observations/{id}';
};

export type PutProjectObservationsByIdResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type PostProjectObservationsData = {
    /**
     * ProjectObservation object
     */
    body?: PostProjectObservation;
    path?: never;
    query?: never;
    url: '/project_observations';
};

export type PostProjectObservationsResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type GetProjectsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Search by name (must start with this value) or by ID (exact match).
         */
        q?: string;
        /**
         * Must have this ID
         */
        id?: Array<string>;
        /**
         * Must not have this ID
         */
        notId?: Array<string>;
        /**
         * Must be within a {`radius`} kilometer circle around this lat/lng
         * (*lat, *lng, radius)
         *
         */
        lat?: number;
        /**
         * Must be within a {`radius`} kilometer circle around this lat/lng
         * (*lat, *lng, radius)
         *
         */
        lng?: number;
        /**
         * Must be associated with this place
         */
        placeId?: Array<string>;
        /**
         * Must be within a {`radius`} kilometer circle around this lat/lng
         * (*lat, *lng, radius). Defaults to 500km
         *
         */
        radius?: string;
        /**
         * Must be marked featured for the relevant site
         */
        featured?: true;
        /**
         * Must be marked noteworthy for the relevant site
         */
        noteworthy?: true;
        /**
         * Site ID that applies to `featured` and `noteworthy`. Defaults to the site
         * of the authenticated user, or to the main iNaturalist site
         * https://www.inaturalist.org
         *
         */
        siteId?: number;
        /**
         * Return more information about project rules, for example return a full
         * taxon object instead of simply an ID
         *
         */
        ruleDetails?: true;
        /**
         * Projects must be of this type
         */
        type?: 'collection' | 'umbrella';
        /**
         * Project must have member with this user ID
         */
        memberId?: number;
        /**
         * Must have search parameter requirements
         */
        hasParams?: boolean;
        /**
         * Must have posts
         */
        hasPosts?: boolean;
        /**
         * Number of results to return in a `page`. The maximum value is generally
         * 200 unless otherwise noted
         *
         */
        perPage?: string;
        /**
         * Sort field
         */
        orderBy?: 'recent_posts' | 'created' | 'updated' | 'distance' | 'featured';
    };
    url: '/projects';
};

export type GetProjectsErrors = {
    /**
     * Unexpected error
     */
    default: _Error;
};

export type GetProjectsError = GetProjectsErrors[keyof GetProjectsErrors];

export type GetProjectsResponses = {
    /**
     * Returns an object with metadata and an array of projects
     *
     */
    200: ProjectsResponse;
};

export type GetProjectsResponse = GetProjectsResponses[keyof GetProjectsResponses];

export type GetProjectsByIdData = {
    body?: never;
    path: {
        /**
         * Must have this ID or slug
         */
        id: Array<string>;
    };
    query?: {
        /**
         * Return more information about project rules, for example return a full
         * taxon object instead of simply an ID
         *
         */
        ruleDetails?: true;
    };
    url: '/projects/{id}';
};

export type GetProjectsByIdErrors = {
    /**
     * Unexpected error
     */
    default: _Error;
};

export type GetProjectsByIdError = GetProjectsByIdErrors[keyof GetProjectsByIdErrors];

export type GetProjectsByIdResponses = {
    /**
     * Returns an object with metadata and an array of projects
     *
     */
    200: ProjectsResponse;
};

export type GetProjectsByIdResponse = GetProjectsByIdResponses[keyof GetProjectsByIdResponses];

export type PostProjectsByIdJoinData = {
    body?: never;
    path: {
        /**
         * ID of the record
         */
        id: number;
    };
    query?: never;
    url: '/projects/{id}/join';
};

export type PostProjectsByIdJoinResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type DeleteProjectsByIdLeaveData = {
    body?: never;
    path: {
        /**
         * ID of the record
         */
        id: number;
    };
    query?: never;
    url: '/projects/{id}/leave';
};

export type DeleteProjectsByIdLeaveResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type GetProjectsByIdMembersData = {
    body?: never;
    path: {
        /**
         * ID of the record
         */
        id: number;
    };
    query?: {
        /**
         * Membership role
         */
        role?: 'curator' | 'manager';
        /**
         * If counts are not needed, consider setting this to true to save on
         * processing time, resulting in faster responses
         *
         */
        skipCounts?: boolean;
        /**
         * Pagination `page` number
         */
        page?: string;
        /**
         * Number of results to return in a `page`. The maximum value is generally
         * 200 unless otherwise noted
         *
         */
        perPage?: string;
    };
    url: '/projects/{id}/members';
};

export type GetProjectsByIdMembersErrors = {
    /**
     * Unexpected error
     */
    default: _Error;
};

export type GetProjectsByIdMembersError = GetProjectsByIdMembersErrors[keyof GetProjectsByIdMembersErrors];

export type GetProjectsByIdMembersResponses = {
    /**
     * Returns an object with metadata and an results array of projects
     *
     */
    200: ProjectMembersResponse;
};

export type GetProjectsByIdMembersResponse = GetProjectsByIdMembersResponses[keyof GetProjectsByIdMembersResponses];

export type GetProjectsByIdMembershipData = {
    body?: never;
    path: {
        /**
         * Must have this ID
         */
        id: Array<number>;
    };
    query?: never;
    url: '/projects/{id}/membership';
};

export type GetProjectsByIdMembershipResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type GetProjectsByIdSubscriptionsData = {
    body?: never;
    path: {
        /**
         * ID of the record
         */
        id: number;
    };
    query?: never;
    url: '/projects/{id}/subscriptions';
};

export type GetProjectsByIdSubscriptionsResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type PostProjectsByIdAddData = {
    /**
     * ProjectObservation object
     */
    body?: PostProjectAdd;
    path: {
        /**
         * ID of the record
         */
        id: number;
    };
    query?: never;
    url: '/projects/{id}/add';
};

export type PostProjectsByIdAddResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type DeleteProjectsByIdRemoveData = {
    /**
     * ProjectObservation object
     */
    body?: PostProjectAdd;
    path: {
        /**
         * ID of the record
         */
        id: number;
    };
    query?: never;
    url: '/projects/{id}/remove';
};

export type DeleteProjectsByIdRemoveResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type GetProjectsAutocompleteData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Search by name (must start with this value) or by ID (exact match).
         */
        q: string;
        /**
         * Must have this ID
         */
        id?: Array<string>;
        /**
         * Must not have this ID
         */
        notId?: Array<string>;
        /**
         * Must be within a {`radius`} kilometer circle around this lat/lng
         * (*lat, *lng, radius)
         *
         */
        lat?: number;
        /**
         * Must be within a {`radius`} kilometer circle around this lat/lng
         * (*lat, *lng, radius)
         *
         */
        lng?: number;
        /**
         * Must be associated with this place
         */
        placeId?: Array<string>;
        /**
         * Must be within a {`radius`} kilometer circle around this lat/lng
         * (*lat, *lng, radius). Defaults to 500km
         *
         */
        radius?: string;
        /**
         * Must be marked featured for the relevant site
         */
        featured?: true;
        /**
         * Must be marked noteworthy for the relevant site
         */
        noteworthy?: true;
        /**
         * Site ID that applies to `featured` and `noteworthy`. Defaults to the site
         * of the authenticated user, or to the main iNaturalist site
         * https://www.inaturalist.org
         *
         */
        siteId?: number;
        /**
         * Return more information about project rules, for example return a full
         * taxon object instead of simply an ID
         *
         */
        ruleDetails?: true;
        /**
         * Projects must be of this type
         */
        type?: 'collection' | 'umbrella';
        /**
         * Project must have member with this user ID
         */
        memberId?: number;
        /**
         * Must have search parameter requirements
         */
        hasParams?: boolean;
        /**
         * Must have posts
         */
        hasPosts?: boolean;
        /**
         * Number of results to return in a `page`. The maximum value is generally
         * 200 unless otherwise noted
         *
         */
        perPage?: string;
    };
    url: '/projects/autocomplete';
};

export type GetProjectsAutocompleteErrors = {
    /**
     * Unexpected error
     */
    default: _Error;
};

export type GetProjectsAutocompleteError = GetProjectsAutocompleteErrors[keyof GetProjectsAutocompleteErrors];

export type GetProjectsAutocompleteResponses = {
    /**
     * Returns an object with metadata and an results array of places
     *
     */
    200: ProjectsResponse;
};

export type GetProjectsAutocompleteResponse = GetProjectsAutocompleteResponses[keyof GetProjectsAutocompleteResponses];

export type GetSearchData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Search object properties
         */
        q?: string;
        /**
         * Must be of this type
         */
        sources?: 'places' | 'projects' | 'taxa' | 'users';
        /**
         * Must be associated with this place
         */
        placeId?: Array<string>;
        /**
         * Include taxon ancestors in the response
         */
        includeTaxonAncestors?: boolean;
        /**
         * Number of results to return in a `page`. The maximum value is generally
         * 200 unless otherwise noted
         *
         */
        perPage?: string;
        /**
         * Locale preference for taxon common names
         *
         */
        locale?: string;
        /**
         * Place preference for regional taxon common names
         *
         */
        preferredPlaceId?: number;
    };
    url: '/search';
};

export type GetSearchResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type PostSubscriptionsProjectByIdSubscribeData = {
    body?: never;
    path: {
        /**
         * ID of the record
         */
        id: number;
    };
    query?: never;
    url: '/subscriptions/project/{id}/subscribe';
};

export type PostSubscriptionsProjectByIdSubscribeResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type GetTaxaByIdData = {
    body?: never;
    path: {
        /**
         * Must have this ID
         */
        id: Array<number>;
    };
    query?: {
        /**
         * Taxon must have this rank level. Some example values are 70 (kingdom),
         * 60 (phylum), 50 (class), 40 (order), 30 (family), 20 (genus),
         * 10 (species), 5 (subspecies)
         *
         */
        rankLevel?: number;
    };
    url: '/taxa/{id}';
};

export type GetTaxaByIdErrors = {
    /**
     * Unexpected error
     */
    default: _Error;
};

export type GetTaxaByIdError = GetTaxaByIdErrors[keyof GetTaxaByIdErrors];

export type GetTaxaByIdResponses = {
    /**
     * Returns an object with metadata and a results array of taxa
     *
     */
    200: TaxaShowResponse;
};

export type GetTaxaByIdResponse = GetTaxaByIdResponses[keyof GetTaxaByIdResponses];

export type GetTaxaData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Search by name (must start with this value) or by ID (exact match).
         */
        q?: string;
        /**
         * Taxon is `active`
         */
        isActive?: boolean;
        /**
         * Only show taxa with this ID, or its descendants
         */
        taxonId?: Array<string>;
        /**
         * Taxon's parent must have this ID
         */
        parentId?: number;
        /**
         * Taxon must have this rank
         */
        rank?: 'kingdom' | 'phylum' | 'subphylum' | 'superclass' | 'class' | 'subclass' | 'superorder' | 'order' | 'suborder' | 'infraorder' | 'superfamily' | 'epifamily' | 'family' | 'subfamily' | 'supertribe' | 'tribe' | 'subtribe' | 'genus' | 'genushybrid' | 'species' | 'hybrid' | 'subspecies' | 'variety' | 'form';
        /**
         * Taxon must have this rank level. Some example values are 70 (kingdom),
         * 60 (phylum), 50 (class), 40 (order), 30 (family), 20 (genus),
         * 10 (species), 5 (subspecies)
         *
         */
        rankLevel?: number;
        /**
         * Must have an ID above this value
         */
        idAbove?: string;
        /**
         * Must have an ID below this value
         */
        idBelow?: string;
        /**
         * Number of results to return in a `page`. The maximum value is generally
         * 200 unless otherwise noted
         *
         */
        perPage?: string;
        /**
         * Locale preference for taxon common names
         *
         */
        locale?: string;
        /**
         * Place preference for regional taxon common names
         *
         */
        preferredPlaceId?: number;
        /**
         * Return only the record IDs
         */
        onlyId?: boolean;
        /**
         * Include all taxon names in the response
         */
        allNames?: boolean;
        /**
         * Sort order
         */
        order?: 'desc' | 'asc';
        /**
         * Sort field
         */
        orderBy?: 'id' | 'created_at' | 'observations_count';
    };
    url: '/taxa';
};

export type GetTaxaErrors = {
    /**
     * Unexpected error
     */
    default: _Error;
};

export type GetTaxaError = GetTaxaErrors[keyof GetTaxaErrors];

export type GetTaxaResponses = {
    /**
     * Returns an object with search metadata and a results array of taxa
     *
     */
    200: TaxaShowResponse;
};

export type GetTaxaResponse = GetTaxaResponses[keyof GetTaxaResponses];

export type GetTaxaAutocompleteData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Search by name (must start with this value) or by ID (exact match).
         */
        q: string;
        /**
         * Taxon is `active`
         */
        isActive?: boolean;
        /**
         * Only show taxa with this ID, or its descendants
         */
        taxonId?: Array<string>;
        /**
         * Taxon must have this rank
         */
        rank?: 'kingdom' | 'phylum' | 'subphylum' | 'superclass' | 'class' | 'subclass' | 'superorder' | 'order' | 'suborder' | 'infraorder' | 'superfamily' | 'epifamily' | 'family' | 'subfamily' | 'supertribe' | 'tribe' | 'subtribe' | 'genus' | 'genushybrid' | 'species' | 'hybrid' | 'subspecies' | 'variety' | 'form';
        /**
         * Taxon must have this rank level. Some example values are 70 (kingdom),
         * 60 (phylum), 50 (class), 40 (order), 30 (family), 20 (genus),
         * 10 (species), 5 (subspecies)
         *
         */
        rankLevel?: number;
        /**
         * Number of results to return in a `page`. The maximum value is 30 for this endpoint
         */
        perPage?: string;
        /**
         * Locale preference for taxon common names
         *
         */
        locale?: string;
        /**
         * Place preference for regional taxon common names
         *
         */
        preferredPlaceId?: number;
        /**
         * Include all taxon names in the response
         */
        allNames?: boolean;
    };
    url: '/taxa/autocomplete';
};

export type GetTaxaAutocompleteErrors = {
    /**
     * Unexpected error
     */
    default: _Error;
};

export type GetTaxaAutocompleteError = GetTaxaAutocompleteErrors[keyof GetTaxaAutocompleteErrors];

export type GetTaxaAutocompleteResponses = {
    /**
     * Returns an object with search metadata and a results array of taxa
     *
     */
    200: TaxaAutocompleteResponse;
};

export type GetTaxaAutocompleteResponse = GetTaxaAutocompleteResponses[keyof GetTaxaAutocompleteResponses];

export type GetUsersByIdData = {
    body?: never;
    path: {
        /**
         * ID of the record
         */
        id: number;
    };
    query?: never;
    url: '/users/{id}';
};

export type GetUsersByIdResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type PutUsersByIdData = {
    body?: never;
    path: {
        /**
         * ID of the record
         */
        id: number;
    };
    query?: never;
    url: '/users/{id}';
};

export type PutUsersByIdResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type GetUsersByIdProjectsData = {
    body?: never;
    path: {
        /**
         * ID of the record
         */
        id: number;
    };
    query?: {
        /**
         * Return more information about project rules, for example return a full
         * taxon object instead of simply an ID
         *
         */
        ruleDetails?: true;
        /**
         * Specify the type of project to return
         *
         */
        projectType?: 'traditional' | 'collection' | 'umbrella';
        /**
         * Pagination `page` number
         */
        page?: string;
        /**
         * Number of results to return in a `page`. The maximum value is generally
         * 200 unless otherwise noted
         *
         */
        perPage?: string;
    };
    url: '/users/{id}/projects';
};

export type GetUsersByIdProjectsResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type GetUsersAutocompleteData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Search by name (must start with this value) or by ID (exact match).
         */
        q: string;
        /**
         * Only show users with memberships to this project
         */
        projectId?: number;
        /**
         * Number of results to return in a `page`. The maximum value is generally
         * 200 unless otherwise noted
         *
         */
        perPage?: string;
    };
    url: '/users/autocomplete';
};

export type GetUsersAutocompleteResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type GetUsersMeData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/users/me';
};

export type GetUsersMeResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type DeleteUsersByIdMuteData = {
    body?: never;
    path: {
        /**
         * ID of the record
         */
        id: number;
    };
    query?: never;
    url: '/users/{id}/mute';
};

export type DeleteUsersByIdMuteErrors = {
    /**
     * Specified user does not exist
     */
    404: unknown;
};

export type DeleteUsersByIdMuteResponses = {
    /**
     * Returns an empty 200 response on success
     */
    200: unknown;
};

export type PostUsersByIdMuteData = {
    body?: never;
    path: {
        /**
         * ID of the record
         */
        id: number;
    };
    query?: never;
    url: '/users/{id}/mute';
};

export type PostUsersByIdMuteErrors = {
    /**
     * Specified user does not exist
     */
    404: unknown;
};

export type PostUsersByIdMuteResponses = {
    /**
     * Returns an empty 200 response on success
     */
    200: unknown;
};

export type PostUsersResendConfirmationData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/users/resend_confirmation';
};

export type PostUsersResendConfirmationResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type PutUsersUpdateSessionData = {
    /**
     * Comment object
     */
    body?: PostUserUpdateSession;
    path?: never;
    query?: never;
    url: '/users/update_session';
};

export type PutUsersUpdateSessionResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type GetColoredHeatmapByZoomByXByYPngData = {
    body?: never;
    path: {
        /**
         * Zoom level. Z coordinate in the XYZ tiling scheme
         */
        zoom: number;
        /**
         * X coordinate in the XYZ tiling scheme. Must be less than 2^zoom
         */
        x: number;
        /**
         * Y coordinate in the XYZ tiling scheme. Must be less than 2^zoom
         */
        y: number;
    };
    query?: {
        /**
         * Primary color to use in tile creation. Accepts common colors by string
         * (e.g. `color=blue`), and accepts escaped color HEX codes
         * (e.g. `color=%2386a91c`)
         *
         */
        color?: string;
        /**
         * Whether or not positional accuracy / coordinate uncertainty has been specified
         */
        acc?: boolean;
        /**
         * Captive or cultivated observations
         */
        captive?: boolean;
        /**
         * Observations whose taxa are endemic to their location
         */
        endemic?: boolean;
        /**
         * Observations that are georeferenced
         */
        geo?: boolean;
        /**
         * Observations with the deprecated `ID, Please!` flag. Note that this will return observations, but that this attribute is no longer used.
         */
        idPlease?: boolean;
        /**
         * Observations that have community identifications
         */
        identified?: boolean;
        /**
         * Observations whose taxa are introduced in their location
         *
         */
        introduced?: boolean;
        /**
         * Observations that show on map tiles
         */
        mappable?: boolean;
        /**
         * Observations whose taxa are native to their location
         */
        native?: boolean;
        /**
         * Observations whose taxa are outside their known ranges
         */
        outOfRange?: boolean;
        /**
         * Observations identified by the curator of a project. If
         * the `project_id` parameter is also specified, this will only consider
         * observations identified by curators of the specified project(s)
         *
         */
        pcid?: boolean;
        /**
         * Observations with photos
         */
        photos?: boolean;
        /**
         * Observations that have been favorited by at least one user
         *
         */
        popular?: boolean;
        /**
         * Observations with sounds
         */
        sounds?: boolean;
        /**
         * Observations of active taxon concepts
         *
         */
        taxonIsActive?: boolean;
        /**
         * Observations whose taxa are threatened in their location
         *
         */
        threatened?: boolean;
        /**
         * Observations with a `quality_grade` of either `needs_id` or
         * `research`. Equivalent to `quality_grade=needs_id,research`
         *
         */
        verifiable?: boolean;
        /**
         * License attribute of an observation must not be null
         */
        licensed?: boolean;
        /**
         * License attribute of at least one photo of an observation must not be null
         */
        photoLicensed?: boolean;
        /**
         * Observation taxon is expected nearby
         */
        expectedNearby?: boolean;
        /**
         * Must have this ID
         */
        id?: Array<string>;
        /**
         * Must not have this ID
         */
        notId?: Array<string>;
        /**
         * Observation must have this license
         */
        license?: 'cc-by' | 'cc-by-nc' | 'cc-by-nd' | 'cc-by-sa' | 'cc-by-nc-nd' | 'cc-by-nc-sa' | 'cc0';
        /**
         * Must have an observation field value with this datatype
         */
        ofvDatatype?: Array<string>;
        /**
         * Must have at least one photo with this license
         */
        photoLicense?: 'cc-by' | 'cc-by-nc' | 'cc-by-nd' | 'cc-by-sa' | 'cc-by-nc-nd' | 'cc-by-nc-sa' | 'cc0';
        /**
         * Must be observed within the place with this ID
         */
        placeId?: Array<number>;
        /**
         * Must be added to the project this ID or slug
         */
        projectId?: Array<string>;
        /**
         * Taxon must have this rank
         */
        rank?: 'kingdom' | 'phylum' | 'subphylum' | 'superclass' | 'class' | 'subclass' | 'superorder' | 'order' | 'suborder' | 'infraorder' | 'superfamily' | 'epifamily' | 'family' | 'subfamily' | 'supertribe' | 'tribe' | 'subtribe' | 'genus' | 'genushybrid' | 'species' | 'hybrid' | 'subspecies' | 'variety' | 'form';
        /**
         * Must be affiliated with the iNaturalist network website with this ID
         *
         */
        siteId?: Array<string>;
        /**
         * Must have at least one sound with this license
         */
        soundLicense?: 'cc-by' | 'cc-by-nc' | 'cc-by-nd' | 'cc-by-sa' | 'cc-by-nc-nd' | 'cc-by-nc-sa' | 'cc0';
        /**
         * Only show observations of these taxa and their descendants
         */
        taxonId?: Array<string>;
        /**
         * Exclude observations of these taxa and their descendants
         */
        withoutTaxonId?: Array<string>;
        /**
         * Taxon must have a scientific or common name matching this string
         *
         */
        taxonName?: Array<string>;
        /**
         * User must have this ID or login
         */
        userId?: Array<string>;
        /**
         * User must have this login
         */
        userLogin?: Array<string>;
        /**
         * Observations identified by a particular user
         */
        identUserId?: number;
        /**
         * Must be observed within this hour of the day
         */
        hour?: Array<string>;
        /**
         * Must be observed within this day of the month
         */
        day?: Array<string>;
        /**
         * Must be observed within this month
         */
        month?: Array<string>;
        /**
         * Must be observed within this year
         */
        year?: Array<string>;
        /**
         * Must be created within this day of the month
         */
        createdDay?: Array<string>;
        /**
         * Must be created within this month
         */
        createdMonth?: Array<string>;
        /**
         * Must be created within this year
         */
        createdYear?: Array<string>;
        /**
         * Must have an annotation using this controlled term ID
         */
        termId?: Array<number>;
        /**
         * Must have an annotation using this controlled value ID. Must be combined
         * with the `term_id` parameter
         *
         */
        termValueId?: Array<number>;
        /**
         * Exclude observations with annotations using this controlled value ID.
         *
         */
        withoutTermId?: number;
        /**
         * Exclude observations with annotations using this controlled value ID.
         * Must be combined with the `term_id` parameter
         *
         */
        withoutTermValueId?: Array<number>;
        /**
         * Must be combined with the `term_value_id` or the `without_term_value_id` parameter.
         * Must have an annotation using this controlled term ID and associated term value IDs
         * or be missing this annotation.
         *
         */
        termIdOrUnknown?: Array<number>;
        /**
         * Must have an annotation created by this user
         *
         */
        annotationUserId?: Array<string>;
        /**
         * Must have a positional accuracy above this value (meters)
         */
        accAbove?: string;
        /**
         * Must have a positional accuracy below this value (meters)
         */
        accBelow?: string;
        /**
         * Positional accuracy must be below this value (in meters) or be unknown
         */
        accBelowOrUnknown?: string;
        /**
         * Must be observed on or after this date
         */
        d1?: string;
        /**
         * Must be observed on or before this date
         */
        d2?: string;
        /**
         * Must be created at or after this time
         */
        createdD1?: string;
        /**
         * Must be created at or before this time
         */
        createdD2?: string;
        /**
         * Must be created on this date
         */
        createdOn?: string;
        /**
         * Must be observed on this date
         */
        observedOn?: string;
        /**
         * Must not be of a taxon previously observed by this user
         */
        unobservedByUserId?: number;
        /**
         * Must match the rules of the project with this ID or slug
         */
        applyProjectRulesFor?: string;
        /**
         * Taxon must have this conservation status code. If
         * the `place_id` parameter is also specified, this will only consider
         * statuses specific to that place
         *
         */
        cs?: string;
        /**
         * Taxon must have a conservation status from this authority. If
         * the `place_id` parameter is also specified, this will only consider
         * statuses specific to that place
         *
         */
        csa?: string;
        /**
         * Taxon must have this IUCN conservation status. If
         * the `place_id` parameter is also specified, this will only consider
         * statuses specific to that place
         *
         */
        csi?: 'LC' | 'NT' | 'VU' | 'EN' | 'CR' | 'EW' | 'EX';
        /**
         * Must have this geoprivacy setting
         */
        geoprivacy?: 'obscured' | 'obscured_private' | 'open' | 'private';
        /**
         * Filter observations by the most conservative geoprivacy applied by a
         * conservation status associated with one of the taxa proposed in the
         * current identifications.
         *
         */
        taxonGeoprivacy?: 'obscured' | 'obscured_private' | 'open' | 'private';
        /**
         * Must have `geoprivacy` or `taxon_geoprivacy` fields matching these values
         *
         */
        obscuration?: 'obscured' | 'private' | 'none';
        /**
         * Taxon must have this rank or lower
         */
        hrank?: 'kingdom' | 'phylum' | 'subphylum' | 'superclass' | 'class' | 'subclass' | 'superorder' | 'order' | 'suborder' | 'infraorder' | 'superfamily' | 'epifamily' | 'family' | 'subfamily' | 'supertribe' | 'tribe' | 'subtribe' | 'genus' | 'genushybrid' | 'species' | 'hybrid' | 'subspecies' | 'variety' | 'form';
        /**
         * Taxon must have this rank or higher
         */
        lrank?: 'kingdom' | 'phylum' | 'subphylum' | 'superclass' | 'class' | 'subclass' | 'superorder' | 'order' | 'suborder' | 'infraorder' | 'superfamily' | 'epifamily' | 'family' | 'subfamily' | 'supertribe' | 'tribe' | 'subtribe' | 'genus' | 'genushybrid' | 'species' | 'hybrid' | 'subspecies' | 'variety' | 'form';
        /**
         * Taxon must by within this iconic taxon
         */
        iconicTaxa?: 'Actinopterygii' | 'Animalia' | 'Amphibia' | 'Arachnida' | 'Aves' | 'Chromista' | 'Fungi' | 'Insecta' | 'Mammalia' | 'Mollusca' | 'Reptilia' | 'Plantae' | 'Protozoa' | 'unknown';
        /**
         * Must have an ID above this value
         */
        idAbove?: string;
        /**
         * Must have an ID below this value
         */
        idBelow?: string;
        /**
         * Identifications must meet these criteria
         */
        identifications?: 'most_agree' | 'most_disagree' | 'some_agree';
        /**
         * Must be within a {`radius`} kilometer circle around this lat/lng
         * (*lat, *lng, radius)
         *
         */
        lat?: number;
        /**
         * Must be within a {`radius`} kilometer circle around this lat/lng
         * (*lat, *lng, radius)
         *
         */
        lng?: number;
        /**
         * Must be within a {`radius`} kilometer circle around this lat/lng
         * (*lat, *lng, radius)
         *
         */
        radius?: string;
        /**
         * Must be within this bounding box (*nelat, *nelng, *swlat, *swlng)
         *
         */
        nelat?: number;
        /**
         * Must be within this bounding box (*nelat, *nelng, *swlat, *swlng)
         *
         */
        nelng?: number;
        /**
         * Must be within this bounding box (*nelat, *nelng, *swlat, *swlng)
         *
         */
        swlat?: number;
        /**
         * Must be within this bounding box (*nelat, *nelng, *swlat, *swlng)
         *
         */
        swlng?: number;
        /**
         * Taxon must be in the list with this ID
         */
        listId?: number;
        /**
         * Must not be in the project with this ID or slug
         */
        notInProject?: string;
        /**
         * Must not match the rules of the project with this ID or slug
         */
        notMatchingProjectRulesFor?: string;
        /**
         * Must included in this observation accuracy experiment
         */
        observationAccuracyExperimentId?: Array<number>;
        /**
         * Search observation properties. Can be combined with `search_on`
         */
        q?: string;
        /**
         * Properties to search on, when combined with `q`.
         * Searches across all properties by default
         *
         */
        searchOn?: 'names' | 'tags' | 'description' | 'place';
        /**
         * Must have this quality grade
         */
        qualityGrade?: 'casual' | 'needs_id' | 'research';
        /**
         * Must be updated since this time
         */
        updatedSince?: string;
        /**
         * See `reviewed`
         */
        viewerId?: string;
        /**
         * Observations have been reviewed by the user with ID equal to
         * the value of the `viewer_id` parameter
         *
         */
        reviewed?: boolean;
    };
    url: '/colored_heatmap/{zoom}/{x}/{y}.png';
};

export type GetColoredHeatmapByZoomByXByYPngResponses = {
    /**
     * Returns a PNG map tile image
     *
     */
    200: unknown;
};

export type GetColoredHeatmapByZoomByXByYGridJsonData = {
    body?: never;
    path: {
        /**
         * Zoom level. Z coordinate in the XYZ tiling scheme
         */
        zoom: number;
        /**
         * X coordinate in the XYZ tiling scheme. Must be less than 2^zoom
         */
        x: number;
        /**
         * Y coordinate in the XYZ tiling scheme. Must be less than 2^zoom
         */
        y: number;
    };
    query?: {
        /**
         * Primary color to use in tile creation. Accepts common colors by string
         * (e.g. `color=blue`), and accepts escaped color HEX codes
         * (e.g. `color=%2386a91c`)
         *
         */
        color?: string;
        /**
         * Whether or not positional accuracy / coordinate uncertainty has been specified
         */
        acc?: boolean;
        /**
         * Captive or cultivated observations
         */
        captive?: boolean;
        /**
         * Observations whose taxa are endemic to their location
         */
        endemic?: boolean;
        /**
         * Observations that are georeferenced
         */
        geo?: boolean;
        /**
         * Observations with the deprecated `ID, Please!` flag. Note that this will return observations, but that this attribute is no longer used.
         */
        idPlease?: boolean;
        /**
         * Observations that have community identifications
         */
        identified?: boolean;
        /**
         * Observations whose taxa are introduced in their location
         *
         */
        introduced?: boolean;
        /**
         * Observations that show on map tiles
         */
        mappable?: boolean;
        /**
         * Observations whose taxa are native to their location
         */
        native?: boolean;
        /**
         * Observations whose taxa are outside their known ranges
         */
        outOfRange?: boolean;
        /**
         * Observations identified by the curator of a project. If
         * the `project_id` parameter is also specified, this will only consider
         * observations identified by curators of the specified project(s)
         *
         */
        pcid?: boolean;
        /**
         * Observations with photos
         */
        photos?: boolean;
        /**
         * Observations that have been favorited by at least one user
         *
         */
        popular?: boolean;
        /**
         * Observations with sounds
         */
        sounds?: boolean;
        /**
         * Observations of active taxon concepts
         *
         */
        taxonIsActive?: boolean;
        /**
         * Observations whose taxa are threatened in their location
         *
         */
        threatened?: boolean;
        /**
         * Observations with a `quality_grade` of either `needs_id` or
         * `research`. Equivalent to `quality_grade=needs_id,research`
         *
         */
        verifiable?: boolean;
        /**
         * License attribute of an observation must not be null
         */
        licensed?: boolean;
        /**
         * License attribute of at least one photo of an observation must not be null
         */
        photoLicensed?: boolean;
        /**
         * Observation taxon is expected nearby
         */
        expectedNearby?: boolean;
        /**
         * Must have this ID
         */
        id?: Array<string>;
        /**
         * Must not have this ID
         */
        notId?: Array<string>;
        /**
         * Observation must have this license
         */
        license?: 'cc-by' | 'cc-by-nc' | 'cc-by-nd' | 'cc-by-sa' | 'cc-by-nc-nd' | 'cc-by-nc-sa' | 'cc0';
        /**
         * Must have an observation field value with this datatype
         */
        ofvDatatype?: Array<string>;
        /**
         * Must have at least one photo with this license
         */
        photoLicense?: 'cc-by' | 'cc-by-nc' | 'cc-by-nd' | 'cc-by-sa' | 'cc-by-nc-nd' | 'cc-by-nc-sa' | 'cc0';
        /**
         * Must be observed within the place with this ID
         */
        placeId?: Array<number>;
        /**
         * Must be added to the project this ID or slug
         */
        projectId?: Array<string>;
        /**
         * Taxon must have this rank
         */
        rank?: 'kingdom' | 'phylum' | 'subphylum' | 'superclass' | 'class' | 'subclass' | 'superorder' | 'order' | 'suborder' | 'infraorder' | 'superfamily' | 'epifamily' | 'family' | 'subfamily' | 'supertribe' | 'tribe' | 'subtribe' | 'genus' | 'genushybrid' | 'species' | 'hybrid' | 'subspecies' | 'variety' | 'form';
        /**
         * Must be affiliated with the iNaturalist network website with this ID
         *
         */
        siteId?: Array<string>;
        /**
         * Must have at least one sound with this license
         */
        soundLicense?: 'cc-by' | 'cc-by-nc' | 'cc-by-nd' | 'cc-by-sa' | 'cc-by-nc-nd' | 'cc-by-nc-sa' | 'cc0';
        /**
         * Only show observations of these taxa and their descendants
         */
        taxonId?: Array<string>;
        /**
         * Exclude observations of these taxa and their descendants
         */
        withoutTaxonId?: Array<string>;
        /**
         * Taxon must have a scientific or common name matching this string
         *
         */
        taxonName?: Array<string>;
        /**
         * User must have this ID or login
         */
        userId?: Array<string>;
        /**
         * User must have this login
         */
        userLogin?: Array<string>;
        /**
         * Observations identified by a particular user
         */
        identUserId?: number;
        /**
         * Must be observed within this hour of the day
         */
        hour?: Array<string>;
        /**
         * Must be observed within this day of the month
         */
        day?: Array<string>;
        /**
         * Must be observed within this month
         */
        month?: Array<string>;
        /**
         * Must be observed within this year
         */
        year?: Array<string>;
        /**
         * Must be created within this day of the month
         */
        createdDay?: Array<string>;
        /**
         * Must be created within this month
         */
        createdMonth?: Array<string>;
        /**
         * Must be created within this year
         */
        createdYear?: Array<string>;
        /**
         * Must have an annotation using this controlled term ID
         */
        termId?: Array<number>;
        /**
         * Must have an annotation using this controlled value ID. Must be combined
         * with the `term_id` parameter
         *
         */
        termValueId?: Array<number>;
        /**
         * Exclude observations with annotations using this controlled value ID.
         *
         */
        withoutTermId?: number;
        /**
         * Exclude observations with annotations using this controlled value ID.
         * Must be combined with the `term_id` parameter
         *
         */
        withoutTermValueId?: Array<number>;
        /**
         * Must be combined with the `term_value_id` or the `without_term_value_id` parameter.
         * Must have an annotation using this controlled term ID and associated term value IDs
         * or be missing this annotation.
         *
         */
        termIdOrUnknown?: Array<number>;
        /**
         * Must have an annotation created by this user
         *
         */
        annotationUserId?: Array<string>;
        /**
         * Must have a positional accuracy above this value (meters)
         */
        accAbove?: string;
        /**
         * Must have a positional accuracy below this value (meters)
         */
        accBelow?: string;
        /**
         * Positional accuracy must be below this value (in meters) or be unknown
         */
        accBelowOrUnknown?: string;
        /**
         * Must be observed on or after this date
         */
        d1?: string;
        /**
         * Must be observed on or before this date
         */
        d2?: string;
        /**
         * Must be created at or after this time
         */
        createdD1?: string;
        /**
         * Must be created at or before this time
         */
        createdD2?: string;
        /**
         * Must be created on this date
         */
        createdOn?: string;
        /**
         * Must be observed on this date
         */
        observedOn?: string;
        /**
         * Must not be of a taxon previously observed by this user
         */
        unobservedByUserId?: number;
        /**
         * Must match the rules of the project with this ID or slug
         */
        applyProjectRulesFor?: string;
        /**
         * Taxon must have this conservation status code. If
         * the `place_id` parameter is also specified, this will only consider
         * statuses specific to that place
         *
         */
        cs?: string;
        /**
         * Taxon must have a conservation status from this authority. If
         * the `place_id` parameter is also specified, this will only consider
         * statuses specific to that place
         *
         */
        csa?: string;
        /**
         * Taxon must have this IUCN conservation status. If
         * the `place_id` parameter is also specified, this will only consider
         * statuses specific to that place
         *
         */
        csi?: 'LC' | 'NT' | 'VU' | 'EN' | 'CR' | 'EW' | 'EX';
        /**
         * Must have this geoprivacy setting
         */
        geoprivacy?: 'obscured' | 'obscured_private' | 'open' | 'private';
        /**
         * Filter observations by the most conservative geoprivacy applied by a
         * conservation status associated with one of the taxa proposed in the
         * current identifications.
         *
         */
        taxonGeoprivacy?: 'obscured' | 'obscured_private' | 'open' | 'private';
        /**
         * Must have `geoprivacy` or `taxon_geoprivacy` fields matching these values
         *
         */
        obscuration?: 'obscured' | 'private' | 'none';
        /**
         * Taxon must have this rank or lower
         */
        hrank?: 'kingdom' | 'phylum' | 'subphylum' | 'superclass' | 'class' | 'subclass' | 'superorder' | 'order' | 'suborder' | 'infraorder' | 'superfamily' | 'epifamily' | 'family' | 'subfamily' | 'supertribe' | 'tribe' | 'subtribe' | 'genus' | 'genushybrid' | 'species' | 'hybrid' | 'subspecies' | 'variety' | 'form';
        /**
         * Taxon must have this rank or higher
         */
        lrank?: 'kingdom' | 'phylum' | 'subphylum' | 'superclass' | 'class' | 'subclass' | 'superorder' | 'order' | 'suborder' | 'infraorder' | 'superfamily' | 'epifamily' | 'family' | 'subfamily' | 'supertribe' | 'tribe' | 'subtribe' | 'genus' | 'genushybrid' | 'species' | 'hybrid' | 'subspecies' | 'variety' | 'form';
        /**
         * Taxon must by within this iconic taxon
         */
        iconicTaxa?: 'Actinopterygii' | 'Animalia' | 'Amphibia' | 'Arachnida' | 'Aves' | 'Chromista' | 'Fungi' | 'Insecta' | 'Mammalia' | 'Mollusca' | 'Reptilia' | 'Plantae' | 'Protozoa' | 'unknown';
        /**
         * Must have an ID above this value
         */
        idAbove?: string;
        /**
         * Must have an ID below this value
         */
        idBelow?: string;
        /**
         * Identifications must meet these criteria
         */
        identifications?: 'most_agree' | 'most_disagree' | 'some_agree';
        /**
         * Must be within a {`radius`} kilometer circle around this lat/lng
         * (*lat, *lng, radius)
         *
         */
        lat?: number;
        /**
         * Must be within a {`radius`} kilometer circle around this lat/lng
         * (*lat, *lng, radius)
         *
         */
        lng?: number;
        /**
         * Must be within a {`radius`} kilometer circle around this lat/lng
         * (*lat, *lng, radius)
         *
         */
        radius?: string;
        /**
         * Must be within this bounding box (*nelat, *nelng, *swlat, *swlng)
         *
         */
        nelat?: number;
        /**
         * Must be within this bounding box (*nelat, *nelng, *swlat, *swlng)
         *
         */
        nelng?: number;
        /**
         * Must be within this bounding box (*nelat, *nelng, *swlat, *swlng)
         *
         */
        swlat?: number;
        /**
         * Must be within this bounding box (*nelat, *nelng, *swlat, *swlng)
         *
         */
        swlng?: number;
        /**
         * Taxon must be in the list with this ID
         */
        listId?: number;
        /**
         * Must not be in the project with this ID or slug
         */
        notInProject?: string;
        /**
         * Must not match the rules of the project with this ID or slug
         */
        notMatchingProjectRulesFor?: string;
        /**
         * Must included in this observation accuracy experiment
         */
        observationAccuracyExperimentId?: Array<number>;
        /**
         * Search observation properties. Can be combined with `search_on`
         */
        q?: string;
        /**
         * Properties to search on, when combined with `q`.
         * Searches across all properties by default
         *
         */
        searchOn?: 'names' | 'tags' | 'description' | 'place';
        /**
         * Must have this quality grade
         */
        qualityGrade?: 'casual' | 'needs_id' | 'research';
        /**
         * Must be updated since this time
         */
        updatedSince?: string;
        /**
         * See `reviewed`
         */
        viewerId?: string;
        /**
         * Observations have been reviewed by the user with ID equal to
         * the value of the `viewer_id` parameter
         *
         */
        reviewed?: boolean;
    };
    url: '/colored_heatmap/{zoom}/{x}/{y}.grid.json';
};

export type GetColoredHeatmapByZoomByXByYGridJsonErrors = {
    /**
     * Unexpected error
     */
    default: _Error;
};

export type GetColoredHeatmapByZoomByXByYGridJsonError = GetColoredHeatmapByZoomByXByYGridJsonErrors[keyof GetColoredHeatmapByZoomByXByYGridJsonErrors];

export type GetColoredHeatmapByZoomByXByYGridJsonResponses = {
    /**
     * Returns a UTFGrid
     *
     */
    200: UtfGridResponse;
};

export type GetColoredHeatmapByZoomByXByYGridJsonResponse = GetColoredHeatmapByZoomByXByYGridJsonResponses[keyof GetColoredHeatmapByZoomByXByYGridJsonResponses];

export type GetGridByZoomByXByYPngData = {
    body?: never;
    path: {
        /**
         * Zoom level. Z coordinate in the XYZ tiling scheme
         */
        zoom: number;
        /**
         * X coordinate in the XYZ tiling scheme. Must be less than 2^zoom
         */
        x: number;
        /**
         * Y coordinate in the XYZ tiling scheme. Must be less than 2^zoom
         */
        y: number;
    };
    query?: {
        /**
         * Primary color to use in tile creation. Accepts common colors by string
         * (e.g. `color=blue`), and accepts escaped color HEX codes
         * (e.g. `color=%2386a91c`)
         *
         */
        color?: string;
        /**
         * Whether or not positional accuracy / coordinate uncertainty has been specified
         */
        acc?: boolean;
        /**
         * Captive or cultivated observations
         */
        captive?: boolean;
        /**
         * Observations whose taxa are endemic to their location
         */
        endemic?: boolean;
        /**
         * Observations that are georeferenced
         */
        geo?: boolean;
        /**
         * Observations with the deprecated `ID, Please!` flag. Note that this will return observations, but that this attribute is no longer used.
         */
        idPlease?: boolean;
        /**
         * Observations that have community identifications
         */
        identified?: boolean;
        /**
         * Observations whose taxa are introduced in their location
         *
         */
        introduced?: boolean;
        /**
         * Observations that show on map tiles
         */
        mappable?: boolean;
        /**
         * Observations whose taxa are native to their location
         */
        native?: boolean;
        /**
         * Observations whose taxa are outside their known ranges
         */
        outOfRange?: boolean;
        /**
         * Observations identified by the curator of a project. If
         * the `project_id` parameter is also specified, this will only consider
         * observations identified by curators of the specified project(s)
         *
         */
        pcid?: boolean;
        /**
         * Observations with photos
         */
        photos?: boolean;
        /**
         * Observations that have been favorited by at least one user
         *
         */
        popular?: boolean;
        /**
         * Observations with sounds
         */
        sounds?: boolean;
        /**
         * Observations of active taxon concepts
         *
         */
        taxonIsActive?: boolean;
        /**
         * Observations whose taxa are threatened in their location
         *
         */
        threatened?: boolean;
        /**
         * Observations with a `quality_grade` of either `needs_id` or
         * `research`. Equivalent to `quality_grade=needs_id,research`
         *
         */
        verifiable?: boolean;
        /**
         * License attribute of an observation must not be null
         */
        licensed?: boolean;
        /**
         * License attribute of at least one photo of an observation must not be null
         */
        photoLicensed?: boolean;
        /**
         * Observation taxon is expected nearby
         */
        expectedNearby?: boolean;
        /**
         * Must have this ID
         */
        id?: Array<string>;
        /**
         * Must not have this ID
         */
        notId?: Array<string>;
        /**
         * Observation must have this license
         */
        license?: 'cc-by' | 'cc-by-nc' | 'cc-by-nd' | 'cc-by-sa' | 'cc-by-nc-nd' | 'cc-by-nc-sa' | 'cc0';
        /**
         * Must have an observation field value with this datatype
         */
        ofvDatatype?: Array<string>;
        /**
         * Must have at least one photo with this license
         */
        photoLicense?: 'cc-by' | 'cc-by-nc' | 'cc-by-nd' | 'cc-by-sa' | 'cc-by-nc-nd' | 'cc-by-nc-sa' | 'cc0';
        /**
         * Must be observed within the place with this ID
         */
        placeId?: Array<number>;
        /**
         * Must be added to the project this ID or slug
         */
        projectId?: Array<string>;
        /**
         * Taxon must have this rank
         */
        rank?: 'kingdom' | 'phylum' | 'subphylum' | 'superclass' | 'class' | 'subclass' | 'superorder' | 'order' | 'suborder' | 'infraorder' | 'superfamily' | 'epifamily' | 'family' | 'subfamily' | 'supertribe' | 'tribe' | 'subtribe' | 'genus' | 'genushybrid' | 'species' | 'hybrid' | 'subspecies' | 'variety' | 'form';
        /**
         * Must be affiliated with the iNaturalist network website with this ID
         *
         */
        siteId?: Array<string>;
        /**
         * Must have at least one sound with this license
         */
        soundLicense?: 'cc-by' | 'cc-by-nc' | 'cc-by-nd' | 'cc-by-sa' | 'cc-by-nc-nd' | 'cc-by-nc-sa' | 'cc0';
        /**
         * Only show observations of these taxa and their descendants
         */
        taxonId?: Array<string>;
        /**
         * Exclude observations of these taxa and their descendants
         */
        withoutTaxonId?: Array<string>;
        /**
         * Taxon must have a scientific or common name matching this string
         *
         */
        taxonName?: Array<string>;
        /**
         * User must have this ID or login
         */
        userId?: Array<string>;
        /**
         * User must have this login
         */
        userLogin?: Array<string>;
        /**
         * Observations identified by a particular user
         */
        identUserId?: number;
        /**
         * Must be observed within this hour of the day
         */
        hour?: Array<string>;
        /**
         * Must be observed within this day of the month
         */
        day?: Array<string>;
        /**
         * Must be observed within this month
         */
        month?: Array<string>;
        /**
         * Must be observed within this year
         */
        year?: Array<string>;
        /**
         * Must be created within this day of the month
         */
        createdDay?: Array<string>;
        /**
         * Must be created within this month
         */
        createdMonth?: Array<string>;
        /**
         * Must be created within this year
         */
        createdYear?: Array<string>;
        /**
         * Must have an annotation using this controlled term ID
         */
        termId?: Array<number>;
        /**
         * Must have an annotation using this controlled value ID. Must be combined
         * with the `term_id` parameter
         *
         */
        termValueId?: Array<number>;
        /**
         * Exclude observations with annotations using this controlled value ID.
         *
         */
        withoutTermId?: number;
        /**
         * Exclude observations with annotations using this controlled value ID.
         * Must be combined with the `term_id` parameter
         *
         */
        withoutTermValueId?: Array<number>;
        /**
         * Must be combined with the `term_value_id` or the `without_term_value_id` parameter.
         * Must have an annotation using this controlled term ID and associated term value IDs
         * or be missing this annotation.
         *
         */
        termIdOrUnknown?: Array<number>;
        /**
         * Must have an annotation created by this user
         *
         */
        annotationUserId?: Array<string>;
        /**
         * Must have a positional accuracy above this value (meters)
         */
        accAbove?: string;
        /**
         * Must have a positional accuracy below this value (meters)
         */
        accBelow?: string;
        /**
         * Positional accuracy must be below this value (in meters) or be unknown
         */
        accBelowOrUnknown?: string;
        /**
         * Must be observed on or after this date
         */
        d1?: string;
        /**
         * Must be observed on or before this date
         */
        d2?: string;
        /**
         * Must be created at or after this time
         */
        createdD1?: string;
        /**
         * Must be created at or before this time
         */
        createdD2?: string;
        /**
         * Must be created on this date
         */
        createdOn?: string;
        /**
         * Must be observed on this date
         */
        observedOn?: string;
        /**
         * Must not be of a taxon previously observed by this user
         */
        unobservedByUserId?: number;
        /**
         * Must match the rules of the project with this ID or slug
         */
        applyProjectRulesFor?: string;
        /**
         * Taxon must have this conservation status code. If
         * the `place_id` parameter is also specified, this will only consider
         * statuses specific to that place
         *
         */
        cs?: string;
        /**
         * Taxon must have a conservation status from this authority. If
         * the `place_id` parameter is also specified, this will only consider
         * statuses specific to that place
         *
         */
        csa?: string;
        /**
         * Taxon must have this IUCN conservation status. If
         * the `place_id` parameter is also specified, this will only consider
         * statuses specific to that place
         *
         */
        csi?: 'LC' | 'NT' | 'VU' | 'EN' | 'CR' | 'EW' | 'EX';
        /**
         * Must have this geoprivacy setting
         */
        geoprivacy?: 'obscured' | 'obscured_private' | 'open' | 'private';
        /**
         * Filter observations by the most conservative geoprivacy applied by a
         * conservation status associated with one of the taxa proposed in the
         * current identifications.
         *
         */
        taxonGeoprivacy?: 'obscured' | 'obscured_private' | 'open' | 'private';
        /**
         * Must have `geoprivacy` or `taxon_geoprivacy` fields matching these values
         *
         */
        obscuration?: 'obscured' | 'private' | 'none';
        /**
         * Taxon must have this rank or lower
         */
        hrank?: 'kingdom' | 'phylum' | 'subphylum' | 'superclass' | 'class' | 'subclass' | 'superorder' | 'order' | 'suborder' | 'infraorder' | 'superfamily' | 'epifamily' | 'family' | 'subfamily' | 'supertribe' | 'tribe' | 'subtribe' | 'genus' | 'genushybrid' | 'species' | 'hybrid' | 'subspecies' | 'variety' | 'form';
        /**
         * Taxon must have this rank or higher
         */
        lrank?: 'kingdom' | 'phylum' | 'subphylum' | 'superclass' | 'class' | 'subclass' | 'superorder' | 'order' | 'suborder' | 'infraorder' | 'superfamily' | 'epifamily' | 'family' | 'subfamily' | 'supertribe' | 'tribe' | 'subtribe' | 'genus' | 'genushybrid' | 'species' | 'hybrid' | 'subspecies' | 'variety' | 'form';
        /**
         * Taxon must by within this iconic taxon
         */
        iconicTaxa?: 'Actinopterygii' | 'Animalia' | 'Amphibia' | 'Arachnida' | 'Aves' | 'Chromista' | 'Fungi' | 'Insecta' | 'Mammalia' | 'Mollusca' | 'Reptilia' | 'Plantae' | 'Protozoa' | 'unknown';
        /**
         * Must have an ID above this value
         */
        idAbove?: string;
        /**
         * Must have an ID below this value
         */
        idBelow?: string;
        /**
         * Identifications must meet these criteria
         */
        identifications?: 'most_agree' | 'most_disagree' | 'some_agree';
        /**
         * Must be within a {`radius`} kilometer circle around this lat/lng
         * (*lat, *lng, radius)
         *
         */
        lat?: number;
        /**
         * Must be within a {`radius`} kilometer circle around this lat/lng
         * (*lat, *lng, radius)
         *
         */
        lng?: number;
        /**
         * Must be within a {`radius`} kilometer circle around this lat/lng
         * (*lat, *lng, radius)
         *
         */
        radius?: string;
        /**
         * Must be within this bounding box (*nelat, *nelng, *swlat, *swlng)
         *
         */
        nelat?: number;
        /**
         * Must be within this bounding box (*nelat, *nelng, *swlat, *swlng)
         *
         */
        nelng?: number;
        /**
         * Must be within this bounding box (*nelat, *nelng, *swlat, *swlng)
         *
         */
        swlat?: number;
        /**
         * Must be within this bounding box (*nelat, *nelng, *swlat, *swlng)
         *
         */
        swlng?: number;
        /**
         * Taxon must be in the list with this ID
         */
        listId?: number;
        /**
         * Must not be in the project with this ID or slug
         */
        notInProject?: string;
        /**
         * Must not match the rules of the project with this ID or slug
         */
        notMatchingProjectRulesFor?: string;
        /**
         * Must included in this observation accuracy experiment
         */
        observationAccuracyExperimentId?: Array<number>;
        /**
         * Search observation properties. Can be combined with `search_on`
         */
        q?: string;
        /**
         * Properties to search on, when combined with `q`.
         * Searches across all properties by default
         *
         */
        searchOn?: 'names' | 'tags' | 'description' | 'place';
        /**
         * Must have this quality grade
         */
        qualityGrade?: 'casual' | 'needs_id' | 'research';
        /**
         * Must be updated since this time
         */
        updatedSince?: string;
        /**
         * See `reviewed`
         */
        viewerId?: string;
        /**
         * Observations have been reviewed by the user with ID equal to
         * the value of the `viewer_id` parameter
         *
         */
        reviewed?: boolean;
    };
    url: '/grid/{zoom}/{x}/{y}.png';
};

export type GetGridByZoomByXByYPngResponses = {
    /**
     * Returns a PNG map tile image
     *
     */
    200: unknown;
};

export type GetGridByZoomByXByYGridJsonData = {
    body?: never;
    path: {
        /**
         * Zoom level. Z coordinate in the XYZ tiling scheme
         */
        zoom: number;
        /**
         * X coordinate in the XYZ tiling scheme. Must be less than 2^zoom
         */
        x: number;
        /**
         * Y coordinate in the XYZ tiling scheme. Must be less than 2^zoom
         */
        y: number;
    };
    query?: {
        /**
         * Primary color to use in tile creation. Accepts common colors by string
         * (e.g. `color=blue`), and accepts escaped color HEX codes
         * (e.g. `color=%2386a91c`)
         *
         */
        color?: string;
        /**
         * Whether or not positional accuracy / coordinate uncertainty has been specified
         */
        acc?: boolean;
        /**
         * Captive or cultivated observations
         */
        captive?: boolean;
        /**
         * Observations whose taxa are endemic to their location
         */
        endemic?: boolean;
        /**
         * Observations that are georeferenced
         */
        geo?: boolean;
        /**
         * Observations with the deprecated `ID, Please!` flag. Note that this will return observations, but that this attribute is no longer used.
         */
        idPlease?: boolean;
        /**
         * Observations that have community identifications
         */
        identified?: boolean;
        /**
         * Observations whose taxa are introduced in their location
         *
         */
        introduced?: boolean;
        /**
         * Observations that show on map tiles
         */
        mappable?: boolean;
        /**
         * Observations whose taxa are native to their location
         */
        native?: boolean;
        /**
         * Observations whose taxa are outside their known ranges
         */
        outOfRange?: boolean;
        /**
         * Observations identified by the curator of a project. If
         * the `project_id` parameter is also specified, this will only consider
         * observations identified by curators of the specified project(s)
         *
         */
        pcid?: boolean;
        /**
         * Observations with photos
         */
        photos?: boolean;
        /**
         * Observations that have been favorited by at least one user
         *
         */
        popular?: boolean;
        /**
         * Observations with sounds
         */
        sounds?: boolean;
        /**
         * Observations of active taxon concepts
         *
         */
        taxonIsActive?: boolean;
        /**
         * Observations whose taxa are threatened in their location
         *
         */
        threatened?: boolean;
        /**
         * Observations with a `quality_grade` of either `needs_id` or
         * `research`. Equivalent to `quality_grade=needs_id,research`
         *
         */
        verifiable?: boolean;
        /**
         * License attribute of an observation must not be null
         */
        licensed?: boolean;
        /**
         * License attribute of at least one photo of an observation must not be null
         */
        photoLicensed?: boolean;
        /**
         * Observation taxon is expected nearby
         */
        expectedNearby?: boolean;
        /**
         * Must have this ID
         */
        id?: Array<string>;
        /**
         * Must not have this ID
         */
        notId?: Array<string>;
        /**
         * Observation must have this license
         */
        license?: 'cc-by' | 'cc-by-nc' | 'cc-by-nd' | 'cc-by-sa' | 'cc-by-nc-nd' | 'cc-by-nc-sa' | 'cc0';
        /**
         * Must have an observation field value with this datatype
         */
        ofvDatatype?: Array<string>;
        /**
         * Must have at least one photo with this license
         */
        photoLicense?: 'cc-by' | 'cc-by-nc' | 'cc-by-nd' | 'cc-by-sa' | 'cc-by-nc-nd' | 'cc-by-nc-sa' | 'cc0';
        /**
         * Must be observed within the place with this ID
         */
        placeId?: Array<number>;
        /**
         * Must be added to the project this ID or slug
         */
        projectId?: Array<string>;
        /**
         * Taxon must have this rank
         */
        rank?: 'kingdom' | 'phylum' | 'subphylum' | 'superclass' | 'class' | 'subclass' | 'superorder' | 'order' | 'suborder' | 'infraorder' | 'superfamily' | 'epifamily' | 'family' | 'subfamily' | 'supertribe' | 'tribe' | 'subtribe' | 'genus' | 'genushybrid' | 'species' | 'hybrid' | 'subspecies' | 'variety' | 'form';
        /**
         * Must be affiliated with the iNaturalist network website with this ID
         *
         */
        siteId?: Array<string>;
        /**
         * Must have at least one sound with this license
         */
        soundLicense?: 'cc-by' | 'cc-by-nc' | 'cc-by-nd' | 'cc-by-sa' | 'cc-by-nc-nd' | 'cc-by-nc-sa' | 'cc0';
        /**
         * Only show observations of these taxa and their descendants
         */
        taxonId?: Array<string>;
        /**
         * Exclude observations of these taxa and their descendants
         */
        withoutTaxonId?: Array<string>;
        /**
         * Taxon must have a scientific or common name matching this string
         *
         */
        taxonName?: Array<string>;
        /**
         * User must have this ID or login
         */
        userId?: Array<string>;
        /**
         * User must have this login
         */
        userLogin?: Array<string>;
        /**
         * Observations identified by a particular user
         */
        identUserId?: number;
        /**
         * Must be observed within this hour of the day
         */
        hour?: Array<string>;
        /**
         * Must be observed within this day of the month
         */
        day?: Array<string>;
        /**
         * Must be observed within this month
         */
        month?: Array<string>;
        /**
         * Must be observed within this year
         */
        year?: Array<string>;
        /**
         * Must be created within this day of the month
         */
        createdDay?: Array<string>;
        /**
         * Must be created within this month
         */
        createdMonth?: Array<string>;
        /**
         * Must be created within this year
         */
        createdYear?: Array<string>;
        /**
         * Must have an annotation using this controlled term ID
         */
        termId?: Array<number>;
        /**
         * Must have an annotation using this controlled value ID. Must be combined
         * with the `term_id` parameter
         *
         */
        termValueId?: Array<number>;
        /**
         * Exclude observations with annotations using this controlled value ID.
         *
         */
        withoutTermId?: number;
        /**
         * Exclude observations with annotations using this controlled value ID.
         * Must be combined with the `term_id` parameter
         *
         */
        withoutTermValueId?: Array<number>;
        /**
         * Must be combined with the `term_value_id` or the `without_term_value_id` parameter.
         * Must have an annotation using this controlled term ID and associated term value IDs
         * or be missing this annotation.
         *
         */
        termIdOrUnknown?: Array<number>;
        /**
         * Must have an annotation created by this user
         *
         */
        annotationUserId?: Array<string>;
        /**
         * Must have a positional accuracy above this value (meters)
         */
        accAbove?: string;
        /**
         * Must have a positional accuracy below this value (meters)
         */
        accBelow?: string;
        /**
         * Positional accuracy must be below this value (in meters) or be unknown
         */
        accBelowOrUnknown?: string;
        /**
         * Must be observed on or after this date
         */
        d1?: string;
        /**
         * Must be observed on or before this date
         */
        d2?: string;
        /**
         * Must be created at or after this time
         */
        createdD1?: string;
        /**
         * Must be created at or before this time
         */
        createdD2?: string;
        /**
         * Must be created on this date
         */
        createdOn?: string;
        /**
         * Must be observed on this date
         */
        observedOn?: string;
        /**
         * Must not be of a taxon previously observed by this user
         */
        unobservedByUserId?: number;
        /**
         * Must match the rules of the project with this ID or slug
         */
        applyProjectRulesFor?: string;
        /**
         * Taxon must have this conservation status code. If
         * the `place_id` parameter is also specified, this will only consider
         * statuses specific to that place
         *
         */
        cs?: string;
        /**
         * Taxon must have a conservation status from this authority. If
         * the `place_id` parameter is also specified, this will only consider
         * statuses specific to that place
         *
         */
        csa?: string;
        /**
         * Taxon must have this IUCN conservation status. If
         * the `place_id` parameter is also specified, this will only consider
         * statuses specific to that place
         *
         */
        csi?: 'LC' | 'NT' | 'VU' | 'EN' | 'CR' | 'EW' | 'EX';
        /**
         * Must have this geoprivacy setting
         */
        geoprivacy?: 'obscured' | 'obscured_private' | 'open' | 'private';
        /**
         * Filter observations by the most conservative geoprivacy applied by a
         * conservation status associated with one of the taxa proposed in the
         * current identifications.
         *
         */
        taxonGeoprivacy?: 'obscured' | 'obscured_private' | 'open' | 'private';
        /**
         * Must have `geoprivacy` or `taxon_geoprivacy` fields matching these values
         *
         */
        obscuration?: 'obscured' | 'private' | 'none';
        /**
         * Taxon must have this rank or lower
         */
        hrank?: 'kingdom' | 'phylum' | 'subphylum' | 'superclass' | 'class' | 'subclass' | 'superorder' | 'order' | 'suborder' | 'infraorder' | 'superfamily' | 'epifamily' | 'family' | 'subfamily' | 'supertribe' | 'tribe' | 'subtribe' | 'genus' | 'genushybrid' | 'species' | 'hybrid' | 'subspecies' | 'variety' | 'form';
        /**
         * Taxon must have this rank or higher
         */
        lrank?: 'kingdom' | 'phylum' | 'subphylum' | 'superclass' | 'class' | 'subclass' | 'superorder' | 'order' | 'suborder' | 'infraorder' | 'superfamily' | 'epifamily' | 'family' | 'subfamily' | 'supertribe' | 'tribe' | 'subtribe' | 'genus' | 'genushybrid' | 'species' | 'hybrid' | 'subspecies' | 'variety' | 'form';
        /**
         * Taxon must by within this iconic taxon
         */
        iconicTaxa?: 'Actinopterygii' | 'Animalia' | 'Amphibia' | 'Arachnida' | 'Aves' | 'Chromista' | 'Fungi' | 'Insecta' | 'Mammalia' | 'Mollusca' | 'Reptilia' | 'Plantae' | 'Protozoa' | 'unknown';
        /**
         * Must have an ID above this value
         */
        idAbove?: string;
        /**
         * Must have an ID below this value
         */
        idBelow?: string;
        /**
         * Identifications must meet these criteria
         */
        identifications?: 'most_agree' | 'most_disagree' | 'some_agree';
        /**
         * Must be within a {`radius`} kilometer circle around this lat/lng
         * (*lat, *lng, radius)
         *
         */
        lat?: number;
        /**
         * Must be within a {`radius`} kilometer circle around this lat/lng
         * (*lat, *lng, radius)
         *
         */
        lng?: number;
        /**
         * Must be within a {`radius`} kilometer circle around this lat/lng
         * (*lat, *lng, radius)
         *
         */
        radius?: string;
        /**
         * Must be within this bounding box (*nelat, *nelng, *swlat, *swlng)
         *
         */
        nelat?: number;
        /**
         * Must be within this bounding box (*nelat, *nelng, *swlat, *swlng)
         *
         */
        nelng?: number;
        /**
         * Must be within this bounding box (*nelat, *nelng, *swlat, *swlng)
         *
         */
        swlat?: number;
        /**
         * Must be within this bounding box (*nelat, *nelng, *swlat, *swlng)
         *
         */
        swlng?: number;
        /**
         * Taxon must be in the list with this ID
         */
        listId?: number;
        /**
         * Must not be in the project with this ID or slug
         */
        notInProject?: string;
        /**
         * Must not match the rules of the project with this ID or slug
         */
        notMatchingProjectRulesFor?: string;
        /**
         * Must included in this observation accuracy experiment
         */
        observationAccuracyExperimentId?: Array<number>;
        /**
         * Search observation properties. Can be combined with `search_on`
         */
        q?: string;
        /**
         * Properties to search on, when combined with `q`.
         * Searches across all properties by default
         *
         */
        searchOn?: 'names' | 'tags' | 'description' | 'place';
        /**
         * Must have this quality grade
         */
        qualityGrade?: 'casual' | 'needs_id' | 'research';
        /**
         * Must be updated since this time
         */
        updatedSince?: string;
        /**
         * See `reviewed`
         */
        viewerId?: string;
        /**
         * Observations have been reviewed by the user with ID equal to
         * the value of the `viewer_id` parameter
         *
         */
        reviewed?: boolean;
    };
    url: '/grid/{zoom}/{x}/{y}.grid.json';
};

export type GetGridByZoomByXByYGridJsonErrors = {
    /**
     * Unexpected error
     */
    default: _Error;
};

export type GetGridByZoomByXByYGridJsonError = GetGridByZoomByXByYGridJsonErrors[keyof GetGridByZoomByXByYGridJsonErrors];

export type GetGridByZoomByXByYGridJsonResponses = {
    /**
     * Returns a UTFGrid
     *
     */
    200: UtfGridResponse;
};

export type GetGridByZoomByXByYGridJsonResponse = GetGridByZoomByXByYGridJsonResponses[keyof GetGridByZoomByXByYGridJsonResponses];

export type GetHeatmapByZoomByXByYPngData = {
    body?: never;
    path: {
        /**
         * Zoom level. Z coordinate in the XYZ tiling scheme
         */
        zoom: number;
        /**
         * X coordinate in the XYZ tiling scheme. Must be less than 2^zoom
         */
        x: number;
        /**
         * Y coordinate in the XYZ tiling scheme. Must be less than 2^zoom
         */
        y: number;
    };
    query?: {
        /**
         * Primary color to use in tile creation. Accepts common colors by string
         * (e.g. `color=blue`), and accepts escaped color HEX codes
         * (e.g. `color=%2386a91c`)
         *
         */
        color?: string;
        /**
         * Whether or not positional accuracy / coordinate uncertainty has been specified
         */
        acc?: boolean;
        /**
         * Captive or cultivated observations
         */
        captive?: boolean;
        /**
         * Observations whose taxa are endemic to their location
         */
        endemic?: boolean;
        /**
         * Observations that are georeferenced
         */
        geo?: boolean;
        /**
         * Observations with the deprecated `ID, Please!` flag. Note that this will return observations, but that this attribute is no longer used.
         */
        idPlease?: boolean;
        /**
         * Observations that have community identifications
         */
        identified?: boolean;
        /**
         * Observations whose taxa are introduced in their location
         *
         */
        introduced?: boolean;
        /**
         * Observations that show on map tiles
         */
        mappable?: boolean;
        /**
         * Observations whose taxa are native to their location
         */
        native?: boolean;
        /**
         * Observations whose taxa are outside their known ranges
         */
        outOfRange?: boolean;
        /**
         * Observations identified by the curator of a project. If
         * the `project_id` parameter is also specified, this will only consider
         * observations identified by curators of the specified project(s)
         *
         */
        pcid?: boolean;
        /**
         * Observations with photos
         */
        photos?: boolean;
        /**
         * Observations that have been favorited by at least one user
         *
         */
        popular?: boolean;
        /**
         * Observations with sounds
         */
        sounds?: boolean;
        /**
         * Observations of active taxon concepts
         *
         */
        taxonIsActive?: boolean;
        /**
         * Observations whose taxa are threatened in their location
         *
         */
        threatened?: boolean;
        /**
         * Observations with a `quality_grade` of either `needs_id` or
         * `research`. Equivalent to `quality_grade=needs_id,research`
         *
         */
        verifiable?: boolean;
        /**
         * License attribute of an observation must not be null
         */
        licensed?: boolean;
        /**
         * License attribute of at least one photo of an observation must not be null
         */
        photoLicensed?: boolean;
        /**
         * Observation taxon is expected nearby
         */
        expectedNearby?: boolean;
        /**
         * Must have this ID
         */
        id?: Array<string>;
        /**
         * Must not have this ID
         */
        notId?: Array<string>;
        /**
         * Observation must have this license
         */
        license?: 'cc-by' | 'cc-by-nc' | 'cc-by-nd' | 'cc-by-sa' | 'cc-by-nc-nd' | 'cc-by-nc-sa' | 'cc0';
        /**
         * Must have an observation field value with this datatype
         */
        ofvDatatype?: Array<string>;
        /**
         * Must have at least one photo with this license
         */
        photoLicense?: 'cc-by' | 'cc-by-nc' | 'cc-by-nd' | 'cc-by-sa' | 'cc-by-nc-nd' | 'cc-by-nc-sa' | 'cc0';
        /**
         * Must be observed within the place with this ID
         */
        placeId?: Array<number>;
        /**
         * Must be added to the project this ID or slug
         */
        projectId?: Array<string>;
        /**
         * Taxon must have this rank
         */
        rank?: 'kingdom' | 'phylum' | 'subphylum' | 'superclass' | 'class' | 'subclass' | 'superorder' | 'order' | 'suborder' | 'infraorder' | 'superfamily' | 'epifamily' | 'family' | 'subfamily' | 'supertribe' | 'tribe' | 'subtribe' | 'genus' | 'genushybrid' | 'species' | 'hybrid' | 'subspecies' | 'variety' | 'form';
        /**
         * Must be affiliated with the iNaturalist network website with this ID
         *
         */
        siteId?: Array<string>;
        /**
         * Must have at least one sound with this license
         */
        soundLicense?: 'cc-by' | 'cc-by-nc' | 'cc-by-nd' | 'cc-by-sa' | 'cc-by-nc-nd' | 'cc-by-nc-sa' | 'cc0';
        /**
         * Only show observations of these taxa and their descendants
         */
        taxonId?: Array<string>;
        /**
         * Exclude observations of these taxa and their descendants
         */
        withoutTaxonId?: Array<string>;
        /**
         * Taxon must have a scientific or common name matching this string
         *
         */
        taxonName?: Array<string>;
        /**
         * User must have this ID or login
         */
        userId?: Array<string>;
        /**
         * User must have this login
         */
        userLogin?: Array<string>;
        /**
         * Observations identified by a particular user
         */
        identUserId?: number;
        /**
         * Must be observed within this hour of the day
         */
        hour?: Array<string>;
        /**
         * Must be observed within this day of the month
         */
        day?: Array<string>;
        /**
         * Must be observed within this month
         */
        month?: Array<string>;
        /**
         * Must be observed within this year
         */
        year?: Array<string>;
        /**
         * Must be created within this day of the month
         */
        createdDay?: Array<string>;
        /**
         * Must be created within this month
         */
        createdMonth?: Array<string>;
        /**
         * Must be created within this year
         */
        createdYear?: Array<string>;
        /**
         * Must have an annotation using this controlled term ID
         */
        termId?: Array<number>;
        /**
         * Must have an annotation using this controlled value ID. Must be combined
         * with the `term_id` parameter
         *
         */
        termValueId?: Array<number>;
        /**
         * Exclude observations with annotations using this controlled value ID.
         *
         */
        withoutTermId?: number;
        /**
         * Exclude observations with annotations using this controlled value ID.
         * Must be combined with the `term_id` parameter
         *
         */
        withoutTermValueId?: Array<number>;
        /**
         * Must be combined with the `term_value_id` or the `without_term_value_id` parameter.
         * Must have an annotation using this controlled term ID and associated term value IDs
         * or be missing this annotation.
         *
         */
        termIdOrUnknown?: Array<number>;
        /**
         * Must have an annotation created by this user
         *
         */
        annotationUserId?: Array<string>;
        /**
         * Must have a positional accuracy above this value (meters)
         */
        accAbove?: string;
        /**
         * Must have a positional accuracy below this value (meters)
         */
        accBelow?: string;
        /**
         * Positional accuracy must be below this value (in meters) or be unknown
         */
        accBelowOrUnknown?: string;
        /**
         * Must be observed on or after this date
         */
        d1?: string;
        /**
         * Must be observed on or before this date
         */
        d2?: string;
        /**
         * Must be created at or after this time
         */
        createdD1?: string;
        /**
         * Must be created at or before this time
         */
        createdD2?: string;
        /**
         * Must be created on this date
         */
        createdOn?: string;
        /**
         * Must be observed on this date
         */
        observedOn?: string;
        /**
         * Must not be of a taxon previously observed by this user
         */
        unobservedByUserId?: number;
        /**
         * Must match the rules of the project with this ID or slug
         */
        applyProjectRulesFor?: string;
        /**
         * Taxon must have this conservation status code. If
         * the `place_id` parameter is also specified, this will only consider
         * statuses specific to that place
         *
         */
        cs?: string;
        /**
         * Taxon must have a conservation status from this authority. If
         * the `place_id` parameter is also specified, this will only consider
         * statuses specific to that place
         *
         */
        csa?: string;
        /**
         * Taxon must have this IUCN conservation status. If
         * the `place_id` parameter is also specified, this will only consider
         * statuses specific to that place
         *
         */
        csi?: 'LC' | 'NT' | 'VU' | 'EN' | 'CR' | 'EW' | 'EX';
        /**
         * Must have this geoprivacy setting
         */
        geoprivacy?: 'obscured' | 'obscured_private' | 'open' | 'private';
        /**
         * Filter observations by the most conservative geoprivacy applied by a
         * conservation status associated with one of the taxa proposed in the
         * current identifications.
         *
         */
        taxonGeoprivacy?: 'obscured' | 'obscured_private' | 'open' | 'private';
        /**
         * Must have `geoprivacy` or `taxon_geoprivacy` fields matching these values
         *
         */
        obscuration?: 'obscured' | 'private' | 'none';
        /**
         * Taxon must have this rank or lower
         */
        hrank?: 'kingdom' | 'phylum' | 'subphylum' | 'superclass' | 'class' | 'subclass' | 'superorder' | 'order' | 'suborder' | 'infraorder' | 'superfamily' | 'epifamily' | 'family' | 'subfamily' | 'supertribe' | 'tribe' | 'subtribe' | 'genus' | 'genushybrid' | 'species' | 'hybrid' | 'subspecies' | 'variety' | 'form';
        /**
         * Taxon must have this rank or higher
         */
        lrank?: 'kingdom' | 'phylum' | 'subphylum' | 'superclass' | 'class' | 'subclass' | 'superorder' | 'order' | 'suborder' | 'infraorder' | 'superfamily' | 'epifamily' | 'family' | 'subfamily' | 'supertribe' | 'tribe' | 'subtribe' | 'genus' | 'genushybrid' | 'species' | 'hybrid' | 'subspecies' | 'variety' | 'form';
        /**
         * Taxon must by within this iconic taxon
         */
        iconicTaxa?: 'Actinopterygii' | 'Animalia' | 'Amphibia' | 'Arachnida' | 'Aves' | 'Chromista' | 'Fungi' | 'Insecta' | 'Mammalia' | 'Mollusca' | 'Reptilia' | 'Plantae' | 'Protozoa' | 'unknown';
        /**
         * Must have an ID above this value
         */
        idAbove?: string;
        /**
         * Must have an ID below this value
         */
        idBelow?: string;
        /**
         * Identifications must meet these criteria
         */
        identifications?: 'most_agree' | 'most_disagree' | 'some_agree';
        /**
         * Must be within a {`radius`} kilometer circle around this lat/lng
         * (*lat, *lng, radius)
         *
         */
        lat?: number;
        /**
         * Must be within a {`radius`} kilometer circle around this lat/lng
         * (*lat, *lng, radius)
         *
         */
        lng?: number;
        /**
         * Must be within a {`radius`} kilometer circle around this lat/lng
         * (*lat, *lng, radius)
         *
         */
        radius?: string;
        /**
         * Must be within this bounding box (*nelat, *nelng, *swlat, *swlng)
         *
         */
        nelat?: number;
        /**
         * Must be within this bounding box (*nelat, *nelng, *swlat, *swlng)
         *
         */
        nelng?: number;
        /**
         * Must be within this bounding box (*nelat, *nelng, *swlat, *swlng)
         *
         */
        swlat?: number;
        /**
         * Must be within this bounding box (*nelat, *nelng, *swlat, *swlng)
         *
         */
        swlng?: number;
        /**
         * Taxon must be in the list with this ID
         */
        listId?: number;
        /**
         * Must not be in the project with this ID or slug
         */
        notInProject?: string;
        /**
         * Must not match the rules of the project with this ID or slug
         */
        notMatchingProjectRulesFor?: string;
        /**
         * Must included in this observation accuracy experiment
         */
        observationAccuracyExperimentId?: Array<number>;
        /**
         * Search observation properties. Can be combined with `search_on`
         */
        q?: string;
        /**
         * Properties to search on, when combined with `q`.
         * Searches across all properties by default
         *
         */
        searchOn?: 'names' | 'tags' | 'description' | 'place';
        /**
         * Must have this quality grade
         */
        qualityGrade?: 'casual' | 'needs_id' | 'research';
        /**
         * Must be updated since this time
         */
        updatedSince?: string;
        /**
         * See `reviewed`
         */
        viewerId?: string;
        /**
         * Observations have been reviewed by the user with ID equal to
         * the value of the `viewer_id` parameter
         *
         */
        reviewed?: boolean;
    };
    url: '/heatmap/{zoom}/{x}/{y}.png';
};

export type GetHeatmapByZoomByXByYPngResponses = {
    /**
     * Returns a PNG map tile image
     *
     */
    200: unknown;
};

export type GetHeatmapByZoomByXByYGridJsonData = {
    body?: never;
    path: {
        /**
         * Zoom level. Z coordinate in the XYZ tiling scheme
         */
        zoom: number;
        /**
         * X coordinate in the XYZ tiling scheme. Must be less than 2^zoom
         */
        x: number;
        /**
         * Y coordinate in the XYZ tiling scheme. Must be less than 2^zoom
         */
        y: number;
    };
    query?: {
        /**
         * Primary color to use in tile creation. Accepts common colors by string
         * (e.g. `color=blue`), and accepts escaped color HEX codes
         * (e.g. `color=%2386a91c`)
         *
         */
        color?: string;
        /**
         * Whether or not positional accuracy / coordinate uncertainty has been specified
         */
        acc?: boolean;
        /**
         * Captive or cultivated observations
         */
        captive?: boolean;
        /**
         * Observations whose taxa are endemic to their location
         */
        endemic?: boolean;
        /**
         * Observations that are georeferenced
         */
        geo?: boolean;
        /**
         * Observations with the deprecated `ID, Please!` flag. Note that this will return observations, but that this attribute is no longer used.
         */
        idPlease?: boolean;
        /**
         * Observations that have community identifications
         */
        identified?: boolean;
        /**
         * Observations whose taxa are introduced in their location
         *
         */
        introduced?: boolean;
        /**
         * Observations that show on map tiles
         */
        mappable?: boolean;
        /**
         * Observations whose taxa are native to their location
         */
        native?: boolean;
        /**
         * Observations whose taxa are outside their known ranges
         */
        outOfRange?: boolean;
        /**
         * Observations identified by the curator of a project. If
         * the `project_id` parameter is also specified, this will only consider
         * observations identified by curators of the specified project(s)
         *
         */
        pcid?: boolean;
        /**
         * Observations with photos
         */
        photos?: boolean;
        /**
         * Observations that have been favorited by at least one user
         *
         */
        popular?: boolean;
        /**
         * Observations with sounds
         */
        sounds?: boolean;
        /**
         * Observations of active taxon concepts
         *
         */
        taxonIsActive?: boolean;
        /**
         * Observations whose taxa are threatened in their location
         *
         */
        threatened?: boolean;
        /**
         * Observations with a `quality_grade` of either `needs_id` or
         * `research`. Equivalent to `quality_grade=needs_id,research`
         *
         */
        verifiable?: boolean;
        /**
         * License attribute of an observation must not be null
         */
        licensed?: boolean;
        /**
         * License attribute of at least one photo of an observation must not be null
         */
        photoLicensed?: boolean;
        /**
         * Observation taxon is expected nearby
         */
        expectedNearby?: boolean;
        /**
         * Must have this ID
         */
        id?: Array<string>;
        /**
         * Must not have this ID
         */
        notId?: Array<string>;
        /**
         * Observation must have this license
         */
        license?: 'cc-by' | 'cc-by-nc' | 'cc-by-nd' | 'cc-by-sa' | 'cc-by-nc-nd' | 'cc-by-nc-sa' | 'cc0';
        /**
         * Must have an observation field value with this datatype
         */
        ofvDatatype?: Array<string>;
        /**
         * Must have at least one photo with this license
         */
        photoLicense?: 'cc-by' | 'cc-by-nc' | 'cc-by-nd' | 'cc-by-sa' | 'cc-by-nc-nd' | 'cc-by-nc-sa' | 'cc0';
        /**
         * Must be observed within the place with this ID
         */
        placeId?: Array<number>;
        /**
         * Must be added to the project this ID or slug
         */
        projectId?: Array<string>;
        /**
         * Taxon must have this rank
         */
        rank?: 'kingdom' | 'phylum' | 'subphylum' | 'superclass' | 'class' | 'subclass' | 'superorder' | 'order' | 'suborder' | 'infraorder' | 'superfamily' | 'epifamily' | 'family' | 'subfamily' | 'supertribe' | 'tribe' | 'subtribe' | 'genus' | 'genushybrid' | 'species' | 'hybrid' | 'subspecies' | 'variety' | 'form';
        /**
         * Must be affiliated with the iNaturalist network website with this ID
         *
         */
        siteId?: Array<string>;
        /**
         * Must have at least one sound with this license
         */
        soundLicense?: 'cc-by' | 'cc-by-nc' | 'cc-by-nd' | 'cc-by-sa' | 'cc-by-nc-nd' | 'cc-by-nc-sa' | 'cc0';
        /**
         * Only show observations of these taxa and their descendants
         */
        taxonId?: Array<string>;
        /**
         * Exclude observations of these taxa and their descendants
         */
        withoutTaxonId?: Array<string>;
        /**
         * Taxon must have a scientific or common name matching this string
         *
         */
        taxonName?: Array<string>;
        /**
         * User must have this ID or login
         */
        userId?: Array<string>;
        /**
         * User must have this login
         */
        userLogin?: Array<string>;
        /**
         * Observations identified by a particular user
         */
        identUserId?: number;
        /**
         * Must be observed within this hour of the day
         */
        hour?: Array<string>;
        /**
         * Must be observed within this day of the month
         */
        day?: Array<string>;
        /**
         * Must be observed within this month
         */
        month?: Array<string>;
        /**
         * Must be observed within this year
         */
        year?: Array<string>;
        /**
         * Must be created within this day of the month
         */
        createdDay?: Array<string>;
        /**
         * Must be created within this month
         */
        createdMonth?: Array<string>;
        /**
         * Must be created within this year
         */
        createdYear?: Array<string>;
        /**
         * Must have an annotation using this controlled term ID
         */
        termId?: Array<number>;
        /**
         * Must have an annotation using this controlled value ID. Must be combined
         * with the `term_id` parameter
         *
         */
        termValueId?: Array<number>;
        /**
         * Exclude observations with annotations using this controlled value ID.
         *
         */
        withoutTermId?: number;
        /**
         * Exclude observations with annotations using this controlled value ID.
         * Must be combined with the `term_id` parameter
         *
         */
        withoutTermValueId?: Array<number>;
        /**
         * Must be combined with the `term_value_id` or the `without_term_value_id` parameter.
         * Must have an annotation using this controlled term ID and associated term value IDs
         * or be missing this annotation.
         *
         */
        termIdOrUnknown?: Array<number>;
        /**
         * Must have an annotation created by this user
         *
         */
        annotationUserId?: Array<string>;
        /**
         * Must have a positional accuracy above this value (meters)
         */
        accAbove?: string;
        /**
         * Must have a positional accuracy below this value (meters)
         */
        accBelow?: string;
        /**
         * Positional accuracy must be below this value (in meters) or be unknown
         */
        accBelowOrUnknown?: string;
        /**
         * Must be observed on or after this date
         */
        d1?: string;
        /**
         * Must be observed on or before this date
         */
        d2?: string;
        /**
         * Must be created at or after this time
         */
        createdD1?: string;
        /**
         * Must be created at or before this time
         */
        createdD2?: string;
        /**
         * Must be created on this date
         */
        createdOn?: string;
        /**
         * Must be observed on this date
         */
        observedOn?: string;
        /**
         * Must not be of a taxon previously observed by this user
         */
        unobservedByUserId?: number;
        /**
         * Must match the rules of the project with this ID or slug
         */
        applyProjectRulesFor?: string;
        /**
         * Taxon must have this conservation status code. If
         * the `place_id` parameter is also specified, this will only consider
         * statuses specific to that place
         *
         */
        cs?: string;
        /**
         * Taxon must have a conservation status from this authority. If
         * the `place_id` parameter is also specified, this will only consider
         * statuses specific to that place
         *
         */
        csa?: string;
        /**
         * Taxon must have this IUCN conservation status. If
         * the `place_id` parameter is also specified, this will only consider
         * statuses specific to that place
         *
         */
        csi?: 'LC' | 'NT' | 'VU' | 'EN' | 'CR' | 'EW' | 'EX';
        /**
         * Must have this geoprivacy setting
         */
        geoprivacy?: 'obscured' | 'obscured_private' | 'open' | 'private';
        /**
         * Filter observations by the most conservative geoprivacy applied by a
         * conservation status associated with one of the taxa proposed in the
         * current identifications.
         *
         */
        taxonGeoprivacy?: 'obscured' | 'obscured_private' | 'open' | 'private';
        /**
         * Must have `geoprivacy` or `taxon_geoprivacy` fields matching these values
         *
         */
        obscuration?: 'obscured' | 'private' | 'none';
        /**
         * Taxon must have this rank or lower
         */
        hrank?: 'kingdom' | 'phylum' | 'subphylum' | 'superclass' | 'class' | 'subclass' | 'superorder' | 'order' | 'suborder' | 'infraorder' | 'superfamily' | 'epifamily' | 'family' | 'subfamily' | 'supertribe' | 'tribe' | 'subtribe' | 'genus' | 'genushybrid' | 'species' | 'hybrid' | 'subspecies' | 'variety' | 'form';
        /**
         * Taxon must have this rank or higher
         */
        lrank?: 'kingdom' | 'phylum' | 'subphylum' | 'superclass' | 'class' | 'subclass' | 'superorder' | 'order' | 'suborder' | 'infraorder' | 'superfamily' | 'epifamily' | 'family' | 'subfamily' | 'supertribe' | 'tribe' | 'subtribe' | 'genus' | 'genushybrid' | 'species' | 'hybrid' | 'subspecies' | 'variety' | 'form';
        /**
         * Taxon must by within this iconic taxon
         */
        iconicTaxa?: 'Actinopterygii' | 'Animalia' | 'Amphibia' | 'Arachnida' | 'Aves' | 'Chromista' | 'Fungi' | 'Insecta' | 'Mammalia' | 'Mollusca' | 'Reptilia' | 'Plantae' | 'Protozoa' | 'unknown';
        /**
         * Must have an ID above this value
         */
        idAbove?: string;
        /**
         * Must have an ID below this value
         */
        idBelow?: string;
        /**
         * Identifications must meet these criteria
         */
        identifications?: 'most_agree' | 'most_disagree' | 'some_agree';
        /**
         * Must be within a {`radius`} kilometer circle around this lat/lng
         * (*lat, *lng, radius)
         *
         */
        lat?: number;
        /**
         * Must be within a {`radius`} kilometer circle around this lat/lng
         * (*lat, *lng, radius)
         *
         */
        lng?: number;
        /**
         * Must be within a {`radius`} kilometer circle around this lat/lng
         * (*lat, *lng, radius)
         *
         */
        radius?: string;
        /**
         * Must be within this bounding box (*nelat, *nelng, *swlat, *swlng)
         *
         */
        nelat?: number;
        /**
         * Must be within this bounding box (*nelat, *nelng, *swlat, *swlng)
         *
         */
        nelng?: number;
        /**
         * Must be within this bounding box (*nelat, *nelng, *swlat, *swlng)
         *
         */
        swlat?: number;
        /**
         * Must be within this bounding box (*nelat, *nelng, *swlat, *swlng)
         *
         */
        swlng?: number;
        /**
         * Taxon must be in the list with this ID
         */
        listId?: number;
        /**
         * Must not be in the project with this ID or slug
         */
        notInProject?: string;
        /**
         * Must not match the rules of the project with this ID or slug
         */
        notMatchingProjectRulesFor?: string;
        /**
         * Must included in this observation accuracy experiment
         */
        observationAccuracyExperimentId?: Array<number>;
        /**
         * Search observation properties. Can be combined with `search_on`
         */
        q?: string;
        /**
         * Properties to search on, when combined with `q`.
         * Searches across all properties by default
         *
         */
        searchOn?: 'names' | 'tags' | 'description' | 'place';
        /**
         * Must have this quality grade
         */
        qualityGrade?: 'casual' | 'needs_id' | 'research';
        /**
         * Must be updated since this time
         */
        updatedSince?: string;
        /**
         * See `reviewed`
         */
        viewerId?: string;
        /**
         * Observations have been reviewed by the user with ID equal to
         * the value of the `viewer_id` parameter
         *
         */
        reviewed?: boolean;
    };
    url: '/heatmap/{zoom}/{x}/{y}.grid.json';
};

export type GetHeatmapByZoomByXByYGridJsonErrors = {
    /**
     * Unexpected error
     */
    default: _Error;
};

export type GetHeatmapByZoomByXByYGridJsonError = GetHeatmapByZoomByXByYGridJsonErrors[keyof GetHeatmapByZoomByXByYGridJsonErrors];

export type GetHeatmapByZoomByXByYGridJsonResponses = {
    /**
     * Returns a UTFGrid
     *
     */
    200: UtfGridResponse;
};

export type GetHeatmapByZoomByXByYGridJsonResponse = GetHeatmapByZoomByXByYGridJsonResponses[keyof GetHeatmapByZoomByXByYGridJsonResponses];

export type GetPointsByZoomByXByYPngData = {
    body?: never;
    path: {
        /**
         * Zoom level. Z coordinate in the XYZ tiling scheme
         */
        zoom: number;
        /**
         * X coordinate in the XYZ tiling scheme. Must be less than 2^zoom
         */
        x: number;
        /**
         * Y coordinate in the XYZ tiling scheme. Must be less than 2^zoom
         */
        y: number;
    };
    query?: {
        /**
         * Primary color to use in tile creation. Accepts common colors by string
         * (e.g. `color=blue`), and accepts escaped color HEX codes
         * (e.g. `color=%2386a91c`)
         *
         */
        color?: string;
        /**
         * Whether or not positional accuracy / coordinate uncertainty has been specified
         */
        acc?: boolean;
        /**
         * Captive or cultivated observations
         */
        captive?: boolean;
        /**
         * Observations whose taxa are endemic to their location
         */
        endemic?: boolean;
        /**
         * Observations that are georeferenced
         */
        geo?: boolean;
        /**
         * Observations with the deprecated `ID, Please!` flag. Note that this will return observations, but that this attribute is no longer used.
         */
        idPlease?: boolean;
        /**
         * Observations that have community identifications
         */
        identified?: boolean;
        /**
         * Observations whose taxa are introduced in their location
         *
         */
        introduced?: boolean;
        /**
         * Observations that show on map tiles
         */
        mappable?: boolean;
        /**
         * Observations whose taxa are native to their location
         */
        native?: boolean;
        /**
         * Observations whose taxa are outside their known ranges
         */
        outOfRange?: boolean;
        /**
         * Observations identified by the curator of a project. If
         * the `project_id` parameter is also specified, this will only consider
         * observations identified by curators of the specified project(s)
         *
         */
        pcid?: boolean;
        /**
         * Observations with photos
         */
        photos?: boolean;
        /**
         * Observations that have been favorited by at least one user
         *
         */
        popular?: boolean;
        /**
         * Observations with sounds
         */
        sounds?: boolean;
        /**
         * Observations of active taxon concepts
         *
         */
        taxonIsActive?: boolean;
        /**
         * Observations whose taxa are threatened in their location
         *
         */
        threatened?: boolean;
        /**
         * Observations with a `quality_grade` of either `needs_id` or
         * `research`. Equivalent to `quality_grade=needs_id,research`
         *
         */
        verifiable?: boolean;
        /**
         * License attribute of an observation must not be null
         */
        licensed?: boolean;
        /**
         * License attribute of at least one photo of an observation must not be null
         */
        photoLicensed?: boolean;
        /**
         * Observation taxon is expected nearby
         */
        expectedNearby?: boolean;
        /**
         * Must have this ID
         */
        id?: Array<string>;
        /**
         * Must not have this ID
         */
        notId?: Array<string>;
        /**
         * Observation must have this license
         */
        license?: 'cc-by' | 'cc-by-nc' | 'cc-by-nd' | 'cc-by-sa' | 'cc-by-nc-nd' | 'cc-by-nc-sa' | 'cc0';
        /**
         * Must have an observation field value with this datatype
         */
        ofvDatatype?: Array<string>;
        /**
         * Must have at least one photo with this license
         */
        photoLicense?: 'cc-by' | 'cc-by-nc' | 'cc-by-nd' | 'cc-by-sa' | 'cc-by-nc-nd' | 'cc-by-nc-sa' | 'cc0';
        /**
         * Must be observed within the place with this ID
         */
        placeId?: Array<number>;
        /**
         * Must be added to the project this ID or slug
         */
        projectId?: Array<string>;
        /**
         * Taxon must have this rank
         */
        rank?: 'kingdom' | 'phylum' | 'subphylum' | 'superclass' | 'class' | 'subclass' | 'superorder' | 'order' | 'suborder' | 'infraorder' | 'superfamily' | 'epifamily' | 'family' | 'subfamily' | 'supertribe' | 'tribe' | 'subtribe' | 'genus' | 'genushybrid' | 'species' | 'hybrid' | 'subspecies' | 'variety' | 'form';
        /**
         * Must be affiliated with the iNaturalist network website with this ID
         *
         */
        siteId?: Array<string>;
        /**
         * Must have at least one sound with this license
         */
        soundLicense?: 'cc-by' | 'cc-by-nc' | 'cc-by-nd' | 'cc-by-sa' | 'cc-by-nc-nd' | 'cc-by-nc-sa' | 'cc0';
        /**
         * Only show observations of these taxa and their descendants
         */
        taxonId?: Array<string>;
        /**
         * Exclude observations of these taxa and their descendants
         */
        withoutTaxonId?: Array<string>;
        /**
         * Taxon must have a scientific or common name matching this string
         *
         */
        taxonName?: Array<string>;
        /**
         * User must have this ID or login
         */
        userId?: Array<string>;
        /**
         * User must have this login
         */
        userLogin?: Array<string>;
        /**
         * Observations identified by a particular user
         */
        identUserId?: number;
        /**
         * Must be observed within this hour of the day
         */
        hour?: Array<string>;
        /**
         * Must be observed within this day of the month
         */
        day?: Array<string>;
        /**
         * Must be observed within this month
         */
        month?: Array<string>;
        /**
         * Must be observed within this year
         */
        year?: Array<string>;
        /**
         * Must be created within this day of the month
         */
        createdDay?: Array<string>;
        /**
         * Must be created within this month
         */
        createdMonth?: Array<string>;
        /**
         * Must be created within this year
         */
        createdYear?: Array<string>;
        /**
         * Must have an annotation using this controlled term ID
         */
        termId?: Array<number>;
        /**
         * Must have an annotation using this controlled value ID. Must be combined
         * with the `term_id` parameter
         *
         */
        termValueId?: Array<number>;
        /**
         * Exclude observations with annotations using this controlled value ID.
         *
         */
        withoutTermId?: number;
        /**
         * Exclude observations with annotations using this controlled value ID.
         * Must be combined with the `term_id` parameter
         *
         */
        withoutTermValueId?: Array<number>;
        /**
         * Must be combined with the `term_value_id` or the `without_term_value_id` parameter.
         * Must have an annotation using this controlled term ID and associated term value IDs
         * or be missing this annotation.
         *
         */
        termIdOrUnknown?: Array<number>;
        /**
         * Must have an annotation created by this user
         *
         */
        annotationUserId?: Array<string>;
        /**
         * Must have a positional accuracy above this value (meters)
         */
        accAbove?: string;
        /**
         * Must have a positional accuracy below this value (meters)
         */
        accBelow?: string;
        /**
         * Positional accuracy must be below this value (in meters) or be unknown
         */
        accBelowOrUnknown?: string;
        /**
         * Must be observed on or after this date
         */
        d1?: string;
        /**
         * Must be observed on or before this date
         */
        d2?: string;
        /**
         * Must be created at or after this time
         */
        createdD1?: string;
        /**
         * Must be created at or before this time
         */
        createdD2?: string;
        /**
         * Must be created on this date
         */
        createdOn?: string;
        /**
         * Must be observed on this date
         */
        observedOn?: string;
        /**
         * Must not be of a taxon previously observed by this user
         */
        unobservedByUserId?: number;
        /**
         * Must match the rules of the project with this ID or slug
         */
        applyProjectRulesFor?: string;
        /**
         * Taxon must have this conservation status code. If
         * the `place_id` parameter is also specified, this will only consider
         * statuses specific to that place
         *
         */
        cs?: string;
        /**
         * Taxon must have a conservation status from this authority. If
         * the `place_id` parameter is also specified, this will only consider
         * statuses specific to that place
         *
         */
        csa?: string;
        /**
         * Taxon must have this IUCN conservation status. If
         * the `place_id` parameter is also specified, this will only consider
         * statuses specific to that place
         *
         */
        csi?: 'LC' | 'NT' | 'VU' | 'EN' | 'CR' | 'EW' | 'EX';
        /**
         * Must have this geoprivacy setting
         */
        geoprivacy?: 'obscured' | 'obscured_private' | 'open' | 'private';
        /**
         * Filter observations by the most conservative geoprivacy applied by a
         * conservation status associated with one of the taxa proposed in the
         * current identifications.
         *
         */
        taxonGeoprivacy?: 'obscured' | 'obscured_private' | 'open' | 'private';
        /**
         * Must have `geoprivacy` or `taxon_geoprivacy` fields matching these values
         *
         */
        obscuration?: 'obscured' | 'private' | 'none';
        /**
         * Taxon must have this rank or lower
         */
        hrank?: 'kingdom' | 'phylum' | 'subphylum' | 'superclass' | 'class' | 'subclass' | 'superorder' | 'order' | 'suborder' | 'infraorder' | 'superfamily' | 'epifamily' | 'family' | 'subfamily' | 'supertribe' | 'tribe' | 'subtribe' | 'genus' | 'genushybrid' | 'species' | 'hybrid' | 'subspecies' | 'variety' | 'form';
        /**
         * Taxon must have this rank or higher
         */
        lrank?: 'kingdom' | 'phylum' | 'subphylum' | 'superclass' | 'class' | 'subclass' | 'superorder' | 'order' | 'suborder' | 'infraorder' | 'superfamily' | 'epifamily' | 'family' | 'subfamily' | 'supertribe' | 'tribe' | 'subtribe' | 'genus' | 'genushybrid' | 'species' | 'hybrid' | 'subspecies' | 'variety' | 'form';
        /**
         * Taxon must by within this iconic taxon
         */
        iconicTaxa?: 'Actinopterygii' | 'Animalia' | 'Amphibia' | 'Arachnida' | 'Aves' | 'Chromista' | 'Fungi' | 'Insecta' | 'Mammalia' | 'Mollusca' | 'Reptilia' | 'Plantae' | 'Protozoa' | 'unknown';
        /**
         * Must have an ID above this value
         */
        idAbove?: string;
        /**
         * Must have an ID below this value
         */
        idBelow?: string;
        /**
         * Identifications must meet these criteria
         */
        identifications?: 'most_agree' | 'most_disagree' | 'some_agree';
        /**
         * Must be within a {`radius`} kilometer circle around this lat/lng
         * (*lat, *lng, radius)
         *
         */
        lat?: number;
        /**
         * Must be within a {`radius`} kilometer circle around this lat/lng
         * (*lat, *lng, radius)
         *
         */
        lng?: number;
        /**
         * Must be within a {`radius`} kilometer circle around this lat/lng
         * (*lat, *lng, radius)
         *
         */
        radius?: string;
        /**
         * Must be within this bounding box (*nelat, *nelng, *swlat, *swlng)
         *
         */
        nelat?: number;
        /**
         * Must be within this bounding box (*nelat, *nelng, *swlat, *swlng)
         *
         */
        nelng?: number;
        /**
         * Must be within this bounding box (*nelat, *nelng, *swlat, *swlng)
         *
         */
        swlat?: number;
        /**
         * Must be within this bounding box (*nelat, *nelng, *swlat, *swlng)
         *
         */
        swlng?: number;
        /**
         * Taxon must be in the list with this ID
         */
        listId?: number;
        /**
         * Must not be in the project with this ID or slug
         */
        notInProject?: string;
        /**
         * Must not match the rules of the project with this ID or slug
         */
        notMatchingProjectRulesFor?: string;
        /**
         * Must included in this observation accuracy experiment
         */
        observationAccuracyExperimentId?: Array<number>;
        /**
         * Search observation properties. Can be combined with `search_on`
         */
        q?: string;
        /**
         * Properties to search on, when combined with `q`.
         * Searches across all properties by default
         *
         */
        searchOn?: 'names' | 'tags' | 'description' | 'place';
        /**
         * Must have this quality grade
         */
        qualityGrade?: 'casual' | 'needs_id' | 'research';
        /**
         * Must be updated since this time
         */
        updatedSince?: string;
        /**
         * See `reviewed`
         */
        viewerId?: string;
        /**
         * Observations have been reviewed by the user with ID equal to
         * the value of the `viewer_id` parameter
         *
         */
        reviewed?: boolean;
    };
    url: '/points/{zoom}/{x}/{y}.png';
};

export type GetPointsByZoomByXByYPngResponses = {
    /**
     * Returns a PNG map tile image
     *
     */
    200: unknown;
};

export type GetPointsByZoomByXByYGridJsonData = {
    body?: never;
    path: {
        /**
         * Zoom level. Z coordinate in the XYZ tiling scheme
         */
        zoom: number;
        /**
         * X coordinate in the XYZ tiling scheme. Must be less than 2^zoom
         */
        x: number;
        /**
         * Y coordinate in the XYZ tiling scheme. Must be less than 2^zoom
         */
        y: number;
    };
    query?: {
        /**
         * Primary color to use in tile creation. Accepts common colors by string
         * (e.g. `color=blue`), and accepts escaped color HEX codes
         * (e.g. `color=%2386a91c`)
         *
         */
        color?: string;
        /**
         * Whether or not positional accuracy / coordinate uncertainty has been specified
         */
        acc?: boolean;
        /**
         * Captive or cultivated observations
         */
        captive?: boolean;
        /**
         * Observations whose taxa are endemic to their location
         */
        endemic?: boolean;
        /**
         * Observations that are georeferenced
         */
        geo?: boolean;
        /**
         * Observations with the deprecated `ID, Please!` flag. Note that this will return observations, but that this attribute is no longer used.
         */
        idPlease?: boolean;
        /**
         * Observations that have community identifications
         */
        identified?: boolean;
        /**
         * Observations whose taxa are introduced in their location
         *
         */
        introduced?: boolean;
        /**
         * Observations that show on map tiles
         */
        mappable?: boolean;
        /**
         * Observations whose taxa are native to their location
         */
        native?: boolean;
        /**
         * Observations whose taxa are outside their known ranges
         */
        outOfRange?: boolean;
        /**
         * Observations identified by the curator of a project. If
         * the `project_id` parameter is also specified, this will only consider
         * observations identified by curators of the specified project(s)
         *
         */
        pcid?: boolean;
        /**
         * Observations with photos
         */
        photos?: boolean;
        /**
         * Observations that have been favorited by at least one user
         *
         */
        popular?: boolean;
        /**
         * Observations with sounds
         */
        sounds?: boolean;
        /**
         * Observations of active taxon concepts
         *
         */
        taxonIsActive?: boolean;
        /**
         * Observations whose taxa are threatened in their location
         *
         */
        threatened?: boolean;
        /**
         * Observations with a `quality_grade` of either `needs_id` or
         * `research`. Equivalent to `quality_grade=needs_id,research`
         *
         */
        verifiable?: boolean;
        /**
         * License attribute of an observation must not be null
         */
        licensed?: boolean;
        /**
         * License attribute of at least one photo of an observation must not be null
         */
        photoLicensed?: boolean;
        /**
         * Observation taxon is expected nearby
         */
        expectedNearby?: boolean;
        /**
         * Must have this ID
         */
        id?: Array<string>;
        /**
         * Must not have this ID
         */
        notId?: Array<string>;
        /**
         * Observation must have this license
         */
        license?: 'cc-by' | 'cc-by-nc' | 'cc-by-nd' | 'cc-by-sa' | 'cc-by-nc-nd' | 'cc-by-nc-sa' | 'cc0';
        /**
         * Must have an observation field value with this datatype
         */
        ofvDatatype?: Array<string>;
        /**
         * Must have at least one photo with this license
         */
        photoLicense?: 'cc-by' | 'cc-by-nc' | 'cc-by-nd' | 'cc-by-sa' | 'cc-by-nc-nd' | 'cc-by-nc-sa' | 'cc0';
        /**
         * Must be observed within the place with this ID
         */
        placeId?: Array<number>;
        /**
         * Must be added to the project this ID or slug
         */
        projectId?: Array<string>;
        /**
         * Taxon must have this rank
         */
        rank?: 'kingdom' | 'phylum' | 'subphylum' | 'superclass' | 'class' | 'subclass' | 'superorder' | 'order' | 'suborder' | 'infraorder' | 'superfamily' | 'epifamily' | 'family' | 'subfamily' | 'supertribe' | 'tribe' | 'subtribe' | 'genus' | 'genushybrid' | 'species' | 'hybrid' | 'subspecies' | 'variety' | 'form';
        /**
         * Must be affiliated with the iNaturalist network website with this ID
         *
         */
        siteId?: Array<string>;
        /**
         * Must have at least one sound with this license
         */
        soundLicense?: 'cc-by' | 'cc-by-nc' | 'cc-by-nd' | 'cc-by-sa' | 'cc-by-nc-nd' | 'cc-by-nc-sa' | 'cc0';
        /**
         * Only show observations of these taxa and their descendants
         */
        taxonId?: Array<string>;
        /**
         * Exclude observations of these taxa and their descendants
         */
        withoutTaxonId?: Array<string>;
        /**
         * Taxon must have a scientific or common name matching this string
         *
         */
        taxonName?: Array<string>;
        /**
         * User must have this ID or login
         */
        userId?: Array<string>;
        /**
         * User must have this login
         */
        userLogin?: Array<string>;
        /**
         * Observations identified by a particular user
         */
        identUserId?: number;
        /**
         * Must be observed within this hour of the day
         */
        hour?: Array<string>;
        /**
         * Must be observed within this day of the month
         */
        day?: Array<string>;
        /**
         * Must be observed within this month
         */
        month?: Array<string>;
        /**
         * Must be observed within this year
         */
        year?: Array<string>;
        /**
         * Must be created within this day of the month
         */
        createdDay?: Array<string>;
        /**
         * Must be created within this month
         */
        createdMonth?: Array<string>;
        /**
         * Must be created within this year
         */
        createdYear?: Array<string>;
        /**
         * Must have an annotation using this controlled term ID
         */
        termId?: Array<number>;
        /**
         * Must have an annotation using this controlled value ID. Must be combined
         * with the `term_id` parameter
         *
         */
        termValueId?: Array<number>;
        /**
         * Exclude observations with annotations using this controlled value ID.
         *
         */
        withoutTermId?: number;
        /**
         * Exclude observations with annotations using this controlled value ID.
         * Must be combined with the `term_id` parameter
         *
         */
        withoutTermValueId?: Array<number>;
        /**
         * Must be combined with the `term_value_id` or the `without_term_value_id` parameter.
         * Must have an annotation using this controlled term ID and associated term value IDs
         * or be missing this annotation.
         *
         */
        termIdOrUnknown?: Array<number>;
        /**
         * Must have an annotation created by this user
         *
         */
        annotationUserId?: Array<string>;
        /**
         * Must have a positional accuracy above this value (meters)
         */
        accAbove?: string;
        /**
         * Must have a positional accuracy below this value (meters)
         */
        accBelow?: string;
        /**
         * Positional accuracy must be below this value (in meters) or be unknown
         */
        accBelowOrUnknown?: string;
        /**
         * Must be observed on or after this date
         */
        d1?: string;
        /**
         * Must be observed on or before this date
         */
        d2?: string;
        /**
         * Must be created at or after this time
         */
        createdD1?: string;
        /**
         * Must be created at or before this time
         */
        createdD2?: string;
        /**
         * Must be created on this date
         */
        createdOn?: string;
        /**
         * Must be observed on this date
         */
        observedOn?: string;
        /**
         * Must not be of a taxon previously observed by this user
         */
        unobservedByUserId?: number;
        /**
         * Must match the rules of the project with this ID or slug
         */
        applyProjectRulesFor?: string;
        /**
         * Taxon must have this conservation status code. If
         * the `place_id` parameter is also specified, this will only consider
         * statuses specific to that place
         *
         */
        cs?: string;
        /**
         * Taxon must have a conservation status from this authority. If
         * the `place_id` parameter is also specified, this will only consider
         * statuses specific to that place
         *
         */
        csa?: string;
        /**
         * Taxon must have this IUCN conservation status. If
         * the `place_id` parameter is also specified, this will only consider
         * statuses specific to that place
         *
         */
        csi?: 'LC' | 'NT' | 'VU' | 'EN' | 'CR' | 'EW' | 'EX';
        /**
         * Must have this geoprivacy setting
         */
        geoprivacy?: 'obscured' | 'obscured_private' | 'open' | 'private';
        /**
         * Filter observations by the most conservative geoprivacy applied by a
         * conservation status associated with one of the taxa proposed in the
         * current identifications.
         *
         */
        taxonGeoprivacy?: 'obscured' | 'obscured_private' | 'open' | 'private';
        /**
         * Must have `geoprivacy` or `taxon_geoprivacy` fields matching these values
         *
         */
        obscuration?: 'obscured' | 'private' | 'none';
        /**
         * Taxon must have this rank or lower
         */
        hrank?: 'kingdom' | 'phylum' | 'subphylum' | 'superclass' | 'class' | 'subclass' | 'superorder' | 'order' | 'suborder' | 'infraorder' | 'superfamily' | 'epifamily' | 'family' | 'subfamily' | 'supertribe' | 'tribe' | 'subtribe' | 'genus' | 'genushybrid' | 'species' | 'hybrid' | 'subspecies' | 'variety' | 'form';
        /**
         * Taxon must have this rank or higher
         */
        lrank?: 'kingdom' | 'phylum' | 'subphylum' | 'superclass' | 'class' | 'subclass' | 'superorder' | 'order' | 'suborder' | 'infraorder' | 'superfamily' | 'epifamily' | 'family' | 'subfamily' | 'supertribe' | 'tribe' | 'subtribe' | 'genus' | 'genushybrid' | 'species' | 'hybrid' | 'subspecies' | 'variety' | 'form';
        /**
         * Taxon must by within this iconic taxon
         */
        iconicTaxa?: 'Actinopterygii' | 'Animalia' | 'Amphibia' | 'Arachnida' | 'Aves' | 'Chromista' | 'Fungi' | 'Insecta' | 'Mammalia' | 'Mollusca' | 'Reptilia' | 'Plantae' | 'Protozoa' | 'unknown';
        /**
         * Must have an ID above this value
         */
        idAbove?: string;
        /**
         * Must have an ID below this value
         */
        idBelow?: string;
        /**
         * Identifications must meet these criteria
         */
        identifications?: 'most_agree' | 'most_disagree' | 'some_agree';
        /**
         * Must be within a {`radius`} kilometer circle around this lat/lng
         * (*lat, *lng, radius)
         *
         */
        lat?: number;
        /**
         * Must be within a {`radius`} kilometer circle around this lat/lng
         * (*lat, *lng, radius)
         *
         */
        lng?: number;
        /**
         * Must be within a {`radius`} kilometer circle around this lat/lng
         * (*lat, *lng, radius)
         *
         */
        radius?: string;
        /**
         * Must be within this bounding box (*nelat, *nelng, *swlat, *swlng)
         *
         */
        nelat?: number;
        /**
         * Must be within this bounding box (*nelat, *nelng, *swlat, *swlng)
         *
         */
        nelng?: number;
        /**
         * Must be within this bounding box (*nelat, *nelng, *swlat, *swlng)
         *
         */
        swlat?: number;
        /**
         * Must be within this bounding box (*nelat, *nelng, *swlat, *swlng)
         *
         */
        swlng?: number;
        /**
         * Taxon must be in the list with this ID
         */
        listId?: number;
        /**
         * Must not be in the project with this ID or slug
         */
        notInProject?: string;
        /**
         * Must not match the rules of the project with this ID or slug
         */
        notMatchingProjectRulesFor?: string;
        /**
         * Must included in this observation accuracy experiment
         */
        observationAccuracyExperimentId?: Array<number>;
        /**
         * Search observation properties. Can be combined with `search_on`
         */
        q?: string;
        /**
         * Properties to search on, when combined with `q`.
         * Searches across all properties by default
         *
         */
        searchOn?: 'names' | 'tags' | 'description' | 'place';
        /**
         * Must have this quality grade
         */
        qualityGrade?: 'casual' | 'needs_id' | 'research';
        /**
         * Must be updated since this time
         */
        updatedSince?: string;
        /**
         * See `reviewed`
         */
        viewerId?: string;
        /**
         * Observations have been reviewed by the user with ID equal to
         * the value of the `viewer_id` parameter
         *
         */
        reviewed?: boolean;
    };
    url: '/points/{zoom}/{x}/{y}.grid.json';
};

export type GetPointsByZoomByXByYGridJsonErrors = {
    /**
     * Unexpected error
     */
    default: _Error;
};

export type GetPointsByZoomByXByYGridJsonError = GetPointsByZoomByXByYGridJsonErrors[keyof GetPointsByZoomByXByYGridJsonErrors];

export type GetPointsByZoomByXByYGridJsonResponses = {
    /**
     * Returns a UTFGrid
     *
     */
    200: UtfGridResponse;
};

export type GetPointsByZoomByXByYGridJsonResponse = GetPointsByZoomByXByYGridJsonResponses[keyof GetPointsByZoomByXByYGridJsonResponses];

export type GetPlacesByPlaceIdByZoomByXByYPngData = {
    body?: never;
    path: {
        /**
         * Place ID
         */
        placeId: number;
        /**
         * Zoom level. Z coordinate in the XYZ tiling scheme
         */
        zoom: number;
        /**
         * X coordinate in the XYZ tiling scheme. Must be less than 2^zoom
         */
        x: number;
        /**
         * Y coordinate in the XYZ tiling scheme. Must be less than 2^zoom
         */
        y: number;
    };
    query?: {
        /**
         * Set the `Cache-Control` HTTP header with this value as `max-age`, in
         * seconds. This means subsequent identical requests will be cached on
         * iNaturalist servers, and commonly within web browsers
         *
         */
        ttl?: string;
    };
    url: '/places/{place_id}/{zoom}/{x}/{y}.png';
};

export type GetPlacesByPlaceIdByZoomByXByYPngResponses = {
    /**
     * Returns a PNG map tile image
     *
     */
    200: unknown;
};

export type GetTaxonPlacesByTaxonIdByZoomByXByYPngData = {
    body?: never;
    path: {
        /**
         * Taxon ID
         */
        taxonId: number;
        /**
         * Zoom level. Z coordinate in the XYZ tiling scheme
         */
        zoom: number;
        /**
         * X coordinate in the XYZ tiling scheme. Must be less than 2^zoom
         */
        x: number;
        /**
         * Y coordinate in the XYZ tiling scheme. Must be less than 2^zoom
         */
        y: number;
    };
    query?: {
        /**
         * Set the `Cache-Control` HTTP header with this value as `max-age`, in
         * seconds. This means subsequent identical requests will be cached on
         * iNaturalist servers, and commonly within web browsers
         *
         */
        ttl?: string;
    };
    url: '/taxon_places/{taxon_id}/{zoom}/{x}/{y}.png';
};

export type GetTaxonPlacesByTaxonIdByZoomByXByYPngResponses = {
    /**
     * Returns a PNG map tile image
     *
     */
    200: unknown;
};

export type GetTaxonRangesByTaxonIdByZoomByXByYPngData = {
    body?: never;
    path: {
        /**
         * Taxon ID
         */
        taxonId: number;
        /**
         * Zoom level. Z coordinate in the XYZ tiling scheme
         */
        zoom: number;
        /**
         * X coordinate in the XYZ tiling scheme. Must be less than 2^zoom
         */
        x: number;
        /**
         * Y coordinate in the XYZ tiling scheme. Must be less than 2^zoom
         */
        y: number;
    };
    query?: {
        /**
         * Primary color to use in tile creation. Accepts common colors by string
         * (e.g. `color=blue`), and accepts escaped color HEX codes
         * (e.g. `color=%2386a91c`)
         *
         */
        color?: string;
        /**
         * Set the `Cache-Control` HTTP header with this value as `max-age`, in
         * seconds. This means subsequent identical requests will be cached on
         * iNaturalist servers, and commonly within web browsers
         *
         */
        ttl?: string;
    };
    url: '/taxon_ranges/{taxon_id}/{zoom}/{x}/{y}.png';
};

export type GetTaxonRangesByTaxonIdByZoomByXByYPngResponses = {
    /**
     * Returns a PNG map tile image
     *
     */
    200: unknown;
};

export type ClientOptions = {
    baseUrl: 'http://api.inaturalist.org/v1' | 'https://api.inaturalist.org/v1' | (string & {});
};